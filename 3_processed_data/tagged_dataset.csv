source,data_id,timestamp,raw_text,author_id,url,metadata,temporal_period,resolution_status,root_cause_category,tag_reasoning
github_issue,gh_issue_816,2025-05-31T09:14:06Z,"Community you want to continue development?\n\nDoes the community want to continue the development of this project as a fork?

I would be highly interested in doing so because I believe this is really convenient to develop Microservices using this framework.\n\n--- Comments ---\nConsidering the reasons highlighted by the creators, I wouldn't bet on this for the long-run.
I had this project under the radar to see where it was going. The promise was good but considering that it was backed up by Google it's already a red-flag nowadays.

In any case, it's a completely different stack, and has the potential to suffer the same problems as this one, considering that Microsoft's side-projects are steadily becoming as unreliable as Google's, but Net Aspire might be something you could look at.

As it mostly relies on common tooling, and less opinionated, it should be easier to migrate when they stop supporting it.

[Aspire Overview](https://learn.microsoft.com/en-us/dotnet/aspire/get-started/aspire-overview)
[Aspire Github](https://github.com/dotnet/aspire)
",8449aa7d4100d043,https://github.com/ServiceWeaver/weaver/issues/816,"{'number': 816, 'state': 'open', 'labels': [], 'created_at': '2025-05-31T09:14:06Z', 'closed_at': None, 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/816/reactions', 'total_count': 2, '+1': 2, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",post_discontinuation,unknown,unclear,"Temporal: post_discontinuation based on 2025-05-31. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_815,2025-05-19T13:58:44Z,"Compatible with latest Go version\n\nWe need to ensure it works with the latest version of Golang. Can we get some guidance so I can open this final PR before archiving the project?\n\n--- Comments ---\nI have optimized a version that supports the latest version of Go

https://github.com/sagoo-cloud/weaver",f9861ccf310dcee8,https://github.com/ServiceWeaver/weaver/issues/815,"{'number': 815, 'state': 'open', 'labels': [], 'created_at': '2025-05-19T13:58:44Z', 'closed_at': None, 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/815/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",post_discontinuation,unknown,unclear,"Temporal: post_discontinuation based on 2025-05-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_814,2025-04-24T07:08:06Z,Will this project continue to evolve?\n\nIt seems that there haven't been any updates for several months. It appears to be in an inactive state. Will this project continue to evolve?,9c509ebae5db9ef5,https://github.com/ServiceWeaver/weaver/issues/814,"{'number': 814, 'state': 'open', 'labels': [], 'created_at': '2025-04-24T07:08:06Z', 'closed_at': None, 'comments_count': 0, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/814/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",post_discontinuation,unknown,unclear,"Temporal: post_discontinuation based on 2025-04-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_812,2025-04-16T21:34:51Z,"internal error: package ""slices"" without types was imported from ""github.com/myPkg/pkg/listutil""\n\n
```go
package listutil

import ""slices""

// SubtractLists subtracts the elements of the subtract list in the source list.
//
// Parameters:
// - sourceList: The list from which the elements will be subtracted.
// - subtractList: The list that will be subtracted from the source list.
//
// Returns:
// - A new list that contains the elements of the source list minus the elements of the subtract list.
//
// Explanation:
//
// It takes two slices of strings as input: source and subtract.
// The function iterates over the source list and removes any elements that are present in the subtract list.
// The resulting list will contain only the elements from the source list that are not present in the subtract list.
// The function does not modify the original source list and target list, it returns a new list as the result.
//
// Example:
// If the source list parameter is {""A"",""B"",""C"",""D""} and the subtract list parameter is {""A"",""B""},
// then the result of this method will be {""C"",""D""} since the elements ""A"" and ""B"" have been removed from the source list.
func SubtractLists[T comparable](sourceList, subtractList []T) (out []T) {
	if len(sourceList) == 0 {
		return out
	}
	if len(subtractList) == 0 {
		return sourceList
	}
	out = make([]T, 0, len(subtractList))
	for _, item := range sourceList {
		if !slices.Contains(subtractList, item) {
			out = append(out, item)
		}
	}
	return out
}

```

Anyone help me?\n\n--- Comments ---\nI had to downgrade to Go version 1.22, but I still haven’t figured out exactly why.",f9861ccf310dcee8,https://github.com/ServiceWeaver/weaver/issues/812,"{'number': 812, 'state': 'closed', 'labels': [], 'created_at': '2025-04-16T21:34:51Z', 'closed_at': '2025-04-17T02:39:25Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/812/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",post_discontinuation,acknowledged_not_fixed,unclear,"Temporal: post_discontinuation based on 2025-04-16. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_807,2025-01-13T19:39:23Z,Simple example repository\n\n,f586af89ea3c5936,https://github.com/ServiceWeaver/weaver/issues/807,"{'number': 807, 'state': 'closed', 'labels': [], 'created_at': '2025-01-13T19:39:23Z', 'closed_at': '2025-01-13T19:40:20Z', 'comments_count': 0, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/807/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",post_discontinuation,acknowledged_not_fixed,unclear,"Temporal: post_discontinuation based on 2025-01-13. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_802,2024-10-26T14:49:10Z,"update website docs file\n\nThere are some mistakes which I am going to fix and merge from my repository.\n\n--- Comments ---\nI am updating [here](https://github.com/smhmayboudi/weaver/tree/802-docs-update-website-docs-file). after checking all, I will submit a merge request.",0c5ce255d4811f12,https://github.com/ServiceWeaver/weaver/issues/802,"{'number': 802, 'state': 'open', 'labels': [], 'created_at': '2024-10-26T14:49:10Z', 'closed_at': None, 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/802/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-10-26. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_800,2024-10-17T02:29:38Z,"Is it still in active development?\n\nThanks for this meaningful project. 
Our team resonates with the theories it presents, and we are planning to develop our new product based on this framework. 
However, after some research, we noticed that the recent activity in issue tracking, PRs, Google Groups, and Discord seems quite low. 
Could you please let us know if this project is still actively being developed? What is the roadmap moving forward?
Thank you.

BTW, I’ve seen others raise similar questions on Discord as well.


**For who care about** : [Important Announcement](https://github.com/ServiceWeaver/weaver?tab=readme-ov-file#-important-announcement)\n\n--- Comments ---\n+1\n> However, after some research, we noticed that the recent activity in issue tracking, PRs, Google Groups, and Discord seems quite low.

+1
The development work of Service Weaver seems to be temporarily suspended. Is it due to technical bottlenecks, insufficient resources or other reasons?\n+1
We are also planning to use service weaver for a new project.\n+1\n+1\n+1
\n+1\n+1\n> 
> 
>     Service Weaver began as an exploratory initiative to understand the challenges of developing, deploying, and maintaining distributed applications. We were excited by the strong interest from the developer community, which led us to open-source the project.
> 
>     We greatly appreciate the continued advocacy and support of the Service Weaver community. However, we realized that it was hard for users to adopt Service Weaver directly since it required rewriting large parts of existing applications. Therefore, Service Weaver did not see much direct use, and effective December 5, 2024, we will transition Service Weaver into maintenance mode. After this date, for the next 6 months, we will only push critical commits to the GitHub repository, respond to critical issues, merge critical pull requests, and patch new releases. We recommend that users fork the repository and report any issues preventing them from maintaining a stable version of the code.
> 
>     On June 6, 2025, we plan to permanently freeze and archive the GitHub repository, after which no new commits or releases will be made.
\nIt's a great pity that we have already begun utilizing this framework in production environments. I've always believed this to be a remarkable idea, yet its limited usage can likely be attributed to insufficient promotion. Many are unaware of its existence, which explains the low adoption rate. Nevertheless, this framework truly deserves recognition, and I genuinely hope it can sustain its growth.\n> It's a great pity that we have already begun utilizing this framework in production environments. I've always believed this to be a remarkable idea, yet its limited usage can likely be attributed to insufficient promotion. Many are unaware of its existence, which explains the low adoption rate. Nevertheless, this framework truly deserves recognition, and I genuinely hope it can sustain its growth.

@xinjiayu  I am also attracted by the concept of this framework, but because the official version has not been released, I dare not use it in the production environment. I want to know if its experience in development, deployment, operation and maintenance is better than the traditional micro service framework in the past?\noh my god!  Our new project is being developed using service weaver and ready to go live\nI don't understand why archive the central gathering place for the project rather than just let it be, awaiting someone to take over maintainership. Plenty of folks in this thread apparently ready to go to production, which means it must work well enough to be left alone. What is being avoided by archiving, besides the easiest path continued growth?\n+1",a4be5a1c669fbd1b,https://github.com/ServiceWeaver/weaver/issues/800,"{'number': 800, 'state': 'open', 'labels': [], 'created_at': '2024-10-17T02:29:38Z', 'closed_at': None, 'comments_count': 14, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/800/reactions', 'total_count': 7, '+1': 2, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 5}, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-10-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_799,2024-09-18T07:21:01Z,"Multiple parts of the framework use **signal.Notify** method to listen for program shutdown signal\n\n![image](https://github.com/user-attachments/assets/e1f7d1c0-ca73-4818-aba0-b79385623a4e)
Multiple parts of the framework use **signal.Notify** method is used to listen for program shutdown signals, resulting in the inability to properly direct all struct Shutdown methods before each program shutdown Have you considered planning to fix this bug\n\n--- Comments ---\nCan you provide a concrete example why this might be a problem? I'm not sure I fully understand your question.",1fd05dba6db9fcf3,https://github.com/ServiceWeaver/weaver/issues/799,"{'number': 799, 'state': 'open', 'labels': [], 'created_at': '2024-09-18T07:21:01Z', 'closed_at': None, 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/799/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-09-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_797,2024-09-06T06:48:40Z,"Improve Hash Algorithm (Sha256 -> xxH3)\n\nHello, I'm deeply interested in ServiceWeaver project. And I want to contribute this project.

I saw todo at /weaver/runtime/codegen/hash.go 
	// TODO: improve performance:
	// - do not accumulate everything; hash as we go
	// - use a non-cryptographically safe hasher

 To Improve hash performance, xxH3 Hash would be perfect for this case. 
xxHash is an extremely fast non-cryptographic hash algorithm, working at RAM speed limit.

More detail on https://xxhash.com/



My machine is Macbook Pro, 13-inch, M1, 2020

These are the benchmark results, and just in case, I also included golang/x/crypto/blake2b for comparison.

And I used [this](https://github.com/zeebo/xxh3) as the Golang implementation of xxh3.



Benchmark code used in `/weaver/runtime/metrics_test.go`

**SHA256(default)**

```bash
Running tool: /opt/homebrew/bin/go test -benchmem -run=^$ -bench ^BenchmarkHashKey$ github.com/ServiceWeaver/weaver/runtime/metrics

goos: darwin
goarch: arm64
pkg: github.com/ServiceWeaver/weaver/runtime/metrics
BenchmarkHashKey/5-8 	 9733741	       102.8 ns/op	      64 B/op	       2 allocs/op
BenchmarkHashKey/10-8         	 7736014	       153.7 ns/op	      64 B/op	       2 allocs/op
BenchmarkHashKey/50-8         	 2052057	       582.2 ns/op	      64 B/op	       2 allocs/op
BenchmarkHashKey/100-8        	 1000000	      1147 ns/op	      64 B/op	       2 allocs/op
BenchmarkHashKey/500-8        	  223100	      5460 ns/op	      64 B/op	       2 allocs/op
BenchmarkHashKey/1000-8       	  110775	     10870 ns/op	      64 B/op	       2 allocs/op
BenchmarkHashKey/10000000-8   	       7	 157530821 ns/op	45715227 B/op	 1428573 allocs/op
PASS
ok  	github.com/ServiceWeaver/weaver/runtime/metrics	13.222s
```

**blake2b**

```
Running tool: /opt/homebrew/bin/go test -benchmem -run=^$ -bench ^BenchmarkBlake2b$ github.com/ServiceWeaver/weaver/runtime/metrics

goos: darwin
goarch: arm64
pkg: github.com/ServiceWeaver/weaver/runtime/metrics
BenchmarkBlake2b/5-8 	 2120672	       537.5 ns/op	     528 B/op	       8 allocs/op
BenchmarkBlake2b/10-8         	 1916490	       648.1 ns/op	     608 B/op	      13 allocs/op
BenchmarkBlake2b/50-8         	  640090	      1866 ns/op	    1248 B/op	      53 allocs/op
BenchmarkBlake2b/100-8        	  348745	      3454 ns/op	    2048 B/op	     103 allocs/op
BenchmarkBlake2b/500-8        	   74431	     16328 ns/op	    8448 B/op	     503 allocs/op
BenchmarkBlake2b/1000-8       	   36464	     32335 ns/op	   16449 B/op	    1003 allocs/op
BenchmarkBlake2b/10000000-8   	       2	 510650208 ns/op	320003524 B/op	15000004 allocs/op
PASS
ok  	github.com/ServiceWeaver/weaver/runtime/metrics	11.214s
```


**xxH3**

```
Running tool: /opt/homebrew/bin/go test -benchmem -run=^$ -bench ^BenchmarkXXH3$ github.com/ServiceWeaver/weaver/runtime/metrics

goos: darwin
goarch: arm64
pkg: github.com/ServiceWeaver/weaver/runtime/metrics
BenchmarkXXH3/5-8 	14546533	        82.65 ns/op	      16 B/op	       2 allocs/op
BenchmarkXXH3/10-8         	10876324	       109.6 ns/op	      16 B/op	       2 allocs/op
BenchmarkXXH3/50-8         	 3566926	       335.7 ns/op	      16 B/op	       2 allocs/op
BenchmarkXXH3/100-8        	 1996154	       601.3 ns/op	      16 B/op	       2 allocs/op
BenchmarkXXH3/500-8        	  417482	      2777 ns/op	      16 B/op	       2 allocs/op
BenchmarkXXH3/1000-8       	  215475	      5663 ns/op	      16 B/op	       2 allocs/op
BenchmarkXXH3/10000000-8   	      12	  95684476 ns/op	26667194 B/op	  833335 allocs/op
PASS
ok  	github.com/ServiceWeaver/weaver/runtime/metrics	14.971s
```


---

The result was xxh3 was faster than sha256 about 20~50%. 

Considering that the SHA256 implementation is available on the ARM64 architecture, this is excellent, and I suggest considering replacing it with xxH3.

If an agreement is reached on making the change, I will proceed with submitting a pull request.\n\n--- Comments ---\nThis is very interesting, but we're mostly focused on critical issues right now. ",f08bcfed5e95ff71,https://github.com/ServiceWeaver/weaver/issues/797,"{'number': 797, 'state': 'closed', 'labels': [], 'created_at': '2024-09-06T06:48:40Z', 'closed_at': '2024-11-05T23:30:05Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/797/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",decline,acknowledged_not_fixed,unclear,"Temporal: decline based on 2024-09-06. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_793,2024-08-20T23:50:38Z,"multi dashboard doesn't show traffic?\n\nHello! I tried to run the tutorial following https://serviceweaver.dev/docs.html#step-by-step-tutorial. In the `Multiprocess Execution` section the dashboard produced by `weaver multi dashboard` doesn't show any traffic, whereas the previous single process deployment has a nice dashboard with traffic between components visualized:

![image](https://github.com/user-attachments/assets/dd64ea3a-a23b-48fc-a511-ba088d7fb3cc)\n\n--- Comments ---\n@bowenni thanks for reporting this. Fixed in #794 ",628d4979d563964b,https://github.com/ServiceWeaver/weaver/issues/793,"{'number': 793, 'state': 'closed', 'labels': [], 'created_at': '2024-08-20T23:50:38Z', 'closed_at': '2024-08-23T18:12:45Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/793/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",decline,acknowledged_not_fixed,unclear,"Temporal: decline based on 2024-08-20. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_792,2024-08-16T19:57:15Z,"Multi deployer support for gRPC and raw TCP traffic\n\nIn the current implementation of the multi-deployer, we have an HTTP proxy that receives the requests handled by the listener. Whenever a request is received, it is forwarded by the HTTP proxy to one of the `main` backends.

However, if users send gRPC or raw TCP requests to the listener, the HTTP proxy will reject them due to malformed messages. We should enhance our `multi` deployer to make the proxy capable of handling not only HTTP traffic. \n\n--- Comments ---\nGood!
Me really looking forward!\n@rgrandl , what is the progress so far?\nThis work has been deprioritized, and we are currently focused primarily on addressing any critical issues.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/issues/792,"{'number': 792, 'state': 'closed', 'labels': [], 'created_at': '2024-08-16T19:57:15Z', 'closed_at': '2024-11-05T23:33:59Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/792/reactions', 'total_count': 3, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 3, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",decline,acknowledged_not_fixed,unclear,"Temporal: decline based on 2024-08-16. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_791,2024-08-08T09:22:43Z,"Docs about AuthZ and AuthN\n\nI am missing docs about AuthZ and AuthN (and encryption).

How do the services authenticate? Could an evil user in the same Kubernetes cluster call methods?\n\n--- Comments ---\nThis work has been deprioritized for now",9c9ad19283a64bbd,https://github.com/ServiceWeaver/weaver/issues/791,"{'number': 791, 'state': 'closed', 'labels': [], 'created_at': '2024-08-08T09:22:43Z', 'closed_at': '2024-11-05T23:28:39Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/791/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",decline,acknowledged_not_fixed,unclear,"Temporal: decline based on 2024-08-08. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_790,2024-08-07T03:45:32Z,"Is the project still alive? \n\nIs the project still alive? Is the idea and direction of the project right?
Why didn't anyone answer questions for so long? Are contributors too busy?\n\n--- Comments ---\nHey @wind-c. Feel free to describe in more details what you're trying to do.

Otherwise, feel free to ping me on discord and we can discuss in details your issues. We usually do that with people who're trying to adopt weaver and face various issues.

",9c509ebae5db9ef5,https://github.com/ServiceWeaver/weaver/issues/790,"{'number': 790, 'state': 'closed', 'labels': [], 'created_at': '2024-08-07T03:45:32Z', 'closed_at': '2024-08-07T19:55:26Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/790/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",decline,acknowledged_not_fixed,unclear,"Temporal: decline based on 2024-08-07. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_788,2024-08-01T02:00:13Z,"How do I identify which replica a client tcp connection is on, and how do I route messages with rpc to that replica？\n\nI wrote the tcp server example and the single-process mode is fine. The new question is, in the multi-process, multi-machine, or multi-replica deployment, how do you find out which replica a given client tcp connection is on? How do you route messages to this tcp connection?

Http is used for request-response services, but for push, notification, chat, pub-sub and other types of services are based on tcp connections, and messages must be routed to the specified client tcp connection.\n\n--- Comments ---\nI looked at the Weaver project source code and found no relevant object and API exposure. If so, Weaver is only suitable for HTTP-based applications.
\n@wind-c, you can interact with a Service Weaver application based on whatever you can export a listener. Our examples expose a http server, but you can use something else too (e.g., a grpc server). 

Now, for communication between different components we use RPCs on top of TCP. The weaver runtime is responsible to start components, and component replicas and propagate their addresses to all the other components that want to talk to. 

What exactly are you trying to do? \nMaybe I don't understand weaver's architecture. So there's this doubt.
I have written a tcp server example, the code file is attached.
[client.txt](https://github.com/user-attachments/files/16540597/client.txt)
[main.txt](https://github.com/user-attachments/files/16540600/main.txt)
[weaver.txt](https://github.com/user-attachments/files/16540602/weaver.txt)

______________________________________________________________________________________________________
**The single process deployment worked fine**:
 D:\GolandProjects\ServiceWeaver> weaver single deploy weaver.toml
╭───────────────────────────────────────────────────╮
│ app        : hello.exe                            │
│ deployment : a1becea0-ac30-48f5-98a8-34861380a8c3 │
╰───────────────────────────────────────────────────╯
hello listener available on 127.0.0.1:8080
app deployment_id:  e19d61b9-2b19-4b9e-9bfa-6ecc3376b2cf
wait for the client to connect ...
hello listener available on 127.0.0.1:8080
reverse deployment_id:  e19d61b9-2b19-4b9e-9bfa-6ecc3376b2cf
Hello, 44605:1.0.0.721!
wait for the client to connect ...
127.0.0.1:50644 client is connected！
server received the data： hello

D:\GolandProjects\ServiceWeaver> .\client.exe
hello
client received data： HELLO
______________________________________________________________________________________________________

**The multi-process deployment is abnorma**l:

D:\GolandProjects\ServiceWeaver> weaver multi deploy weaver.toml
╭───────────────────────────────────────────────────╮
│ app        : hello.exe                            │
│ deployment : 293b392b-d73d-445e-9183-b8bb971d438e │
╰───────────────────────────────────────────────────╯
S0101 08:00:00.000000 stdout               457a567f                      │ hello listener available on 127.0.0.1:8080
S0101 08:00:00.000000 stdout               91d737a8                      │ hello listener available on 127.0.0.1:8080
S0101 08:00:00.000000 stdout               457a567f                      │ app deployment_id:  293b392b-d73d-445e-9183-b8bb971d438e
S0101 08:00:00.000000 stdout               457a567f                      │ wait for the client to connect ...
S0101 08:00:00.000000 stdout               91d737a8                      │ app deployment_id:  293b392b-d73d-445e-9183-b8bb971d438e
S0101 08:00:00.000000 stdout               91d737a8                      │ wait for the client to connect ...

D:\GolandProjects\ServiceWeaver> .\client.exe
hello
client received data： HTTP/1.1 400 Bad Request
Content-Type: text/plain; charset=utf-8
Connection: close

400 Bad Request
server is down and the client is also down.
______________________________________________________________________________________________________


\nGot it. 

The problem is the way you're trying to send requests from the client to the server using raw TCP in case of the multi deployer. Our multi deployer implementation uses a HTTP proxy to export the `hello` listener, and under the hood the HTTP proxy will send the client request to one of the server replicas. Server replicas accept traffic using TCP, however, because the HTTP proxy speaks HTTP, when you send a raw TCP message the HTTP proxy gets confused and returns a BAD Request. I believe that we're using a HTTP proxy in case of the SSH deployer as well.

However, Service Weaver DOES NOT make any assumptions about the kind of traffic you can send as long as it's TCP traffic. For example, if you try your example with the Kube deployer, it will work just fine. Same for the GKE deployer.

So:
1) Service Weaver framework should handle any kind of traffic as long as it's TCP based
2) the fact that multi doesn't work for your example, is because the way we implemented the multi deployer. However, you can modify the multi deployer to have a proxy that accepts raw TCP requests (or implement your own); I will look at this thing as well, but it's not a high priority right now.
3) It's on my list to provide examples on how to do raw TCP and grpc traffic and hopefully will get to that soon (that might also be an opportunity to enhance the multi deployer to support raw TCP requests)
4) you can use the Kube deployer to run it locally in multiple processes for now. Otherwise you can tweak multi for  your usecase

Is this something that blocks you to deploy weaver in production or just playing around on your local machine?\nI see.
I still hope that you can support the compatibility of the original TCP in various deployment modes, because you are more professional. Although Kube and GKE are commonly used, they are not suitable for all deployment scenarios.

Another question:
Check deployment status, there is one  replica of Main, Adder, and Reverser, and one Listener. The Listener loads requests to the Main component?
How do you control the number of replica per component?\nWill do. However, it's not a priority short term, because the multi deployer is intended to be used mostly for testing on the local machine. However, if this blocks you from adopting Service Weaver in production, please let us know. 

Listeners are intended to be the way you interact with a Service Weaver application. In your example, the main component exports a listener that receives requests. 

Number of replicas per component - the deployer computes the number of replicas. In case of multi, each component is replicated twice. The GKE/Kubernetes deployers rely on Kubernetes autoscalers to scale up/scale down then number of replicas based on load (a combination of cpu and memory usage on each pod). \n@rgrandl ，thank you very much for your reply.
I really appreciate the architecture and the idea of ServiceWeaver.
I'm eager to refactor my project Comqtt(https://github.com/wind-c/comqtt) using ServiceWeaver.
Comqtt is tcp-based mqtt broker, so weaver support raw tcp in a multi-process and multi-machine deployment mode will greatly speed up my refactoring and testing.\nThis work has been deprioritized for now",9c509ebae5db9ef5,https://github.com/ServiceWeaver/weaver/issues/788,"{'number': 788, 'state': 'closed', 'labels': [], 'created_at': '2024-08-01T02:00:13Z', 'closed_at': '2024-11-05T23:28:30Z', 'comments_count': 8, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/788/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",decline,acknowledged_not_fixed,unclear,"Temporal: decline based on 2024-08-01. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_787,2024-07-26T15:06:06Z,"Duplicate method executions using multi deploy\n\nSimple app with one component that is called every 2 seconds to print a string.

```go
func main() {
	if err := weaver.Run(context.Background(), serve); err != nil {
		log.Fatal(err)
	}
}

type app struct {
	weaver.Implements[weaver.Main]
	reverser weaver.Ref[Reverser]
}

func serve(ctx context.Context, app *app) error {
	ticker := time.NewTicker(2 * time.Second)
	var count int
	for _ = range ticker.C {
		count++
		err := app.reverser.Get().Reverse(ctx, fmt.Sprintf(""Hello %d"", count))
		if err != nil {
			return err
		}
	}
	return nil
}

type Reverser interface {
	Reverse(context.Context, string) error
}

type reverser struct {
	weaver.Implements[Reverser]
}

func (r *reverser) Reverse(ctx context.Context, s string) error {
	slog.Info(""calling Reverse()"", ""input"", s)
	return nil
}
```

Build and run:
```
go build . && weaver multi deploy weaver.toml
```

Log output shows that `Reverse()` is being executed twice for every call:

```
╭───────────────────────────────────────────────────╮
│ app        : weaver                              │
│ deployment : e139de3e-02a3-419f-ad8b-93898f7ac502 │
╰───────────────────────────────────────────────────╯
S1231 19:00:00.000000 stderr               84bda531                      │ 2024/07/26 11:02:34 INFO calling Reverse() input=""Hello 1""
S1231 19:00:00.000000 stderr               84bda531                      │ 2024/07/26 11:02:34 INFO calling Reverse() input=""Hello 1""
S1231 19:00:00.000000 stderr               321d7ce6                      │ 2024/07/26 11:02:36 INFO calling Reverse() input=""Hello 2""
S1231 19:00:00.000000 stderr               321d7ce6                      │ 2024/07/26 11:02:36 INFO calling Reverse() input=""Hello 2""
S1231 19:00:00.000000 stderr               84bda531                      │ 2024/07/26 11:02:38 INFO calling Reverse() input=""Hello 3""
S1231 19:00:00.000000 stderr               84bda531                      │ 2024/07/26 11:02:38 INFO calling Reverse() input=""Hello 3""
```

There's 2 instances of each component but they shouldn't both be called. Why is this? How do you avoid that?\n\n--- Comments ---\nMistake on my part. I simply didn't realize that serve() is what's being invoked twice since there's a replica of main, but it makes total sense...",37054dd5c8f20d87,https://github.com/ServiceWeaver/weaver/issues/787,"{'number': 787, 'state': 'closed', 'labels': [], 'created_at': '2024-07-26T15:06:06Z', 'closed_at': '2024-07-26T23:16:07Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/787/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",decline,acknowledged_not_fixed,unclear,"Temporal: decline based on 2024-07-26. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_786,2024-07-23T11:06:40Z,"weaver generate doesn't support go build tags\n\nHi,

I am trying to compile my project: [test.zip](https://github.com/user-attachments/files/16347608/test.zip)

There are 2 files:
- good.go with a build tag `good` that can be normally compiled when `-tags good` provided to `go run` command
- bad.go with a build tag `!good` than contains a lot of syntax errors or other errors/circumstances that makes compilation impossible at the moment

So, when I'm trying to call `go generate ./...` or `weaver generate ./...` I'm getting a compilation error due to errors in bad.go.

What I want to get is a support of go build tags for `weaver generate` in order to make it ignore bad file and use good one.\n\n--- Comments ---\nHi, any updates?\n@Gris87, is this a blocker for you? I will bring up this issue tomorrow in our group meeting. \nIt's not so critical, just want to know the status\n@Gris87, you are right; the `weaver generate` command ignores user-defined tags. Would simply adding a --tags option to `weaver generate`, with the same syntax as in the case of `go build`, suffice? \nYes, that will be enough\nSounds good. I'll work on a PR to add this support. \nImplemented in #796 \ngo build tags is supported in the latest weaver version (v0.24.5) ",461195d797ab0bc6,https://github.com/ServiceWeaver/weaver/issues/786,"{'number': 786, 'state': 'closed', 'labels': [], 'created_at': '2024-07-23T11:06:40Z', 'closed_at': '2024-09-10T21:03:58Z', 'comments_count': 8, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/786/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",decline,acknowledged_not_fixed,unclear,"Temporal: decline based on 2024-07-23. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_785,2024-07-22T08:34:38Z,"Is Service Weaver suitable for writing tcp server？\n\nI've only seen examples of http.\n\n--- Comments ---\n@wind-c it should. E.g., you can run a gRPC server to export the listener instead of a HTTP server. We're working on adding an example to our website.\n@mwhittaker @rgrandl 
I wrote the tcp server example and the single-process mode is fine. The new question is, in the multi-process, multi-machine, or multi-replica deployment, how do you find out which replica a given client tcp connection is on? How do you route messages to this tcp connection?

Http is used for request-response services, but for push, notification, chat, pub-sub and other types of services are based on tcp connections, and messages must be routed to the specified client tcp connection.\nThe response to the Issue was too slow, and the long wait was too painful.\nI already answered to this question in the other PR. Can you elaborate on what exactly you're trying to do?

Slowness - we've been a little bit overwhelmed with other things, sorry about that. Open source is just one way we contribute to the project.",9c509ebae5db9ef5,https://github.com/ServiceWeaver/weaver/issues/785,"{'number': 785, 'state': 'closed', 'labels': [], 'created_at': '2024-07-22T08:34:38Z', 'closed_at': '2024-08-08T00:20:16Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/785/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",decline,acknowledged_not_fixed,unclear,"Temporal: decline based on 2024-07-22. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_784,2024-07-21T15:29:21Z,"How to initializes the components in source code\n\nI want to study the source code of Weaver. When using `weaver multi deploy`, it calls the function `startMain` to initialize the components.
```golang
func (d *deployer) startMain() error {
	return d.activateComponent(&protos.ActivateComponentRequest{
		Component: runtime.Main,
	})
}
```




However, I couldn't find the code that actually initializes the components, something like this:
 ```golang
for _,v:=range d.groups{
    d.ActivateComponent()
}
```

I would like to know where the code that initializes the components is called.\n\n--- Comments ---\nThe main component is usually started by the deployer. However,the activations of all the other components are done by the [weavelets](https://github.com/ServiceWeaver/weaver/blob/main/internal/weaver/remoteweavelet.go#L370). 

E.g.,

```go
// Implementation of the main component. Has references to `Component1` and `Component2`.
type main struct {
  weaver.Implements[weaver.Main]
  c1 weaver.Ref[Component1]
  c2 weaver.Ref[Component2]

...

// Implementation of the `Component1`. Has references to `Component1` and `Component2`.
type component1Impl struct {
  weaver.Implements[Component1]
  c3 weaver.Ref[Component3]
}

```

The callgraph is as follows:
```
main ---> Component 1 ---> Component 3
        |
        ---> Component2
```

The `multi` deployer will start component `main` which under the hood will run 2 weavelets that will run `main`. When a `main` weavelet starts, it will activate components that he has references to; in this case `main` will activate component `Component1` and `Component2`.

Once weavelets for `Component1` are started, the weavelets for `Component1` will activate `Component3`.

Other deployers work in a similar way.

\nFeel free to reopen if you have more questions.",d3b11908f38f94be,https://github.com/ServiceWeaver/weaver/issues/784,"{'number': 784, 'state': 'closed', 'labels': [], 'created_at': '2024-07-21T15:29:21Z', 'closed_at': '2024-07-23T18:00:19Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/784/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",decline,acknowledged_not_fixed,unclear,"Temporal: decline based on 2024-07-21. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_779,2024-07-08T12:19:48Z,"Duplicate Method Executions in weavertest.RPC Mode\n\nWhen using weavertest.RPC for testing, I've observed that multiple instances of the same component are started, which is expected. However, when I call a method, each component instance seems to execute the method. Is this behavior correct?

For example, I have the following database table:

```sql
CREATE TABLE user_info (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL
);
```
Using weaver to implement a Create method:
```go
type user interface {
    Create(ctx context.Context, username, password string) error
}

type User struct {
    weaver.Implements[user]
    queries *user_db.Queries
}

func (u *User) Init(ctx context.Context) error {
    dsn := ""postgres://postgres:qweasd@127.0.0.1:5432/postgres?sslmode=disable""
    conn, err := pgxpool.New(ctx, dsn)
    if err != nil {
        u.Logger(ctx).Error(""failed to connect to database"", ""err"", err)
        return err
    }
    u.queries = user_db.New(conn)
    return nil
}

func (u *User) Create(ctx context.Context, username, password string) error {
    u.Logger(ctx).Info(""create user"", ""username"", username, ""password"", password)

    if err := u.queries.CreateUser(ctx, user_db.CreateUserParams{
        Username: username,
        Password: password,
    }); err != nil {
        u.Logger(ctx).Error(""failed to create user"", ""err"", err)
        return err
    }

    return nil
}

```
Here is the test code:
```go
func TestCreateUser(t *testing.T) {
    for idx, runner := range weavertest.AllRunners() {
        runner.Test(t, func(t *testing.T, user user) {
            username := fmt.Sprintf(""user_%d"", idx)
            password := ""test_password""

            err := user.Create(context.Background(), username, password)
            assert.NoError(t, err)
        })
    }
}
```
When the runner is weavertest.Local or weavertest.Multi, there are no issues. However, in weavertest.RPC mode, the Create function is called four times as shown in the logs:

![35e5db2146630a9f435e02b37181e8e](https://github.com/ServiceWeaver/weaver/assets/58097859/b21b581f-c095-4598-a6f1-d3910228bcb5)

Additionally, there are two records inserted into the database under RPC mode:
![image](https://github.com/ServiceWeaver/weaver/assets/58097859/496e64b8-3cb4-4145-82d9-5137b34502f1)




\n\n--- Comments ---\nHi @meifannao, that looks wrong. Thanks for reporting it. \n@meifannao, the `weavertest.RPC` will retry your method by default. This is by design to catch cases where you want a method to not be retriable by default, but you forgot to mark your method as non-retriable. 

In this case, you should add
```
var _weaver.NotRetriable = user.Create 
...
```

when you define/implement your component. More details here: https://serviceweaver.dev/docs.html#components-semantics

I'll improve the doc a little bit to make things clearer. \n> @meifannao，`weavertest.RPC`将默认重试您的方法。这是设计用来捕获以下情况：您希望方法默认不可重试，但您忘记将方法标记为不可重试。
> 
> 在这种情况下，您应该添加
> 
> ```
> var _weaver.NotRetriable = user.Create 
> ...
> ```
> 
> 当你定义/实现你的组件时。更多详细信息请见：https://serviceweaver.dev/docs.html#components-semantics
> 
> 我会稍微改进一下文档，让内容更清晰一些。

Thank you! I have verified, and the issue has indeed been resolved.
",54caac67479333c9,https://github.com/ServiceWeaver/weaver/issues/779,"{'number': 779, 'state': 'closed', 'labels': [], 'created_at': '2024-07-08T12:19:48Z', 'closed_at': '2024-07-10T02:11:54Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/779/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",decline,acknowledged_not_fixed,unclear,"Temporal: decline based on 2024-07-08. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_774,2024-06-20T01:28:27Z,"Weaver generate process is not finished\n\n[In this tutorial](https://serviceweaver.dev/docs.html). I ran `weaver generate . `, but nothing worked after about 10~15 minutes.  Should I change the version of go or weaver?


### Version
- M1 max macbook pro
- go1.22.1 darwin/arm64
- weaver v0.24.2 darwin/arm64\n\n--- Comments ---\n**My laptop settings:**
```
Apple M1 Pro
16GB
macOS: Sonoma 14.5
```

**My versions:**
```
Weaver version: v0.24.2
Go version: v1.22.3
```

**It works on:**

**Command:**
``` 
$ time weaver generate ./...
# output: weaver generate ./...  0.81s user 0.74s system 271% cpu 0.573 total
```

I did a downgrade to test your Go version too. The result was:
```
$ time weaver generate ./...
# output: weaver generate ./...  93.43s user 18.33s system 318% cpu 35.110 total (first build)
# weaver generate ./...  0.77s user 1.07s system 345% cpu 0.532 total (last build)
```

**Important comments:**
This is normal because it is the first build of your project. The next builds will be faster.
\nThanks @renanbastos93. It works for me too.

@taitasu555 do you still have these issues?

I've tried:
* Apple M1 Pro
* macOS: Sonoma 14.5
* go1.22.4 darwin/amd64
* weaver v0.24.2 darwin/amd64
\nThank you for replying @rgrandl  @renanbastos93 

it still doesn't work on my laptop.  

```
 time weaver generate ./...

not finished and kill the process
0.01s user 0.02s system 0% cpu 1:35.66 total
```

using security software or the VPN that I installed may cause this problem.


I've also tried:
Apple M1 Pro
macOS: Sonoma 14.5
go1.22.4 darwin/amd64
weaver v0.24.2 darwin/amd64\n@taitasu555 is this still an issue?",6f621e213c95fedb,https://github.com/ServiceWeaver/weaver/issues/774,"{'number': 774, 'state': 'closed', 'labels': [], 'created_at': '2024-06-20T01:28:27Z', 'closed_at': '2024-11-05T23:28:00Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/774/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-06-20. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_773,2024-06-19T20:48:49Z,"Version mismatch with weaver-kube\n\nI'm encountering an error when attempting to deploy an application to Kubernetes:

```
weaver kube deploy config.yaml

ERROR: The binary you're trying to deploy (""bin/microservices"") was built with
github.com/ServiceWeaver/weaver module version v0.24.2 (internal version v0.24.0).
However, the 'weaver-kube' binary you're using (v0.23.2) was built with weaver
module version v0.23.2 (internal version v0.23.0). These versions are incompatible.

We recommend updating both the weaver module your application is built with and
updating the 'weaver-kube' command by running the following.

	go get github.com/ServiceWeaver/weaver@latest
	go install github.com/ServiceWeaver/weaver-kube/cmd/weaver-kube@latest

Then, re-build your code and re-run 'weaver-kube deploy'. If the problem
persists, please file an issue at https://github.com/ServiceWeaver/weaver/issues
exit status 1
make: *** [run-kube] Error 1
```
I'm using the last version of both projects, which are:

- weaver-kube: [v0.23.2](https://github.com/ServiceWeaver/weaver-kube/releases/tag/v0.23.2)
- weaver: [v0.24.2](https://github.com/ServiceWeaver/weaver/releases/tag/v0.24.2). When I use `go get github.com/ServiceWeaver/weaver@latest` this is the version that is installed\n\n--- Comments ---\nIt looks like we are forced to use the same version of Weaver on Weaver-Kube.
I based on this commit: https://github.com/ServiceWeaver/weaver-kube/pull/98/files\n@eminetto Maybe you could try downgrading the Weaver version in your go.mod and reinstalling the binary via go install. Have you tried that?\n@eminetto, can you try to install the latest version of weaver kube?  `go install github.com/ServiceWeaver/weaver-kube/cmd/weaver-kube@v0.24.3`

We updated the weaver to 0.24.2, but we forgot to create a new tag for weaver kube that points to weaver 0.24.2. Sorry about that.\nIt worked @rgrandl Thanks!",68cd484c34339527,https://github.com/ServiceWeaver/weaver/issues/773,"{'number': 773, 'state': 'closed', 'labels': [], 'created_at': '2024-06-19T20:48:49Z', 'closed_at': '2024-06-19T22:07:46Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/773/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-06-19. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_769,2024-05-31T11:20:11Z,"Run alongside gRPC (will not HTTP2)\n\nHello!

Most examples use Chi or similar for the frontend part that exposes the endpoints to the real world but I'd like to use gRPC (most specifically connect-go).

That is, especially because I want to be able to use bidi streams from the client to the main component.

But it seems that something in `weaver.Listener` is preventing me to upgrade connections to HTT2 (h2c) and I can't seem to be able to figure it out.

So far, I tried the following:

- Using `h2c.NewHandler(handler, &http2.Server{}`
- Using `http2.ConfigureServer(server, h2s)`
- Configuring `TLSConfig.NextProtos` to accept `h2`

To no avail.

The only thing that worked so far was to create my HTTP server and call `http.ListenAndServe` and it did work and gRPC was working correctly but due to the fact that it is creating two replicas, it will end up failing because it can't bind the same port twice.

My question is specifically for gRPC but I'm assuming that anybody trying to use HTTP2 in any shape or form will encounter the same issue.

Do you happen to know what would be the best way to make it work?

Thank you very much for your time!\n\n--- Comments ---\nWe're mostly focused on addressing the most critical issues right now. ",f8fefbe97648387a,https://github.com/ServiceWeaver/weaver/issues/769,"{'number': 769, 'state': 'closed', 'labels': [], 'created_at': '2024-05-31T11:20:11Z', 'closed_at': '2024-11-05T23:30:51Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/769/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-05-31. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_768,2024-05-29T18:20:37Z,"[Question] Weaver generate error in go/type.(*Checker)\n\nAnyone has had it problem?
I executed `weaver generate ./...`
Weaver version: v0.22.0 (binary/cli and go.mod)
Go version: v1.22

```panic: runtime error: invalid memory address or nil pointer dereference [recovered]
        panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0xb55c8f]

goroutine 68 [running]:
go/types.(*Checker).handleBailout(0xc0001bf200, 0xc000ad9bd0)
        /usr/local/go/src/go/types/check.go:367 +0x88
panic({0xf1e840?, 0x1987080?})
        /usr/local/go/src/runtime/panic.go:770 +0x132
go/types.(*StdSizes).Sizeof(0x0, {0x11f04c0, 0x199b920})
        /usr/local/go/src/go/types/sizes.go:228 +0x30f
go/types.(*Config).sizeof(...)
        /usr/local/go/src/go/types/sizes.go:333
go/types.representableConst.func1({0x11f04c0?, 0x199b920?})
        /usr/local/go/src/go/types/const.go:76 +0x9e
go/types.representableConst({0x11f5ab0, 0x1952280}, 0xc0001bf200, 0x199b920, 0xc000ad7fe8)
        /usr/local/go/src/go/types/const.go:92 +0x192
go/types.(*Checker).representation(0xc0001bf200, 0xc000a9c440, 0x199b920)
        /usr/local/go/src/go/types/const.go:256 +0x65
go/types.(*Checker).implicitTypeAndValue(0xc0001bf200, 0xc000a9c440, {0x11f04c0, 0x199b920})
        /usr/local/go/src/go/types/expr.go:375 +0x2d7
go/types.(*Checker).convertUntyped(0xc0001bf200, 0xc000a9c440, {0x11f04c0, 0x199b920})
        /usr/local/go/src/go/types/const.go:289 +0x3f
go/types.(*Checker).matchTypes(0xc0001bf200, 0xc000a9c400, 0xc000a9c440)
        /usr/local/go/src/go/types/expr.go:926 +0x79
go/types.(*Checker).binary(0xc0001bf200, 0xc000a9c400, {0x11f39b8, 0xc000f74270}, {0x11f39e8, 0xc000f76200}, {0x11f3ec8, 0xc000145ba0}, 0x27, 0x6054b)
        /usr/local/go/src/go/types/expr.go:800 +0x166
go/types.(*Checker).exprInternal(0xc0001bf200, 0x0, 0xc000a9c400, {0x11f39b8, 0xc000f74270}, {0x0, 0x0})
        /usr/local/go/src/go/types/expr.go:1416 +0x206
go/types.(*Checker).rawExpr(0xc0001bf200, 0x0, 0xc000a9c400, {0x11f39b8?, 0xc000f74270?}, {0x0?, 0x0?}, 0x0)
        /usr/local/go/src/go/types/expr.go:979 +0x19e
go/types.(*Checker).expr(0xc0001bf200, 0x11f0dc8?, 0xc000a9c400, {0x11f39b8?, 0xc000f74270?})
        /usr/local/go/src/go/types/expr.go:1513 +0x30
go/types.(*Checker).stmt(0xc0001bf200, 0x0, {0x11f3b68, 0xc000f76240})
        /usr/local/go/src/go/types/stmt.go:570 +0x11f2
go/types.(*Checker).stmtList(0xc0001bf200, 0x0, {0xc000aa0080?, 0x0?, 0x0?})
        /usr/local/go/src/go/types/stmt.go:121 +0x85
go/types.(*Checker).funcBody(0xc0001bf200, 0x11f0560?, {0xc000c007e0?, 0xc000c1a300?}, 0xc000a9c280, 0xc0009c4d50, {0x0?, 0x0?})
        /usr/local/go/src/go/types/stmt.go:41 +0x331
go/types.(*Checker).funcDecl.func1()
        /usr/local/go/src/go/types/decl.go:852 +0x3a
go/types.(*Checker).processDelayed(0xc0001bf200, 0x0)
        /usr/local/go/src/go/types/check.go:467 +0x162
go/types.(*Checker).checkFiles(0xc0001bf200, {0xc000f129a0, 0x1, 0x1})
        /usr/local/go/src/go/types/check.go:411 +0x1cc
go/types.(*Checker).Files(...)
        /usr/local/go/src/go/types/check.go:372
golang.org/x/tools/go/packages.(*loader).loadPackage(0xc000432000, 0xc000970150)
        /home/salvador/go/pkg/mod/golang.org/x/tools@v0.11.0/go/packages/packages.go:1055 +0xa72
golang.org/x/tools/go/packages.(*loader).loadRecursive.func1()
        /home/salvador/go/pkg/mod/golang.org/x/tools@v0.11.0/go/packages/packages.go:854 +0x1a9
sync.(*Once).doSlow(0x0?, 0x0?)
        /usr/local/go/src/sync/once.go:74 +0xc2
sync.(*Once).Do(...)
        /usr/local/go/src/sync/once.go:65
golang.org/x/tools/go/packages.(*loader).loadRecursive(0x0?, 0x0?)
        /home/salvador/go/pkg/mod/golang.org/x/tools@v0.11.0/go/packages/packages.go:842 +0x4a
golang.org/x/tools/go/packages.(*loader).refine.func2(0x0?)
        /home/salvador/go/pkg/mod/golang.org/x/tools@v0.11.0/go/packages/packages.go:777 +0x26
created by golang.org/x/tools/go/packages.(*loader).refine in goroutine 1
        /home/salvador/go/pkg/mod/golang.org/x/tools@v0.11.0/go/packages/packages.go:776 +0xccf```\n\n--- Comments ---\nI have go 1.23 and weaver 0.24.2 and it works fine.\nThis error occurs on WSL Windows with Ubuntu. This computer is from my workmate but I believe it's a corrupt Golang.",f9861ccf310dcee8,https://github.com/ServiceWeaver/weaver/issues/768,"{'number': 768, 'state': 'closed', 'labels': [], 'created_at': '2024-05-29T18:20:37Z', 'closed_at': '2024-11-05T23:23:52Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/768/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-05-29. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_765,2024-05-26T07:11:00Z,"Handling DB cleanup correctly\n\nHello!

Thanks for your good work!

I was wondering what would be the best practice to handle DB (or otherwise) cleanup.
Components offer a way to do `Init()` but there is no hook for deinitialization, therefore I don't know how best to express something like that:

```go
client, err := ent.Open(""driver"", ""host"")
// err validation
defer client.Close() // <-- this.
```

I'm thinking that perhaps before serving the app, I could create a global variable and wait for the shutdown signal in a goroutine to do this but I'd like to have your opinion on this subject, if possible!

Thanks a lot for your time!\n\n--- Comments ---\nHi dude, I believe that your pain is valid to implement a new method like Init but with Shutdown. Even though not solve for whole your pain it will rather than. Well, I don't like using global variables. I'd make methods in my app to CloseDB(), which will call when you shut down your main `Run` method. 

See below:
```go
func Serve(ctx context.Context, e *implBFF) error {
	fmt.Printf(""BFF listener available on %v\n"", e.bff.String())

	f := fiber.New()

	e.createRouter(ctx, f)

	defer func(){
		e.db.Close()
	}()

	return f.Listener(e.bff)
}
```

@rgrandl What do you think of us implementing a `Close(ctx) error` method, like `Init(ctx) error`?\nYes, I thought about that but it beats the purpose of using `Init(ctx)` in the first place if I initialize everything in `main()`, I believe :)\nSimilar to: https://github.com/ServiceWeaver/weaver/issues/275\nI created #766 to add a `Shutdown` method.\nIf you install the latest weaver version (v0.24.2) you should be able to add a `Shutdown` command to your application as mentioned in https://serviceweaver.dev/docs.html#components-interfaces.",f8fefbe97648387a,https://github.com/ServiceWeaver/weaver/issues/765,"{'number': 765, 'state': 'closed', 'labels': [], 'created_at': '2024-05-26T07:11:00Z', 'closed_at': '2024-05-30T18:23:55Z', 'comments_count': 5, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/765/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-05-26. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_763,2024-05-21T15:52:45Z,"Multi deployment: Blocks on first replica if other replica fails to start\n\nHi Maintainers,

I found this one issue and just leaving it here as a note for future developers and if someone else stumbles upon this. **Please free to close this**

When doing `waver multi deploy` , the entire deployment blocks on the first replica if second replica is on a blocking state due to any error and logs from second replica are not propagated to `stdout` , making it hard to debug since as a developer I am stuck with a blocked deployment and no logs from my failing `replicas`.

I am not sure but maybe a potential solution could be to always collect and report logs from all replicas in a polling manner ?

\n\n--- Comments ---\n@flouthoc, can you elaborate on this? You deployed an app with weaver multi. However, one of the replica is not able to start, hence nothing works?

Can you show an example app that triggers this issue?\n@rgrandl My current application is in a bit complicated state to open-source, but sure I can try creating a minimal reproducer and report back here. 

Once the issue is acknowledged as generally reproduce-able I can take a stab at fixing the issue as well.  ",f058c3156395b999,https://github.com/ServiceWeaver/weaver/issues/763,"{'number': 763, 'state': 'closed', 'labels': [], 'created_at': '2024-05-21T15:52:45Z', 'closed_at': '2024-11-05T23:23:40Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/763/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-05-21. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_756,2024-04-24T07:12:30Z,"initialize once in multi deploy mode\n\n```
type T interface {
}

type impl struct {
	weaver.Implements[T]
}

func (i *impl) Init(ctx context.Context) error {
   // setup asynq server and mux here
   // https://github.com/hibiken/asynq
   
   /*
    how can I run code here once when running with `weaver multi deploy weaver.toml`
  */

   return nil
}
```

when start with `weaver single deploy weaver.toml`, this works.
but when I run  `weaver multi deploy weaver.toml`,  there will duplicate queues with different hosts.\n\n--- Comments ---\n@dfang, you are right, with `weaver multi` deployer, we run two replicas of each component (including main). If you want to initialize something only once, you will have to rely on an external mechanism like redis or something else.",4b198e36bf0467ec,https://github.com/ServiceWeaver/weaver/issues/756,"{'number': 756, 'state': 'closed', 'labels': [], 'created_at': '2024-04-24T07:12:30Z', 'closed_at': '2024-04-25T16:27:30Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/756/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-04-24. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_751,2024-04-05T13:30:25Z,"multi deployment totally crashs after panic\n\n\n\n--- Comments ---\nHi @reza7957, the multi deployer is intended to be used for testing/debugging purposes only. By design, it does not recover after crashes, so you can debug the issue. ",06fbc0f332c00771,https://github.com/ServiceWeaver/weaver/issues/751,"{'number': 751, 'state': 'closed', 'labels': [], 'created_at': '2024-04-05T13:30:25Z', 'closed_at': '2024-04-09T22:36:30Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/751/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-04-05. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_750,2024-04-04T11:52:52Z,"context propagtion\n\nI want to propagate contextual data shuch as UserID from a service to another. It works in single deploy and using context.Context. however it does not work in multi processec deployment. do I have to use OpenTelemetry propation for this purpos? and how?
please help If you know. thanks in advance\n\n--- Comments ---\nHi @reza7957, we allow the propagation of a very few things from the context between services that run in different processes (e.g., trace spans). Our recommendation is to add a new field to your method (in your case the UserID) to propagate things between services. 

That's correct, any distributed deployer (including multi) doesn't propagate random context information. ",06fbc0f332c00771,https://github.com/ServiceWeaver/weaver/issues/750,"{'number': 750, 'state': 'closed', 'labels': [], 'created_at': '2024-04-04T11:52:52Z', 'closed_at': '2024-04-10T20:22:21Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/750/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-04-04. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_749,2024-04-03T19:53:33Z,is context.Context propagtion supported in deploy multi?\n\n\n\n--- Comments ---\nhow can I propogate contextual data from one service to another in not single deployment?\n@mwhittaker\nSee the answer in #750.,06fbc0f332c00771,https://github.com/ServiceWeaver/weaver/issues/749,"{'number': 749, 'state': 'closed', 'labels': [], 'created_at': '2024-04-03T19:53:33Z', 'closed_at': '2024-04-10T20:22:50Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/749/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-04-03. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_746,2024-03-21T22:55:39Z,"How do I call the written component in the program in a conventional way? \n\nHow do I call the written component in the program in a conventional way? That is, directly accessing the method of a component in the program. Thank you.\n\n--- Comments ---\nService Weaver components are only callable by other components in the same application. If you want another application to call your Service Weaver application, you have to create a network listener and manage that connection (e.g., HTTP, gRPC). See https://serviceweaver.dev/docs.html#step-by-step-tutorial-listeners.",5f73a402ec354e75,https://github.com/ServiceWeaver/weaver/issues/746,"{'number': 746, 'state': 'closed', 'labels': [], 'created_at': '2024-03-21T22:55:39Z', 'closed_at': '2024-04-09T22:33:35Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/746/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-03-21. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_739,2024-03-09T10:03:29Z,"The issue of errors in cross package serialization processing\n\nWhen the defined structure and the processed program are not in the same package in a program, it will affect the serialization processing. Why not use the encoding/gob package for cross package serialization processing?

\n\n--- Comments ---\nI am facing a similar issue that service-weaver's `weaver.AutoMarshal` is failing to recognize other structs in different package which are also serialized using `weaver.AutoMarshal`

My use-case is similar to this

Package 1 -> Contains a complex struct , lets call it A ( serialize using `weaver.AutoMarshal`  )
```go
type A struct {
        weaver.AutoMarshal
         fields...
  }
 ```
Package 2 -> Contains a nested struct  with a field composed of struct from `package 1` 
```go
type B {
      weaver.AutoMarshal
      field A
      fields...
  }
  ```
  
  Now `weaver generate` fails to generate bindings for my type B saying that `A` is not serializable although I already did `weaver generate` for the first type.
  
  
I am new to service weaver and types in my projects are very complex and nested and till now `weaver.AutoMarshal` is not working very well for me, any hints on above issue ? 
\n@flouthoc, what you described it should work with weaver. 

There are 2 possible scenarios why you might have issues with this:
1) You forgot to run weaver generate in all packages in the right order; best is you run `weaver generate ./...` from your root directory
2) your A or B type might have other fields that are not serializable, which is unclear from your description\n@rgrandl Thanks for the quick reply, it seems my mistake was not running `weaver generate ./..` from root directory and I was manually doing it since I had only few file so maybe that was causing unordered codegen.",5f73a402ec354e75,https://github.com/ServiceWeaver/weaver/issues/739,"{'number': 739, 'state': 'closed', 'labels': [], 'created_at': '2024-03-09T10:03:29Z', 'closed_at': '2024-05-30T16:38:14Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/739/reactions', 'total_count': 2, '+1': 2, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-03-09. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_735,2024-02-25T03:04:45Z,"Panic in generate when main contains os.Exit\n\nI'm currently following the [step by step tutorial](https://serviceweaver.dev/docs.html#step-by-step-tutorial) and I ran into an unexpected issue where `weaver generate` panics if you directly call `os.Exit` within the `main` function. Here's the [panic log](https://github.com/ServiceWeaver/weaver/files/14395086/panic.log). If this is expected behavior I apologize for the extra issue!

For example this does not panic when running `weaver generate`, as it has no `os.Exit` whatsoever.
```go
package main

import (
	""context""
	""fmt""
	""log""

	""github.com/ServiceWeaver/weaver""
)

func main() {
	err := weaver.Run(context.Background(), serve)
	if err != nil {
		log.Print(err)
	}
}

type app struct {
	weaver.Implements[weaver.Main]
}

func serve(context.Context, *app) error {
	fmt.Println(""Hello"")
	return nil
}
```

This does not panic either, even though `log.Fatal` calls `os.Exit` under the hood.
```go
package main

import (
	""context""
	""fmt""
	""log""

	""github.com/ServiceWeaver/weaver""
)

func main() {
	err := weaver.Run(context.Background(), serve)
	if err != nil {
		log.Fatal(err)
	}
}

type app struct {
	weaver.Implements[weaver.Main]
}

func serve(context.Context, *app) error {
	fmt.Println(""Hello"")
	return nil
}
```

This does panic, as it calls `os.Exit` explicitly, even though it does the same thing as the previous code block.
```go
package main

import (
	""context""
	""fmt""
	""log""
	""os""

	""github.com/ServiceWeaver/weaver""
)

func main() {
	err := weaver.Run(context.Background(), serve)
	if err != nil {
		log.Print(err)
		os.Exit(1)
	}
}

type app struct {
	weaver.Implements[weaver.Main]
}

func serve(context.Context, *app) error {
	fmt.Println(""Hello"")
	return nil
}
```

Versions
- Go 1.22.0
- Weaver 0.22.0\n\n--- Comments ---\nLooking at this again today and it appears that when using `0.23.0-beta` the previous example that panics does not panic and I'm able to build the binary and run it successfully. Going to close this!",cd74bf5de3ce1757,https://github.com/ServiceWeaver/weaver/issues/735,"{'number': 735, 'state': 'closed', 'labels': [], 'created_at': '2024-02-25T03:04:45Z', 'closed_at': '2024-02-25T17:32:02Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/735/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-02-25. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_734,2024-02-21T11:44:14Z,Best Practice for serving HTTP/S Traffic\n\nIt would be great if we get a blog post on how to serve http/s traffic with Service Weaver with best practices. I don't mean the general way of using a `weaver.Lister`. I mean how to structure it around Service Weaver Components and how to interact with them?\n\n--- Comments ---\nWe have this on our agenda. \nIt is a good Idea maybe we can to organize this idea and create a new document togethers.\nThis work has been deprioritized for now,8449aa7d4100d043,https://github.com/ServiceWeaver/weaver/issues/734,"{'number': 734, 'state': 'closed', 'labels': [], 'created_at': '2024-02-21T11:44:14Z', 'closed_at': '2024-11-05T23:22:52Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/734/reactions', 'total_count': 2, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 2}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-02-21. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_733,2024-02-20T06:27:38Z,"looking forward to update component interface \n\nWe currently have a set of microservices. On the premise of ensuring the workload of maintenance, we hope to make a version that merges services. However, we encountered a problem. The original microservices used gRPC to call each other. When migrating to weaver, Function parameter passing of COMPONENT INTERFACE only supports basic types, such as int string bool ... Is there any plan for Weaver to support custom parameter types when passing parameters in components? Very much looking forward to adding this feature! thanks.\n\n--- Comments ---\nyou mean by parameter types like 
```go
type Foo struct {
  x int
  y int
}
```
If so you can read the following in the documentation: [Marshaling](https://serviceweaver.dev/docs.html#serializable-types). 

You can embed a `weaver.AutoMarshal` in your custom struct and it can be passed as a parameter.

```go
type Foo struct {
  weaver.AutoMarshal
  x int
  y int
}
```

Don't forget to run `weaver generate` afterwards, so the custom marshalings can be generated by weaver.
\n@seiferli is this still an issue for you?",9d4b6b9ffb876245,https://github.com/ServiceWeaver/weaver/issues/733,"{'number': 733, 'state': 'closed', 'labels': [], 'created_at': '2024-02-20T06:27:38Z', 'closed_at': '2024-11-05T23:22:35Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/733/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-02-20. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_732,2024-02-18T11:47:07Z,"feat: adding a Global Config Default Configuration\n\nIn the process of using Weaver, I found that I could not set the default value of Config.
This makes it impossible to use the correct settings when you have not configured config.toml.
We hope to add a setting for the default Config value at startup.

```
type Main struct {
	weaver.Implements[weaver.Main]
	weaver.WithConfig[config.Config]
}

func (m *Main) Init(ctx context.Context) error {
	
        // config only can loads from toml?
        // fmt.Println(""config:"", m.Config())
	return nil
}

```\n\n--- Comments ---\n@godcong, can you elaborate on which settings would you like to have default values for, if you don't have them configured in `config.toml`?\nBased on this issue I believe that he wants to have the possibility to set dynamic variables globally like environment=dev, debug=true, database=root@localhost, etc

\nI think sometimes there are values that don't need to be set, but ignoring them can cause errors...
I shouldn't write all parameters in config.toml.

As @renanbastos93 said, there are some values which by default should not be empty.

The flow I would like should be:
```
Load defaults -> load configuration (override if set) -> use it.
```
Instead of:
```
Default null -> load config (null if not set) -> use it
```

Or is it possible to add a `hook` so that I can change the config when it is loaded?
",e9d13e9ac32b1833,https://github.com/ServiceWeaver/weaver/issues/732,"{'number': 732, 'state': 'closed', 'labels': [], 'created_at': '2024-02-18T11:47:07Z', 'closed_at': '2024-07-25T10:34:03Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/732/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-02-18. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_729,2024-02-16T08:00:37Z,"Is integration with Wire possible?\n\nI have a very big running prod which is using DDD, so you can consider that
I have many usecase classes and repository classes.
Currently I am using Wire made by Google to initialized all usecases and repositories (well also handlers and others) for me.
I am trying to migrate to service weaver without fixing too many codes especially I donnot want to touch the inner layers of my ddd code.
Is there a way that I can pass my usecase which is injected by wire into a weaver component class so that I can expose it to other components?
Or should I give up and change every class into a weaver component and remove wire?\n\n--- Comments ---\nHi @aasha-developer! You can definitely integrate [wire](https://github.com/google/wire/tree/main) with Service Weaver. I would say there are two things to note here.

First, Service Weaver already does something similar to wire when constructing components. You can have a very complex component dependency graph, but Service Weaver automatically instantiates all the components for you. You don't have to call a bunch of constructors.

Second, if you have some internal state of a component that you want to initialize with wire, you're free to do so! Just add an `Init` method to a component and perform the initialization in there.",87d0566eea760947,https://github.com/ServiceWeaver/weaver/issues/729,"{'number': 729, 'state': 'closed', 'labels': [], 'created_at': '2024-02-16T08:00:37Z', 'closed_at': '2024-02-16T22:05:02Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/729/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-02-16. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_721,2024-02-04T07:10:15Z,"json log handler\n\nhttps://github.com/ServiceWeaver/weaver/blob/2b260e769cc47dd4058befa4087b24e9fb170236/internal/weaver/singleweavelet.go#L334C1-L335C1

Are there any plans to provide the option to use json log in the future? Or how to use json log instead by now(v0.22.0)?\n\n--- Comments ---\nThis work has been deprioritized for now",184b34f699c56538,https://github.com/ServiceWeaver/weaver/issues/721,"{'number': 721, 'state': 'closed', 'labels': [], 'created_at': '2024-02-04T07:10:15Z', 'closed_at': '2024-11-05T23:21:34Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/721/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-02-04. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_716,2024-01-15T00:29:56Z,"metrics and tracing support for gin?\n\nI noticed  these in the docs 

```
If you pass an http.Handler to the weaver.InstrumentHandler function, it will return a new http.Handler that updates these metrics automatically, labeled with the provided label.

If you pass an http.Handler to the weaver.InstrumentHandler function, it will return a new http.Handler that traces an HTTP request every second.
```

what if I use gin or fiber? \n\n--- Comments ---\nHi @dfang! Currently, Service Weaver doesn't have any first class support for gin or fiber. 

Looking at the gin documentation, however, it looks like [a `gin.Engine` implements the `http.Handler` interface](https://pkg.go.dev/github.com/gin-gonic/gin#Engine.ServeHTTP)? So, I think you should be able to use gin with `weaver.InstrumentHandler`. And for fiber, [this adaptor](https://docs.gofiber.io/api/middleware/adaptor/) might allow you to do the same?",4b198e36bf0467ec,https://github.com/ServiceWeaver/weaver/issues/716,"{'number': 716, 'state': 'closed', 'labels': [], 'created_at': '2024-01-15T00:29:56Z', 'closed_at': '2024-01-16T17:11:43Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/716/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-01-15. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_703,2024-01-05T07:58:28Z,"Probably useless generics parameter\n\nI looked at the generic parameters of the Run function and felt that the definition of P was unnecessary. After I removed P, the code still runs normally, which makes me feel that the generic parameter here is redundant.

https://github.com/ServiceWeaver/weaver/blob/7ba5ecdd150cf9c349d3a3dc2a698a1d8d3e35a7/weaver.go#L133\n\n--- Comments ---\nHi @Duslia! This code is pretty confusing :dizzy_face:! 

Without the `PointerToMain[T]` constraint, it is possible to call `Run[T]` with a `T` that is not a main component. This should cause the code to crash at runtime, when it instantiates a `T` expecting `T` to be a main component: 

https://github.com/ServiceWeaver/weaver/blob/7ba5ecdd150cf9c349d3a3dc2a698a1d8d3e35a7/weaver.go#L177

The `PointerToMain[T]` constraint makes this error a compile time error rather than a crash at runtime. If you remove the constraint, the current code should compile and run correctly.",ee4c981478db9ec2,https://github.com/ServiceWeaver/weaver/issues/703,"{'number': 703, 'state': 'closed', 'labels': [], 'created_at': '2024-01-05T07:58:28Z', 'closed_at': '2024-01-05T08:28:44Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/703/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2024-01-05. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_697,2023-12-28T23:58:51Z,"Kube support Apple Silicon M2\n\n```
kubectl apply -f $(weaver kube deploy kube_deploy.yaml)
```

As [Service Weaver Docs](https://serviceweaver.dev/docs.html#kube) documentation deploy to local Kubernetes but got error message  

```
$ kubectl logs weaver-main-c7d548af-4de23858-6cf988775f-clw9n
NewBabysitter: create envelope: NewEnvelope: connect to weavelet: read protobuf length: EOF
-----BEGIN STDERR-----
Cannot run macOS (Mach-O) executable in Docker: Exec format error

-----END STDERR-----
exit status 126
```\n\n--- Comments ---\nThis work has been deprioritized for now",b2065af5fcdc44a5,https://github.com/ServiceWeaver/weaver/issues/697,"{'number': 697, 'state': 'closed', 'labels': [], 'created_at': '2023-12-28T23:58:51Z', 'closed_at': '2024-11-05T23:21:22Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/697/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-12-28. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_695,2023-12-21T14:33:48Z,"The parent context is not propagated to the component when deploying in ""single process"" mode\n\nThere could be situations where the component would need the parent context when is initializing. Apparently this is not possible when the application is running in the single process mode because a new context instance is provided when `Init` method of component is called:
![Screenshot 2023-12-21 163701](https://github.com/ServiceWeaver/weaver/assets/2317627/9c2ce317-33d3-4161-b305-a1d8e269abe3)
https://github.com/ServiceWeaver/weaver/blob/main/internal/weaver/singleweavelet.go#L285-L290
Is there any reason why there is not used the parent context?\n\n--- Comments ---\nI agree we should use a better context! Feel free to open a PR fixing that if you're keen, but otherwise we'll get around to fixing it :)\nOh, you already opened a PR! Awesome :)\n> Oh, you already opened a PR! Awesome :)

yes :), thanks for the review! ",32205b0053c46c59,https://github.com/ServiceWeaver/weaver/issues/695,"{'number': 695, 'state': 'closed', 'labels': [], 'created_at': '2023-12-21T14:33:48Z', 'closed_at': '2024-05-30T16:51:05Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/695/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-12-21. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_694,2023-12-20T11:42:41Z,"panic in one component caused the app to exit?\n\nI'm interested in the idea of ""locally running components"" presented by Service Weaver, and I hope it can help me build a modular monolithic service composed of many functions. In my team the application is divided into hundreds of microservices, which is difficult to maintain.
However, one advantage of microservices is that they provide physical fault isolation. For example, a panic during release will not cause a large-scale breakdown of the entire system, if the caller handles those RPC error correctly.
Since Service Weaver runs the application in multiple processes, I think of the component as an analogy to a single microservice. Problems within a component only affect itself. So I tried adding a Panicker in the Step by Step example, and then executed `weaver multi deploy`, called the Panicker. But this caused the app to exit. Did I misunderstand something here? 

code: 
```
// Panicker component.
type Panicker interface {
	Panic(context.Context, string) (string, error)
}

// Implementation of the Panicker component.
type panicker struct {
	weaver.Implements[Panicker]
}

// Panic causes panic when certain inputs are encountered
func (p *panicker) Panic(_ context.Context, s string) (string, error) {
	if s == ""panic"" {
		panic(""panicker: "" + s)
	}
	return ""all good"", nil
}
```
```
// app is the main component of the application. weaver.Run creates
// it and passes it to serve.
type app struct {
	weaver.Implements[weaver.Main]
	reverser weaver.Ref[Reverser]
	panicker weaver.Ref[Panicker]
	hello    weaver.Listener
}

func serve(ctx context.Context, app *app) error {
	// The hello listener will listen on a random port chosen by the operating
	// system. This behavior can be changed in the config file.
	fmt.Printf(""hello listener available on %v\n"", app.hello)

	// Serve the /hello endpoint.
	http.HandleFunc(""/hello"", func(w http.ResponseWriter, r *http.Request) {
		name := r.URL.Query().Get(""name"")
		if name == """" {
			name = ""World""
		}
		reversed, err := app.reverser.Get().Reverse(ctx, name)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		panicked, err := app.panicker.Get().Panic(ctx, name)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		fmt.Fprintf(w, ""Hello, %s, and %s\n"", reversed, panicked)
	})
	return http.Serve(app.hello, nil)
}
```

stderr:
```
❯ weaver multi deploy weaver.toml
╭───────────────────────────────────────────────────╮
│ app        : hello                                │
│ deployment : 157a2898-1aaf-4a62-bd90-cf532a7f89f3 │
╰───────────────────────────────────────────────────╯
S0101 08:00:00.000000 stdout               dfb270dd                      │ hello listener available on 127.0.0.1:12345
S0101 08:00:00.000000 stdout               99b2877c                      │ hello listener available on 127.0.0.1:12345
S0101 08:00:00.000000 stderr               54f72854                      │ panic: panicker panicked: panic [recovered]
S0101 08:00:00.000000 stderr               54f72854                      │        panic: panicker panicked: panic
S0101 08:00:00.000000 stderr               54f72854                      │ 
S0101 08:00:00.000000 stderr               54f72854                      │ goroutine 25 [running]:
S0101 08:00:00.000000 stderr               54f72854                      │ github.com/ServiceWeaver/weaver/runtime/codegen.CatchPanics({0xbf0660, 0xc00061a030})
S0101 08:00:00.000000 stderr               54f72854                      │        /home/sean/go/pkg/mod/github.com/!service!weaver/weaver@v0.22.0/runtime/codegen/errors.go:29 +0xee
S0101 08:00:00.000000 stderr               54f72854                      │ main.panicker_server_stub.panic.func1()
S0101 08:00:00.000000 stderr               54f72854                      │        /home/sean/code/hello/weaver_gen.go:350 +0x2c
S0101 08:00:00.000000 stderr               54f72854                      │ panic({0xbf0660?, 0xc00061a030?})
S0101 08:00:00.000000 stderr               54f72854                      │        /usr/local/go/src/runtime/panic.go:914 +0x21f
S0101 08:00:00.000000 stderr               54f72854                      │ main.(*panicker).Panic(0x0?, {0xc000612035?, 0x5?}, {0xc00060e030?, 0xc00051f9e8?})
S0101 08:00:00.000000 stderr               54f72854                      │        /home/sean/code/hello/panicker.go:22 +0x65
S0101 08:00:00.000000 stderr               54f72854                      │ main.panicker_server_stub.panic({{0x7f300d60d010?, 0xc0005a60a0?}, 0xc000538018?}, {0xe58100, 0xc000616050}, {0xc000612031?, 0xc000538018?, 0xc0005a60a0?})
S0101 08:00:00.000000 stderr               54f72854                      │        /home/sean/code/hello/weaver_gen.go:362 +0x11e
S0101 08:00:00.000000 stderr               54f72854                      │ github.com/ServiceWeaver/weaver/internal/weaver.(*RemoteWeavelet).addHandlers.func1({0xe58100, 0xc000616050}, {0xc000612031, 0x9, 0x9})
S0101 08:00:00.000000 stderr               54f72854                      │        /home/sean/go/pkg/mod/github.com/!service!weaver/weaver@v0.22.0/internal/weaver/remoteweavelet.go:597 +0xc3
S0101 08:00:00.000000 stderr               54f72854                      │ github.com/ServiceWeaver/weaver/internal/net/call.(*serverConnection).runHandler(0xc000163e60, 0xc000037620, 0x1, {0xc000612000, 0x3a, 0x3a})
S0101 08:00:00.000000 stderr               54f72854                      │        /home/sean/go/pkg/mod/github.com/!service!weaver/weaver@v0.22.0/internal/net/call/call.go:1001 +0x8f9
S0101 08:00:00.000000 stderr               54f72854                      │ github.com/ServiceWeaver/weaver/internal/net/call.(*serverConnection).readRequests(0xc000163e60, {0xe58100?, 0xc0005b9810}, 0xc000037620, 0xc000013bd8)
S0101 08:00:00.000000 stderr               54f72854                      │        /home/sean/go/pkg/mod/github.com/!service!weaver/weaver@v0.22.0/internal/net/call/call.go:921 +0x1ac
S0101 08:00:00.000000 stderr               54f72854                      │ created by github.com/ServiceWeaver/weaver/internal/net/call.(*serverState).serveConnection in goroutine 42
S0101 08:00:00.000000 stderr               54f72854                      │        /home/sean/go/pkg/mod/github.com/!service!weaver/weaver@v0.22.0/internal/net/call/call.go:281 +0x376
2023/12/20 19:40:07 http: proxy error: EOF
capture stdout: EOF
```
status:
```
❯ weaver multi status
╭────────────────────────────────────────────────────╮
│ DEPLOYMENTS                                        │
├───────┬──────────────────────────────────────┬─────┤
│ APP   │ DEPLOYMENT                           │ AGE │
├───────┼──────────────────────────────────────┼─────┤
│ hello │ 23e97041-3acf-4e68-bbe2-bb70e278d59d │ 7s  │
╰───────┴──────────────────────────────────────┴─────╯
╭────────────────────────────────────────────────────────╮
│ COMPONENTS                                             │
├───────┬────────────┬────────────────┬──────────────────┤
│ APP   │ DEPLOYMENT │ COMPONENT      │ REPLICA PIDS     │
├───────┼────────────┼────────────────┼──────────────────┤
│ hello │ 23e97041   │ weaver.Main    │ 1566909, 1566921 │
│ hello │ 23e97041   │ hello.Panicker │ 1566959, 1566973 │
│ hello │ 23e97041   │ hello.Reverser │ 1566934, 1566946 │
╰───────┴────────────┴────────────────┴──────────────────╯
╭─────────────────────────────────────────────────╮
│ LISTENERS                                       │
├───────┬────────────┬──────────┬─────────────────┤
│ APP   │ DEPLOYMENT │ LISTENER │ ADDRESS         │
├───────┼────────────┼──────────┼─────────────────┤
│ hello │ 23e97041   │ hello    │ 127.0.0.1:12345 │
╰───────┴────────────┴──────────┴─────────────────╯
```\n\n--- Comments ---\nHi @soaringk, happy to hear you're interested in Service Weaver! You're 100% right that if you deploy a Service Weaver application with `weaver multi deploy` and a component panics, the entire app is shut down. Here's the code that's responsible for that: 

https://github.com/ServiceWeaver/weaver/blob/abde5cad1004a59d716d6301b18411788ee5a721/internal/tool/multi/deployer.go#L380

I should note that this is specific to the `weaver multi` deployer. The `weaver gke` and `weaver kube` deployers restart failed components. 

Previously, the `weaver multi` deployer also restarted failed components. Later, we decided that the `weaver multi` deployer was largely for testing your application before you deploy it with a more production-ready deployer like `weaver gke` and `weaver kube`. Because of this, if something panicked when testing locally, we wanted to escalate the error instead of swallowing it. 

We're open to revisiting that decision though!\n> if something panicked when testing locally, we wanted to escalate the error instead of swallowing it

Hi @mwhittaker, thank you for your response. I agree with you, and this is especially true for Testing. However, `waver gke` and `waver kube` seem to become the only way of actually deploying application, while `weaver multi` can only be used for testing. It that true?
Would it be a good idea to add a flag to `weaver multi` command so that it can be used for both testing and deploying? Such as `weaver multi deploy --release=true`.\nHi @soaringk. That's correct, `weaver gke`, `weaver kube` and the experimental `weaver ssh` are intended for deployment into production. However, there's nothing preventing you from running `weaver kube`, `weaver ssh` or `weaver gke` on your local machine. For the latter, we have a [`weaver gke local`](https://serviceweaver.dev/docs.html#gke-local-gke) variation.

Could you provide more details about your usecase? I'm curious about how you plan to use `weaver multi` to deploy your application into production. 

As Michael mentioned, we can revisit the decisions made regarding `weaver multi`. Right now, we view `weaver multi` as a deployer that someone can use to quickly run and test on their local machine.

\nHi @rgrandl. I must have missed this `weaver gee local` variation. Thank you for your information.
I tried running the above example with this variation and I found that the app seemed to keep ""retrying"". I could see the panic log in stderr and the app was never truly shut down, but the response was never received. The `weaver gke-local status` showed that the 2 replica of the components were unhealthy. Then, the `curl` command appeared to be `hanging` until I interrupted it. Is this expected? Because calls in RPC usually just return err to the caller if something bad happens. The caller should get some response anyway.\nSpeaking of my use case, my team is responsible for product development, while deployment is managed by a separate infrastructure team. As a result, it may require some additional effort to deploy the weaver to a Kubernetes cluster, as I am not familiar with this layer.
In the beginning, I assumed that running the service weaver would be similar to deploying a single executable, while still having all the features of microservices. As a member of the product team, I can focus on writing code as usual and without worrying about the deployment process.\nIf I make the program panic with a probability of one-tenth, I would see that when the panic occurs, one instance becomes unhealthy, but I still receive the correct response, which should be from another instance.
```
❯ weaver gke-local status
╭───────────────────────────────────────────────────────────────╮
│ Deployments                                                   │
├───────┬──────────────────────────────────────┬───────┬────────┤
│ APP   │ DEPLOYMENT                           │ AGE   │ STATUS │
├───────┼──────────────────────────────────────┼───────┼────────┤
│ hello │ 26459c14-d58b-4d68-9c40-2aacaf2972ad │ 1m10s │ ACTIVE │
╰───────┴──────────────────────────────────────┴───────┴────────╯
╭───────────────────────────────────────────────────────────╮
│ COMPONENTS                                                │
├───────┬────────────┬───────────┬────────────────┬─────────┤
│ APP   │ DEPLOYMENT │ LOCATION  │ COMPONENT      │ HEALTHY │
├───────┼────────────┼───────────┼────────────────┼─────────┤
│ hello │ 26459c14   │ cn-south1 │ weaver.Main    │ 2/2     │
│ hello │ 26459c14   │ cn-south1 │ hello.Panicker │ 1/1     │
│ hello │ 26459c14   │ cn-south1 │ hello.Reverser │ 2/2     │
╰───────┴────────────┴───────────┴────────────────┴─────────╯
╭─────────────────────────────────────────────────────────────────────────────────────────╮
│ TRAFFIC                                                                                 │
├───────────┬────────────┬───────┬────────────┬───────────┬────────────┬──────────────────┤
│ HOST      │ VISIBILITY │ APP   │ DEPLOYMENT │ LOCATION  │ ADDRESS    │ TRAFFIC FRACTION │
├───────────┼────────────┼───────┼────────────┼───────────┼────────────┼──────────────────┤
│ hello.com │ public     │ hello │ 26459c14   │ cn-south1 │ [::]:45619 │ 0.5              │
│ hello.com │ public     │ hello │ 26459c14   │ cn-south1 │ [::]:41887 │ 0.5              │
╰───────────┴────────────┴───────┴────────────┴───────────┴────────────┴──────────────────╯
╭─────────────────────────────╮
│ ROLLOUT OF hello            │
├─────────────────┬───────────┤
│                 │ cn-south1 │
├─────────────────┼───────────┤
│ TIME            │ 26459c14  │
│ Dec 25 08:14:31 │ 1.00      │
╰─────────────────┴───────────╯
```",cb48832fc7db5d62,https://github.com/ServiceWeaver/weaver/issues/694,"{'number': 694, 'state': 'closed', 'labels': [], 'created_at': '2023-12-20T11:42:41Z', 'closed_at': '2024-11-05T23:21:00Z', 'comments_count': 6, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/694/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-12-20. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_683,2023-11-17T05:11:27Z,"weaverAutomarshal failure\n\n### weaverAutomarshal not Serializable?

`weaver generate .` works when generating the AutoMarshall for the struct. However when I try to generate a weaver component that returns said struct I receive the following error:

_Method `FetchAccount(context.Context, string) (models.Account, error)` of Service Weaver component ""Database"" has incorrect return types. Return 0 has type models.Account, which is not serializable. All returns, besides the final error, must be serializable.
models.Account: named structs are not serializable by default. Consider using weaver.AutoMarshal._

This is the struct I am attempting to serialize, it fits all the guidelines stated in: https://github.com/ServiceWeaver/weaver/blob/v0.22.0/weaver.go#L550
```
type Account struct {
	weaver.AutoMarshal
	ID       int
	Alias    string
	Name     string 
	Email    string 
	Password string 
	Tier     int
}
```

The confusion stems from if its not serializable, why does weaver successfully generate the codegen for this?

I have of course attempted to do all the steps provided, however the error still exists. I have also tried to tweak the weaver_gen.go files to fix it (this of course, didn't work either). Am I missing something here? Thanks !\n\n--- Comments ---\nNever mind, I was able to find a workaround. It seems that if the struct is being marshaled is in another package, it won't be considered serialized in another packages codegen.\nHi @ethanwater, yeah this is definitely a shortcoming of `weaver generate`. If package `a` imports package `b`, you have to be careful to `weaver generate` package `b` before package `a`. An easy way to always do this is to run `weaver generate ./...` at the root of your module, which will generate code for packages in the right order :)",62720a75a336c5bd,https://github.com/ServiceWeaver/weaver/issues/683,"{'number': 683, 'state': 'closed', 'labels': [], 'created_at': '2023-11-17T05:11:27Z', 'closed_at': '2023-11-17T05:23:52Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/683/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-11-17. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_681,2023-11-15T13:26:12Z,"Component's interface and implementation in separate packages\n\nHi, I wanted to implement component's interface defined in another package by creating local interface type as suggested in error message and https://github.com/ServiceWeaver/weaver/pull/282. 
Generation runs fine (weaver generate), but on go run I see the following error:
`component implementation struct main.Main has component reference field weaver.Ref[weaver-pg/contract.A], but component contract.A was not registered; maybe you forgot to run 'weaver generate'
component implementation struct main.Main has component reference field weaver.Ref[weaver-pg/contract.B], but component contract.B was not registered; maybe you forgot to run 'weaver generate'
exit status 1
`
The project structure is like this:
![image](https://github.com/ServiceWeaver/weaver/assets/20935674/7c9473ce-4a3f-4f80-aae7-0e035f499dcf)

contract.go
```go
package contract

import ""context""

type A interface {
	A(ctx context.Context) error
}

type B interface {
	B(ctx context.Context) error
}
```

a.go
```go
package a

import (
	""context""
	""github.com/ServiceWeaver/weaver""
	""weaver-pg/contract""
)

type A contract.A

type implA struct {
	weaver.Implements[A]
}

func (a *implA) A(ctx context.Context) error {
	return nil
}
```

b.go
```go
package b

import (
	""context""
	""github.com/ServiceWeaver/weaver""
	""weaver-pg/contract""
)

type B contract.B

type implB struct {
	weaver.Implements[B]
}

func (b *implB) B(ctx context.Context) error {
	return nil
}
```

main.go
```go
package main

import (
	""context""
	""fmt""
	""log""
	""github.com/ServiceWeaver/weaver""
	""weaver-pg/contract""
	_ ""weaver-pg/a""
	_ ""weaver-pg/b""
)

type Main struct {
	weaver.Implements[weaver.Main]
	a weaver.Ref[contract.A]
	b weaver.Ref[contract.B]
}

func Run(ctx context.Context, c *Main) error {
	fmt.Println(""hello"")
	return nil
}

func main() {
	if err := weaver.Run[Main, *Main](context.Background(), Run); err != nil {
		log.Fatal(err)
	}
}
```


Is the provided work around no longer working?
\n\n--- Comments ---\nThe `contract.A` and `contract.B` components are not implemented, but the `a.A` and `b.B` components are. Can you try changing your `Main` struct to the following and see if that fixes things?

```go
type Main stuct {
    weaver.Implements[weaver.Main]
    a weaver.Ref[a.A]
    b weaver.Ref[b.B]
}
```\nHi, thanks for replying!
Yes, if I weaver.Ref interfaces from implementation's package, it works. 
But what I was trying to do is to avoid directly referencing implementation's package in Ref's. 
Am I right to assume that it's not possible in the current implementation? \nAh, gotcha. Yeah, that is not currently possible.",9be6bea78c0271de,https://github.com/ServiceWeaver/weaver/issues/681,"{'number': 681, 'state': 'closed', 'labels': [], 'created_at': '2023-11-15T13:26:12Z', 'closed_at': '2023-11-16T17:06:41Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/681/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-11-15. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_678,2023-11-13T10:34:39Z,"Deploy panic because app override internal env\n\n## Problem
 In` examples/hello/weaver.toml` i added the env (same env in bootstrap runtime): 
```toml
env = [""ENVELOPE_TO_WEAVELET_FD=9"", ""WEAVELET_TO_ENVELOPE_FD=10""]
```

it panic when run:

```bash
cd  examples/hello
weaver multi deploy weaver.toml
```

I think should ignore internal env in app env for prevent user override it.
",6a363381c5596ca8,https://github.com/ServiceWeaver/weaver/issues/678,"{'number': 678, 'state': 'closed', 'labels': ['enhancement'], 'created_at': '2023-11-13T10:34:39Z', 'closed_at': '2024-11-05T23:19:27Z', 'comments_count': 0, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/678/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-11-13. Resolution: acknowledged_not_fixed (state=closed, labels=['enhancement']). Root cause: unclear (code=)"
github_issue,gh_issue_672,2023-11-05T12:46:49Z,"Any plan to support more languages?\n\nI was just wondering if this framework is only intended for Go, or is there any plan to support other languages such as Rust and JS?\n\n--- Comments ---\nHi @danilhendrasr, we don't have any short term plans to support other languages.",6e2d9e482ba2aba8,https://github.com/ServiceWeaver/weaver/issues/672,"{'number': 672, 'state': 'closed', 'labels': [], 'created_at': '2023-11-05T12:46:49Z', 'closed_at': '2023-11-06T17:13:26Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/672/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-11-05. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_670,2023-11-02T08:08:44Z,"http: proxy error: context canceled\n\nThe local environment, weaver multi deploy, inexplicably appeared: http: proxy error: context canceled, and later ok\n\n--- Comments ---\nDo you mind sharing the code and steps that led to the error?\nweaver.toml:
```
[serviceweaver]
binary = ""./iris.exe""

[single]
listeners.user = {address = ""localhost:9001""}
listeners.company = {address = ""localhost:9002""}

[multi]
listeners.user = {address = ""localhost:9001""}
listeners.company = {address = ""localhost:9002""}
```
---

main.go :
```
func main() {
	e := weaver.Run(context.Background(), gateways.Run)
	if e != nil {
		log.Fatal(e)
	}
}
```
---
```
package gateways

import (
	""context""
	""fmt""
	""github.com/ServiceWeaver/weaver""
	""iris/gateways/company""
	""iris/gateways/user""
	""os""
	""os/signal""
)

type Server struct {
	weaver.Implements[weaver.Main]
	user    weaver.Ref[user.Server]
	company weaver.Ref[company.Server]
}

func Run(ctx context.Context, server *Server) error {
	server.start(ctx)
	return nil
}

func (p *Server) start(ctx context.Context) {
	sigs := make(chan os.Signal, 1)
	done := make(chan bool)

	signal.Notify(sigs, os.Interrupt, os.Kill)

	go func() {
		go p.user.Get().Run(context.Background())
		go p.company.Get().Run(context.Background())

		<-sigs

		p.user.Get().Shutdown(context.Background())
		p.company.Get().Shutdown(context.Background())

		close(done)
	}()
	//优雅地关闭
	<-done
	fmt.Println(""closed..."")
}
```
---
```
package company

import (
	""context""
	""fmt""
	""github.com/ServiceWeaver/weaver""
	""github.com/kataras/iris/v12""
	""iris/components/reverse""
	""iris/gateways/company/sub""
	""iris/routers""
)

var (
	App  *iris.Application
	name string = ""company""
)

type Server interface {
	Run(ctx context.Context) error
	Shutdown(ctx context.Context) error
}

type server struct {
	weaver.Implements[Server]
	company weaver.Listener

	Reverser weaver.Ref[reverse.Reverser]
}

func (p *server) Init(ctx context.Context) error {
	a := routers.NewApp(name)
	App = a.Application()

	return nil
}

func (p *server) Run(ctx context.Context) error {
	v1 := App.Party(""/v1"")

	sub.User.Register(v1, p.Reverser.Get())

	e := App.Run(iris.Listener(p.company),
		iris.WithLogLevel(""debug""))
	if e != nil {
		p.Logger(ctx).Error(e.Error())
	}

	return nil
}

func (p *server) Shutdown(ctx context.Context) error {
	fmt.Println(""已关闭："", name)
	return App.Shutdown(ctx)
}
```\nThere will be occasional errors.
```
weaver multi deploy weaver.toml 
```

no problem
```
weaver single deploy weaver.toml 
```\nAh, it looks like you're running into the same problem as described in this Stack Overflow post: https://stackoverflow.com/questions/77109196/question-on-how-to-set-up-multiple-distinct-listeners-with-service-weaver. Take a look at that and see if i solves your problem?\nThis is okay.
---
weaver.toml
```
[serviceweaver]
binary = ""./iris.exe""

[single]
listeners.lisUser = {address = ""localhost:9001""}
listeners.lisCompany = {address = ""localhost:9002""}

[multi]
listeners.lisUser = {address = ""localhost:9001""}
listeners.lisCompany = {address = ""localhost:9002""}
```
gateway/server.go
```
package gateways

import (
	""context""
	""github.com/ServiceWeaver/weaver""
	""github.com/kataras/iris/v12""
	""iris/components/reverse""
	""iris/gateways/company""
	""iris/gateways/user""
	""iris/routers""
	""os""
	""os/signal""
	""syscall""
	""time""
)

var (
	companyApp = routers.NewApp(""company"")
	userApp    = routers.NewApp(""user"")
)

type Server struct {
	weaver.Implements[weaver.Main]
	lisCompany weaver.Listener
	lisUser    weaver.Listener

	Reverser weaver.Ref[reverse.Reverser]
}

func Run(ctx context.Context, server *Server) error {
	return nil
}

func (p *Server) Init(ctx context.Context) error {
	_ctx, cancel := context.WithCancel(ctx)

	sigs := make(chan os.Signal, 1)
	done := make(chan struct{})

	signal.Notify(sigs, syscall.SIGINT, syscall.SIGKILL, syscall.SIGTERM)

	go func() {
		<-sigs
		cancel()

		close(done)
	}()

	go p.serveCompany(_ctx)
	go p.serveUser(_ctx)

	//
	<-done
	return nil
}

func (p *Server) serveCompany(ctx context.Context) error {
	go func(ctx2 context.Context) {
		for {
			select {
			case <-ctx2.Done():
				timeout := 5 * time.Second
				_ctx, cancel := context.WithTimeout(context.Background(), timeout)
				defer cancel()

				companyApp.Application().Shutdown(_ctx)
			default:

			}
		}
	}(ctx)

	v1 := companyApp.Application().Party(""/v1"")
	company.Server.Register(v1, p.Reverser.Get())

	e := companyApp.Application().Run(iris.Listener(p.lisCompany),
		iris.WithLogLevel(""debug""))
	if e != nil {
		p.Logger(ctx).Error(e.Error())
	}

	return nil
}

func (p *Server) serveUser(ctx context.Context) error {
	go func(ctx2 context.Context) {
		for {
			select {
			case <-ctx2.Done():
				timeout := 5 * time.Second
				_ctx, cancel := context.WithTimeout(context.Background(), timeout)
				defer cancel()

				userApp.Application().Shutdown(_ctx)
			default:

			}
		}
	}(ctx)

	v1 := userApp.Application().Party(""/v1"")
	user.Server.Register(v1, p.Reverser.Get())

	e := userApp.Application().Run(iris.Listener(p.lisUser),
		iris.WithLogLevel(""debug""))
	if e != nil {
		p.Logger(ctx).Error(e.Error())
	}

	return nil
}
```
gateway/user/user_server.go
```
package user

import (
	""github.com/kataras/iris/v12""
)

type server struct {
}

var Server server

func (p *server) Register(party iris.Party, args ...any) {
	User.RegisterRouter(party, args...)
	Userinfo.RegisterRouter(party, args...)
}
```
gateway/user/user_gateway.go
```
package user

import (
	""context""
	""fmt""
	""github.com/kataras/iris/v12""
	""iris/components/reverse""
	""net/http""
)

type user struct {
	reverser reverse.Reverser
}

var User user

func (p *user) RegisterRouter(party iris.Party, args ...any) {
	for _, arg := range args {
		switch a := arg.(type) {
		case reverse.Reverser:
			p.reverser = a
		}
	}
	g := party.Party(""/user"")

	g.Get(""/"", p.hello)
	g.Get(""/hi"", p.hi)
}

func (p *user) hello(c iris.Context) {
	name := c.FormValue(""name"")
	if name == """" {
		name = ""World""
	}
	reversed, err := p.reverser.Reverse(context.Background(), name)
	if err != nil {
		c.StopWithError(http.StatusInternalServerError, err)
		return
	}

	c.WriteString(fmt.Sprintf(""Hello, %s!\n"", reversed))
}

func (p *user) hi(c iris.Context) {
	name := c.FormValue(""name"")
	if name == """" {
		name = ""World""
	}

	reversed, err := p.reverser.Reverse(context.Background(), name)
	if err != nil {
		c.StopWithError(http.StatusInternalServerError, err)
		return
	}

	c.WriteString(fmt.Sprintf(""Hi, %s!\n"", reversed))
}
```
gateway/user/user_info_gateway.go
```
package user

import (
	""fmt""
	""github.com/kataras/iris/v12""
	""iris/components/reverse""
	""net/http""
)

type userinfo struct {
	reverser reverse.Reverser
}

var Userinfo userinfo

func (p *userinfo) RegisterRouter(party iris.Party, args ...any) {
	for _, arg := range args {
		switch a := arg.(type) {
		case reverse.Reverser:
			p.reverser = a
		}
	}
	g := party.Party(""/userinfo"")

	g.Get(""/"", p.get)
}

func (p *userinfo) get(c iris.Context) {
	reversed, err := p.reverser.Reverse(c, ""userinfo"")
	if err != nil {
		c.StopWithError(http.StatusInternalServerError, err)
		return
	}

	c.WriteString(fmt.Sprintf(""Hello, %s!\n"", reversed))
}
```",05455c6ca60f7c8a,https://github.com/ServiceWeaver/weaver/issues/670,"{'number': 670, 'state': 'closed', 'labels': [], 'created_at': '2023-11-02T08:08:44Z', 'closed_at': '2023-11-08T08:48:08Z', 'comments_count': 5, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/670/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-11-02. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_664,2023-10-17T16:47:43Z,"Is it possible to choose how my components will split into machines?\n\nHi. I started to learn how [weaver](https://github.com/ServiceWeaver/weaver) works and I got some questions related to deploying to many machines. Weaver has a `multi` or `kube` mode which deploy applications into many deployments/machines N components = N machines. But I haven't found a mixed mode, like: I want to deploy component A and component B in machine M1, Component C in machine M2, and Component D in machine M3. Is it possible to do it now?\n\n--- Comments ---\nYou can [specify](https://github.com/ServiceWeaver/weaver/blob/main/examples/collatz/colocated.toml) the components you'd like to run together on the same machine.

In your example, you would add the following to your TOML file:

```
colocate = [
  [ ""A"", ""B"" ]
]
```

All other components will be distributed onto their own machines.

Note that ""A"" and ""B"" strings need to be prefixed with the full package path, including your go.mod module path.\n@spetrovic77 Thanks for your fast answer. Is it possible to do only for the main process? is it possible to specify group of components, like: component A and component B in machine M1, component C and component D in machine M2:\nHi @Tom910 , you can do it for any component, including main. You can do:

```
colocate = [
  [ ""A"", ""B""],
  [ ""C"", ""D""],
]
```

, in which case A and B will be on M1, and C and D on M2. All other components will be on their own machines.
\nI published an article related to this topic https://amarchenko.dev/blog/2023-10-19-service-weaver/",6e9e3ce2b32afd28,https://github.com/ServiceWeaver/weaver/issues/664,"{'number': 664, 'state': 'closed', 'labels': [], 'created_at': '2023-10-17T16:47:43Z', 'closed_at': '2023-10-17T19:40:06Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/664/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-10-17. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_663,2023-10-17T09:49:23Z,"Tests failing on MacOS\n\nApple M1, macOS Ventura 13.6

`go test ./...` is failing at `github.com/ServiceWeaver/weaver/internal/testdeployer`

Below: 2 successive attempts

This may or may not be related to the window ""Do you want the application “testdeployer.test” to accept incoming network connections?"" showing up, where I need to click OK

<img width=""260"" alt=""image"" src=""https://github.com/ServiceWeaver/weaver/assets/13508141/de6d01a0-ed58-4b54-b6c6-d278a23c04ac"">
\n\n--- Comments ---\nAttempt 1

```
--- FAIL: TestHostnameWeaveletAddress (0.00s)
    remoteweavelet_test.go:437: net.LookupIP(""deleplace-macbookpro.roam.internal""): lookup deleplace-macbookpro.roam.internal: no such host
D1017 11:47:37.850467 weavelet             5d2bca72 remoteweavelet.go:336                │ Constructed component=""testdeployer.a"" serviceweaver/logerror=""write protobuf length: write |1: broken pipe""
D1017 11:47:37.850470 weavelet             5d2bca72 remoteweavelet.go:491                │ Updated component=""testdeployer.a"" serviceweaver/logerror=""write protobuf length: write |1: broken pipe""
D1017 11:47:37.850476 testdeployer.a       5d2bca72 components.go:58                    │ A serviceweaver/logerror=""write protobuf length: write |1: broken pipe""
D1017 11:47:37.850477 testdeployer.b       5d2bca72 components.go:63                    │ B serviceweaver/logerror=""write protobuf length: write |1: broken pipe""
D1017 11:47:37.850478 testdeployer.c       5d2bca72 components.go:68                    │ C serviceweaver/logerror=""write protobuf length: write |1: broken pipe""
FAIL
FAIL	github.com/ServiceWeaver/weaver/internal/testdeployer	0.771s
```
\nAttempt 2

```
D1016 13:13:14.557416 weavelet             241ca0a2 remoteweavelet.go:231                │ 🧶 weavelet started addr=""tcp://127.0.0.1:12345"" serviceweaver/logerror=""write protobuf length: write |1: broken pipe""
--- FAIL: TestHostnameWeaveletAddress (0.01s)
    remoteweavelet_test.go:437: net.LookupIP(""deleplace-macbookpro.roam.internal""): lookup deleplace-macbookpro.roam.internal: no such host
D1016 13:13:14.735618 weavelet             b02b4d1f remoteweavelet.go:336                │ Constructed component=""testdeployer.a"" serviceweaver/logerror=""write protobuf length: write |1: broken pipe""
D1016 13:13:14.735623 weavelet             b02b4d1f remoteweavelet.go:491                │ Updated component=""testdeployer.a"" serviceweaver/logerror=""write protobuf length: write |1: broken pipe""
D1016 13:13:14.735628 testdeployer.a       b02b4d1f components.go:58                    │ A serviceweaver/logerror=""write protobuf length: write |1: broken pipe""
D1016 13:13:14.735630 testdeployer.b       b02b4d1f components.go:63                    │ B serviceweaver/logerror=""write protobuf length: write |1: broken pipe""
D1016 13:13:14.735631 testdeployer.c       b02b4d1f components.go:68                    │ C serviceweaver/logerror=""write protobuf length: write |1: broken pipe""
D1016 13:13:14.785129 weavelet             d22dd796 remoteweavelet.go:336                │ Constructed component=""testdeployer.a"" serviceweaver/logerror=""write protobuf length: write |1: broken pipe""
D1016 13:13:14.785141 weavelet             d22dd796 remoteweavelet.go:491                │ Updated component=""testdeployer.a"" serviceweaver/logerror=""write protobuf length: write |1: broken pipe""
D1016 13:13:14.815525 weavelet             572fdf67 remoteweavelet.go:336                │ Constructed component=""testdeployer.a"" serviceweaver/logerror=""writer protobuf data: write |1: broken pipe""
D1016 13:13:14.815533 weavelet             572fdf67 remoteweavelet.go:491                │ Updated component=""testdeployer.a"" serviceweaver/logerror=""writer protobuf data: write |1: broken pipe""
D1016 13:13:14.815538 testdeployer.a       572fdf67 components.go:58                    │ A serviceweaver/logerror=""writer protobuf data: write |1: broken pipe""
FAIL
FAIL	github.com/ServiceWeaver/weaver/internal/testdeployer	0.806s
```\nThis small test fails on my Mac for some reason, without showing any popup window 

```
func TestLookup(t *testing.T) {
	hostname, err := os.Hostname()
	if err != nil {
		t.Fatal(err)
	}
	ips, err := net.LookupIP(hostname)
	if err != nil {
		t.Fatalf(""net.LookupIP(%q): %v"", hostname, err)
	}
	t.Log(ips)
}
```

->

```
--- FAIL: TestLookup (0.00s)
    lookup_test.go:16: net.LookupIP(""deleplace-macbookpro.roam.internal""): lookup deleplace-macbookpro.roam.internal: no such host
```\nMaybe it is just caused by the specific configuration of my machine:

```
% hostname
deleplace-macbookpro.roam.internal

% host deleplace-macbookpro.roam.internal
Host deleplace-macbookpro.roam.internal not found: 3(NXDOMAIN)
```\nHi @Deleplace, 
you can try add:
`127.0.0.1    deleplace-macbookpro.roam.internal` in ` /etc/hosts`

After making these changes, you might need to flush the DNS cache to ensure the changes take effect immediately.
`dscacheutil -flushcache`

For verify, you try: 
`ping deleplace-macbookpro.roam.internal`
the re-run `go test ./...`\nHi @Deleplace, are the tests still failing on MacOS for you? \nI think the problem wasn't in the Service Weaver code.

Thanks to @htiennv's advice, I can now run the tests without failures.",c01c8f8048609ae2,https://github.com/ServiceWeaver/weaver/issues/663,"{'number': 663, 'state': 'closed', 'labels': [], 'created_at': '2023-10-17T09:49:23Z', 'closed_at': '2023-11-11T17:55:17Z', 'comments_count': 7, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/663/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-10-17. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_660,2023-10-16T02:44:59Z,"How to implement a modular-design ERP product similar to Odoo using ServiceWeaver\n\nHi, we want to use ServiceWeaver to implement a modular design ERP product similar to Odoo. Is there a way to implement a feature similar to Odoo's dynamic loading/unloading of modules at runtime with ServiceWeaver?

We believe that the success of Odoo among its partners and the opensource community is mainly due to its full modular architecture. From the user point of view, this is interesting since it allows to enable/disable features just by installing or uninstalling modules.

But it is, in our opinion, really from the developer point of view that this makes a difference. Indeed, the theory of opensource is that you can modify a software to fit your need. This is great, but doing so you actually create a fork and do not benefit automatically from upstream updates. So in general very few people actually do it. The genius of Odoo’s modular architecture is that you don’t need to make a fork to make a modification to the application: you just have to create a module, and this module can modify any element of the main application (models, views, controllers, client, …) without touching a single line of the original code.

This is definitely something we want to have in application: one should be able to customize application by creating a module without changing application code.\n\n--- Comments ---\nHi @yrcs, Service Weaver does not currently support loading modules at runtime. 

Thanks for explaining how Odoo supports this feature and why it's beneficial. I don't think we'll be able to implement anything like this in the short term, but in the longer term, we can revisit it!",f18dedc405b71a40,https://github.com/ServiceWeaver/weaver/issues/660,"{'number': 660, 'state': 'closed', 'labels': ['enhancement'], 'created_at': '2023-10-16T02:44:59Z', 'closed_at': '2024-11-05T23:19:08Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/660/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-10-16. Resolution: acknowledged_not_fixed (state=closed, labels=['enhancement']). Root cause: unclear (code=)"
github_issue,gh_issue_658,2023-10-12T07:28:20Z,"Deployment of UPX-compressed program failed.\n\nI compressed my program with UPX. Then, when I ran it with the Weaver command “weaver single deploy ...”, I got a panic error. Please see the picture below:

![aaa](https://github.com/ServiceWeaver/weaver/assets/5525630/fa34ca3b-2194-4f49-8d9c-7eb18857435c)

I suspect it's caused by the program not decompressing when deploying.\n\n--- Comments ---\nHi @bagualing ,

We store the component communication graph and some other information (e.g., network listeners) in the read-only section of the binary. Our deployers (like `single` in your case) inspect the binary before they run it to learn about the component communication graph and other application properties. We the use this information in a number of places, such as the enforcement of communication paths using mTLS.

Is there any way for you to undo the compression before invoking `weaver single deploy hoh.toml`?

See this file for more information about how Service Weaver stores information inside the application binary:
https://github.com/ServiceWeaver/weaver/blob/main/runtime/bin/bin.go#L99\n> Is there any way for you to undo the compression before invoking weaver single deploy hoh.toml?

I think there is no good way at the moment. Because UPX-compressed programs are self-extracting.",87be02e4a79811fc,https://github.com/ServiceWeaver/weaver/issues/658,"{'number': 658, 'state': 'closed', 'labels': [], 'created_at': '2023-10-12T07:28:20Z', 'closed_at': '2023-10-16T12:18:11Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/658/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-10-12. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_654,2023-10-08T08:29:16Z,"The port of the configuration file is not in effect，SERVICEWEAVER_CONFIG=weaver.toml go run . The command runs the configuration file to take effect\n\n![image](https://github.com/ServiceWeaver/weaver/assets/54879886/16a750d6-c1aa-4715-abd8-ca6a379a7079)
![image](https://github.com/ServiceWeaver/weaver/assets/54879886/fa9f7989-d6ff-4c46-8e14-8101ee8112c6)


![image](https://github.com/ServiceWeaver/weaver/assets/54879886/1668ff03-5ff3-46e3-9a06-49293df3b49e)
\n\n--- Comments ---\nThe `[single]` section of the TOML config file configures a Service Weaver application run with `go run` and `weaver multi single`. To configure an app run with `weaver multi deploy`, you'll have to add a `[multi]` section like this: 

```toml
[multi]
listeners.hello = {address = ""localhost:12345""}
```\nWe've also seen people forget to re-run `weaver generate` after adding a
listener to their component implementation struct, so please be on the
lookout for that if things still don't work after you add the config.

On Tue, Oct 10, 2023 at 9:07 AM Michael Whittaker ***@***.***>
wrote:

> The [single] section of the TOML config file configures a Service Weaver
> application run with go run and weaver multi single. To configure an app
> run with weaver multi deploy, you'll have to add a [multi] section like
> this:
>
> [multi]listeners.hello = {address = ""localhost:12345""}
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/ServiceWeaver/weaver/issues/654#issuecomment-1755762758>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/ABJSQ6UQYAURW6NBXBT4UM3X6VXDLAVCNFSM6AAAAAA5XQ2UPGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTONJVG43DENZVHA>
> .
> You are receiving this because you are subscribed to this thread.Message
> ID: ***@***.***>
>
\nAny else solutions? I met the same trouble. The port of the configuration file is not in effect.
But i used `go run`, after `weaver generate .`.

my config weaver.toml

```
[single]
listeners.hello = {address = ""localhost:12345""}
```

listener

```
type app struct{
    weaver.Implements[weaver.Main]
    reverser weaver.Ref[Reverser]
    hello    weaver.Listener `weaver:""hello""`
}
```

weaver version
v0.22.0 darwin/amd64\n> Any else solutions? I met the same trouble. The port of the configuration file is not in effect. But i used `go run`, after `weaver generate .`.
> 
> my config weaver.toml
> 
> ```
> [single]
> listeners.hello = {address = ""localhost:12345""}
> ```
> 
> listener
> 
> ```
> type app struct{
>     weaver.Implements[weaver.Main]
>     reverser weaver.Ref[Reverser]
>     hello    weaver.Listener `weaver:""hello""`
> }
> ```
> 
> weaver version v0.22.0 darwin/amd64

Use below command is ok.
SERVICEWEAVER_CONFIG=weaver.toml go run .",6e2faa9af5ef271e,https://github.com/ServiceWeaver/weaver/issues/654,"{'number': 654, 'state': 'closed', 'labels': [], 'created_at': '2023-10-08T08:29:16Z', 'closed_at': '2023-10-10T16:07:04Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/654/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-10-08. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_640,2023-09-22T10:51:55Z,"Can Weaver add serializable for the sql.Null* structs?\n\nHi，
Can Weaver add serializable for the sql.Null* structs? 
I think it will be very valuable.\n\n--- Comments ---\n> Can Weaver add serializable for the sql.Null* structs?

Unfortunately not. A named struct type is only [serializable](https://serviceweaver.dev/docs.html#serializable-types) if it meets one of the following conditions: 

- It is a protocol buffer (i.e. it implements `proto.Message`).
- It implements `encoding.BinaryMarshaler` and `encoding.BinaryUnmarshaler`.
- It embeds `weaver.AutoMarshal`. 

The `sql.Null*` types are not protocol buffers obviously. And we cannot make them implement `BinaryMarshaler` or `BinaryUnmarshaler` or embed `weaver.AutoMarshal`. You can, however, make type aliases to the `sql.Null*` types and implement the `BinaryMarshaler` and `BinaryUnmarshaler` interfaces yourself: 

```go
type NullByte sql.NullByte
func (n *NullByte) MarshalBinary() (data []byte, err error) { ... }
func (n *NullByte) UnmarshalBinary(data []byte) error       { ... }

type ExampleComponent interface {
        // Note that we're returning `NullByte`, not `sql.NullByte`. 
        Method(context.Context) (NullByte, error)
}
```

Would this approach solve your problem?

\nI'm still interested in this sql.Null* serialization issue.

Because these days when I write Weaver components, I feel very awkward to deal with these ""sql.Null*"" types, even use type aliases solution.

Is there a way to natively support sql.Null* in Weaver's codegen.Encoder and codegen.Decoder struct?

Thanks！",87be02e4a79811fc,https://github.com/ServiceWeaver/weaver/issues/640,"{'number': 640, 'state': 'closed', 'labels': [], 'created_at': '2023-09-22T10:51:55Z', 'closed_at': '2023-09-23T11:14:21Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/640/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-09-22. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_603,2023-09-13T21:17:57Z,"0.21.2 was not completed\n\n👋 it looks like 0.21.2 release was not completed ([failed action run](https://github.com/ServiceWeaver/weaver/actions/runs/6166298665)), raise this issue for some awareness. Thanks!

relates to https://github.com/Homebrew/homebrew-core/pull/142157\n\n--- Comments ---\nHi @chenrui333. Note that we only make GitHub releases for minor versions (e.g., v0.20.0, v0.21.0) and not for patch versions (e.g., v0.20.1, v0.21.2). We haven't made a GitHub release for v0.21.0 yet, but we will soon. The failing GitHub action you linked to is a bug in our GitHub actions, but it doesn't affect the release. \nJust made a GitHub release for v0.21.0: https://github.com/ServiceWeaver/weaver/releases\nThanks! Just to clarify, should we be updating to tagged minor versions that don't have a release (e.g., v0.21.2, v0.21.1, v0.18.1, v0.16.1) or should we only update to versions that have a GitHub release (e.g., 0.21.0, 0.20.0, etc.)?\nUpdate to the latest tagged version! Go should do this for you automatically: `go install github.com/ServiceWeaver/weaver/cmd/weaver@latest`",d8b9afeddc737fb4,https://github.com/ServiceWeaver/weaver/issues/603,"{'number': 603, 'state': 'closed', 'labels': [], 'created_at': '2023-09-13T21:17:57Z', 'closed_at': '2023-09-15T22:59:27Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/603/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-09-13. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_580,2023-09-05T11:21:10Z,"The dashboard seems a little unusual.\n\nI followed the official documentation and after starting the service, I noticed that the dashboard would keep reporting errors.
![image](https://github.com/ServiceWeaver/weaver/assets/37646342/f29ba4a5-9f11-4734-a8ba-c0ea5a0048af)
I've noticed that there seems to be a problem with the template, and I'm not sure if I'm misinterpreting it.

https://github.com/ServiceWeaver/weaver/blob/536bcca260218eef352571e31fc61dfaee785faa/internal/status/templates/deployment.html#L165

https://github.com/ServiceWeaver/weaver/blob/536bcca260218eef352571e31fc61dfaee785faa/internal/status/status.pb.go#L136C1-L136C1

```
type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string    `protobuf:""bytes,1,opt,name=name,proto3"" json:""name,omitempty""`         // component name (e.g., Cache)
	Pids    []int64   `protobuf:""varint,3,rep,packed,name=pids,proto3"" json:""pids,omitempty""` // PIDs of component replicas
	Methods []*Method `protobuf:""bytes,4,rep,name=methods,proto3"" json:""methods,omitempty""`   // methods
}
```

I noticed that there is no definition for `Group`, so is that what is causing the `$c.Group` to report an error.
\n\n--- Comments ---\nGreat finding @kalifun. This is being fixed in #582.",f0a541c0cf04202f,https://github.com/ServiceWeaver/weaver/issues/580,"{'number': 580, 'state': 'closed', 'labels': [], 'created_at': '2023-09-05T11:21:10Z', 'closed_at': '2023-09-05T21:12:05Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/580/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-09-05. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_556,2023-08-23T01:11:58Z,"feat: add check rules to avoid cycle Ref\n\nWhen we change the examples/chat below, it's not hard to realise localCache and scaler are mutually dependent, which would lead to a stack overflow.

```
type localCache struct {
	weaver.Implements[LocalCache]
	mu    sync.Mutex
	test  weaver.Ref[ImageScaler]
	cache *lru.Cache[string, string]
	// TODO: Eviction policy.
}


type scaler struct {
	weaver.Implements[ImageScaler]
	weaver.Ref[LocalCache]
}
```

```
➜  chat git:(main) ✗ go run .                               
╭───────────────────────────────────────────────────╮
│ app        : chat                                 │
│ deployment : 1d053701-be60-4e2e-b170-d2d40d12423a │
╰───────────────────────────────────────────────────╯
runtime: goroutine stack exceeds 1000000000-byte limit
runtime: sp=0xc02058c388 stack=[0xc02058c000, 0xc04058c000]
fatal error: stack overflow

runtime stack:
runtime.throw({0xd9b445?, 0x7f49e1f1fc70?})
        /home/liqi/.gvm/gos/go1.21.0/src/runtime/panic.go:1077 +0x5c fp=0x7f49e1f1fc20 sp=0x7f49e1f1fbf0 pc=0x43be7c
runtime.newstack()
        /home/liqi/.gvm/gos/go1.21.0/src/runtime/stack.go:1107 +0x5ac fp=0x7f49e1f1fdd0 sp=0x7f49e1f1fc20 pc=0x4563ec
runtime.morestack()
        /home/liqi/.gvm/gos/go1.21.0/src/runtime/asm_amd64.s:593 +0x8f fp=0x7f49e1f1fdd8 sp=0x7f49e1f1fdd0 pc=0x46daef
```
\n\n--- Comments ---\nOh great find! Yeah, we should either detect and disallow cycles or allow cycles. We'll work on this.\nOh great find! Yeah, we should either detect and disallow cycles or allow cycles. We'll work on this.\n@mwhittaker Can you help to understand more about for me fix that?
I believe that we need to improve checker when to generate files `*_gen.go` to ensure this merge cycle, right?\n@renanbastos93 
I fixed this problem by checking the cycle at runtime, details can be found in the link below, just for your information :-)

https://github.com/go-kod/kod/blob/main/registry.go#L168\nLooks great!

Would you  mind sending a PR to add this support in the main Service Weaver
repo as well?

Thanks,
- Robert

On Wed, May 29, 2024 at 11:44 PM 大可 ***@***.***> wrote:

> @renanbastos93 <https://github.com/renanbastos93>
> I fixed this problem by checking the cycle at runtime, details can be
> found in the link below, just for your information :-)
>
> https://github.com/go-kod/kod/blob/main/registry.go#L168
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/ServiceWeaver/weaver/issues/556#issuecomment-2138794335>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAMZ5KTKHZ4XC5HNRAQHFKTZE3DDVAVCNFSM6AAAAAA32WPL5KVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDCMZYG44TIMZTGU>
> .
> You are receiving this because you are subscribed to this thread.Message
> ID: <ServiceWeaver/weaver/issues/556/2138794335 ***@***.***
> com>
>
\nAwesome, @sysulq Would you like to open a PR to fix that?\n@rgrandl @renanbastos93 Sure, but I've been a bit busy lately, so I would get to it after some time. 🙂 \n@sysulq I can help you maybe I could to open PR and you review it. What do you think?\n@renanbastos93 Definitely sure\nI've already opened my branch to implement it, but now I am understanding more details about the code generation and the registry component needed to code it. If there is any other important information, please share it with me.\nhttps://github.com/renanbastos93/weaver-issue-556 (this project simulate the bug)\n@mwhittaker I have been thinking about raising an error when there is a cyclic reference. Maybe we could change this approach to accept it. Have you ever thought about accepting cyclic references? I'll continue fixing it based on raising an error when avoiding cyclic references, but I'd like to bring this point up for reflection. I know that Golang can't import packages with cyclic references, but maybe we could think about that.\nThis work has been deprioritized.",07fc10775e0b5bf3,https://github.com/ServiceWeaver/weaver/issues/556,"{'number': 556, 'state': 'closed', 'labels': ['bug'], 'created_at': '2023-08-23T01:11:58Z', 'closed_at': '2024-11-05T23:18:58Z', 'comments_count': 13, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/556/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-08-23. Resolution: acknowledged_not_fixed (state=closed, labels=['bug']). Root cause: unclear (code=)"
github_issue,gh_issue_550,2023-08-21T15:47:04Z,"Bazel Support\n\nHey! I am really interested in exploring how service weaver would fit in a bazel project. 

I asked [in the bazel slack](https://bazelbuild.slack.com/archives/CDBP88Z0D/p1692631964746059) if there was an integration with service weaver, and it was suggested that perhaps there was internal blaze support.

If that support exists, would it be possible to open source it? \n\n--- Comments ---\nHi @lbhdc, we do not have any official bazel support. 

To build a Service Weaver application, you have to run `weaver generate ./...` and `go build`. Does bazel support that? \nThanks for such a quick response @mwhittaker!

It does supports something similar to that. The canonical way to build go programs is with the `rules_go` ruleset which downloads the toolchain, and handles calling `go build`, `go run`, or `go test`.  Related rulesets also handle generating all the bazel integrations for third party packages.

https://github.com/bazelbuild/rules_go

As for the `weaver` command, support in the form of a ruleset is needed to make it available to bazel users.

Just brainstorming the api, but I would imagine using such a ruleset would kinda look like this. A user would add this glob to their `BUILD` file, and bazel would invoke the weaver command when any of the dependencies have been updated. The code would then be able to be consumed by yet another down stream tools (like kubectl for manifests).
```starlark
weaver_generate(
  name = ""foo"",
  deps = [
    ""//my/top/level/weaver:component""
  ]
)
```\nI see. Thanks for explaining; I'm not very familiar with bazel. I'll leave the issue open as a TODO then.\nThanks, I appreciate it :grin: \nIf an open source ruleset was developed, would that be something you would be interested in having contributed back to service weaver?\nYeah, for sure!\nThis is not actionable.",952b3bd512ce85ab,https://github.com/ServiceWeaver/weaver/issues/550,"{'number': 550, 'state': 'closed', 'labels': ['enhancement'], 'created_at': '2023-08-21T15:47:04Z', 'closed_at': '2024-11-05T23:18:03Z', 'comments_count': 7, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/550/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-08-21. Resolution: acknowledged_not_fixed (state=closed, labels=['enhancement']). Root cause: unclear (code=)"
github_issue,gh_issue_549,2023-08-21T08:34:54Z,"TestExamples failing: no such file\n\n```
$ go version
go version go1.21.0 linux/amd64

$ go install github.com/ServiceWeaver/weaver/cmd/weaver@latest
go: downloading github.com/ServiceWeaver/weaver v0.19.0

$ git clone https://github.com/ServiceWeaver/weaver
$ cd weaver
$ cd examples
$ go test
--- FAIL: TestExamples (0.70s)
    --- FAIL: TestExamples/collatz (0.19s)
        --- FAIL: TestExamples/collatz/weaver-single (0.00s)
            examples_test.go:95: fork/exec ../../cmd/weaver/weaver: no such file or directory
        --- FAIL: TestExamples/collatz/weaver-multi (0.00s)
            examples_test.go:102: fork/exec ../../cmd/weaver/weaver: no such file or directory
    --- FAIL: TestExamples/factors (0.18s)
        --- FAIL: TestExamples/factors/weaver-single (0.00s)
            examples_test.go:95: fork/exec ../../cmd/weaver/weaver: no such file or directory
        --- FAIL: TestExamples/factors/weaver-multi (0.00s)
            examples_test.go:102: fork/exec ../../cmd/weaver/weaver: no such file or directory
    --- FAIL: TestExamples/hello (0.18s)
        --- FAIL: TestExamples/hello/weaver-single (0.00s)
            examples_test.go:95: fork/exec ../../cmd/weaver/weaver: no such file or directory
        --- FAIL: TestExamples/hello/weaver-multi (0.00s)
            examples_test.go:102: fork/exec ../../cmd/weaver/weaver: no such file or directory
    --- FAIL: TestExamples/reverser (0.15s)
        --- FAIL: TestExamples/reverser/weaver-single (0.00s)
            examples_test.go:95: fork/exec ../../cmd/weaver/weaver: no such file or directory
        --- FAIL: TestExamples/reverser/weaver-multi (0.00s)
            examples_test.go:102: fork/exec ../../cmd/weaver/weaver: no such file or directory
FAIL
exit status 1
FAIL    github.com/ServiceWeaver/weaver/examples        0.702s
```

The test is looking for an executable at a relative path, where it is not, and I'm not sure about a prerequisite step to copy or compile it there. My executable lives at `~/go/bin/weaver`.\n\n--- Comments ---\nGreat catch! I opened #551 to fix this!",c01c8f8048609ae2,https://github.com/ServiceWeaver/weaver/issues/549,"{'number': 549, 'state': 'closed', 'labels': [], 'created_at': '2023-08-21T08:34:54Z', 'closed_at': '2023-08-23T17:18:56Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/549/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-08-21. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_540,2023-08-16T21:59:14Z,"Synchronized component implementation (feature idea)\n\nApologies if this has been suggested / discussed elsewhere -- I did search but did not find anything. I attended the workshop this evening and it was quite fun to play with weaver. One thing that I have to do repeatedly in services that are accessed via network or via multiple goroutines is ensuring access is synchronized. A lot of times I will write something like this (borrowing from the workshop cache example):

```
func (c *cache) Put(ctx context.Context, key string, value []string) error {
	c.mu.Lock()
	defer c.mu.Unlock()

	c.storage[key] = value
	return nil
}
```

The first thing that came to mind is that perhaps this could be handled in the stub with the help of the code generator.  For example, if the goal is for the implementation to be sync, the user could use `weaver.SyncImplements` instead of `weaver.Implements`.

```
type cache struct {
	weaver.SyncImplements[Cache]
}
```

Thoughts? I could try submit a PR if there's interest in this feature.\n\n--- Comments ---\nHi @diegofrata! If I understand correctly, the benefit of `SyncImplements` is that it saves a programmer the effort of adding a `sync.Mutex` field to their implementation struct and adding two lines to every method (one to `Lock` and one to `Unlock`). 

I think it's an interesting idea, but I worry that this is not a big enough benefit to compensate for some of the drawbacks of the proposal. For example, the approach does not generalize well. If someone needs an [`RWMutex`](https://pkg.go.dev/sync#RWMutex) instead of a `sync.Mutex`, they can't use `SyncImplements`. Or, if they need access to the mutex to initialize a `sync.Cond`. Or, if some methods don't need to be locked, or don't need to be locked for the duration of the method. 

There are also some aspects of the API we would have to sort out and explain to users, which brings complexity. For example, is the mutex acquired in all methods of the struct, or only those that are part of the component interface it implements? If it's all methods, then how do methods call each other without deadlocking? And if it's only the methods in the interface, then what do I do if I need to lock another method? And what about methods the struct may inherit from embeddings? 

I think if the redundancy or complexity of the existing approach was higher or if there were a natural and general way to solve the problem, I would be in favor. But as is, I would prefer to leave things as is. \nHi @mwhittaker,

Reading your comments made me rethink whether my proposal would be at all that useful. But to answer your questions, what I imagined is simply a standard mutex on the stub (or use channels to queue the calls and turn it into a message box essentially). Users already have the freedom to work out more intricate solutions if they want to -- what is missing is a easy way to synchronize a component that will be useful most of the time.

When I first thought of `SyncImplements`, I thought of the example of the cache where, while not optimal (i.e. using RWLock) it provides a safe starting point for developers. However, the more I think about it the clearer it is how much of an outlier the Cache example is. 

If I swap the example from cache to some sort of banking transaction, then the `SyncImplements` is actually harmful, as you'd not want to serialize deposits across multiple accounts -- you might want to serialize the access to the map or something, but not the actual operation on account. So if I was writing a bank account service, I would write something like the below.

```
package main

import (
	""context""
	""sync""

	""github.com/ServiceWeaver/weaver""
)

type BankAccountService interface {
	Deposit(ctx context.Context, accountNumber string, amount float64) error
}

type bankAccountService struct {
	weaver.Implements[BankAccountService]
	mu       sync.Mutex
	accounts map[string]*bankAccount
}

func (b *bankAccountService) getAccount(accountNumber string) *bankAccount {
	b.mu.Lock()
	defer b.mu.Unlock()

	if account, ok := b.accounts[accountNumber]; ok {
		return account
	}

	account := &bankAccount{}
	b.accounts[accountNumber] = account
	return account
}

func (b *bankAccountService) Deposit(ctx context.Context, accountNumber string, amount float64) error {
	account := b.getAccount(accountNumber)

        // If SyncImplements was used in this service, then this call would be serialized, 
        // which could kill the throughput of the system.
	account.Deposit(amount)
	return nil
}

func (b *bankAccountService) Init(ctx context.Context) error {
	b.accounts = make(map[string]*bankAccount)
	return nil
}
```
`SyncImplements` would be actually useful on the `bankAccount` itself, as you'd never want Deposits and Withdrawals to happen concurrent and bank accounts don't need fine grained contention management -- essentially you'd always be happy with a standard mutex. Correct me if I am wrong here, but the bank account would never be a weaveable service because there isn't a thing such as named services or entities, so it couldn't benefit from `SyncImplements`, right?

```
type bankAccount struct {
	mu      sync.Mutex
	balance float64
}

func (b *bankAccount) Deposit(amount float64) {
	b.mu.Lock()
	defer b.mu.Unlock()

	b.balance += amount
}
```

So, after thinking about it, feels like my proposal would only be useful if you could distribute entities as you distribute services -- but that would be branching into actor models territory and it doesn't feel like a it's a goal of Service Weaver.\n> Correct me if I am wrong here, but the bank account would never be a weaveable service because there isn't a thing such as named services or entities, so it couldn't benefit from SyncImplements, right?

Yup, you're right!

> So, after thinking about it, feels like my proposal would only be useful if you could distribute entities as you distribute services -- but that would be branching into actor models territory and it doesn't feel like a it's a goal of Service Weaver.

I agree. Thanks for the proposal. And thanks for the thoughtful response outlining your reasoning!\nI will close this issue as it is obviously a non-runner. Thanks for entertaining it!",4044358a05c0eb48,https://github.com/ServiceWeaver/weaver/issues/540,"{'number': 540, 'state': 'closed', 'labels': [], 'created_at': '2023-08-16T21:59:14Z', 'closed_at': '2023-08-18T10:44:17Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/540/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-08-16. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_524,2023-08-12T11:31:13Z,"Limit maximum of replication\n\nHello, 

is it possible to make an implemetation have a maximum number of replications?

I'm thinking of the use case of an element of my application that uses resources that are themselves limited 

Use case: 
- a database with a maximum number of connections 
- a cache with a writer and several readers\n\n--- Comments ---\nHi @kedric! Right now, we have no official support for specifying the maximum number of replicas of a component. If you use the [`weaver kube` deployer](https://github.com/serviceweaver/weaver-kube), however, you can edit the generated Kubernetes YAML files to specify a maximum number of replicas. This is definitely something we might add in the future, so I'll leave the issue open. 

I think guaranteeing a maximum number of replicas might be tricky. For example, if you currently have $n$ replicas, where $n$ is the max, and you lose contact to one of the replicas, do you start a new replica? I don't think you can without possible having $n+1$ replicas. But we might be able to enforce a maximum replica limit on a best effort basis.\nHi @mwhittaker,

If I lose contact with a replica, I think it should be considered obsolete. if the replica was in demand, I'll have to start a new one.
After that, it's up to me to decide whether to keep a resource margin for myself, so that I can have a period of time when I'm likely to use more resources.

But this means that for a writer/reader case, it's a tricky situation. 

Is there any way of making a leader election system for the second case with what exists?\n> If I lose contact with a replica, I think it should be considered obsolete. if the replica was in demand, I'll have to start a new one. After that, it's up to me to decide whether to keep a resource margin for myself, so that I can have a period of time when I'm likely to use more resources.

Makes sense! If we implement a limit on the number of replicas on a best effort basis, it should be fine to use for performance reasons.
  
> But this means that for a writer/reader case, it's a tricky situation.

Yup, I don't think you should rely on a maximum number of replicas for correctness. 

> Is there any way of making a leader election system for the second case with what exists?

Because this would be very complicated, I don't think we have any short term plans to implement it in Service Weaver. If you need something like this, I recommend using an existing system like ZooKeeper in conjunction with Service Weaver.\nHi @mwhittaker,

Thank you for this information, I'll see how I can do. \n@kedric, this is somewhat orthogonal, but you can specify the max number of replicas if you use the GKE deployer.",23ca27638b033945,https://github.com/ServiceWeaver/weaver/issues/524,"{'number': 524, 'state': 'closed', 'labels': ['enhancement'], 'created_at': '2023-08-12T11:31:13Z', 'closed_at': '2024-05-30T16:53:04Z', 'comments_count': 5, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/524/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-08-12. Resolution: acknowledged_not_fixed (state=closed, labels=['enhancement']). Root cause: unclear (code=)"
github_issue,gh_issue_505,2023-08-07T16:43:13Z,"Stream Listener <-> Storage\n\nHello,

I have a question and I don't see how to implement it in framwork.

In many cases I use grpc as a server and I usually stream the results instead of providing a repeated field,

That's why the service often looks like this:

protobuf:
```
service Books {
    rpc List (BookListRequest) returns (stream Book) {}
}
```

Repository
```

type Responder interface {
    Send(*model.Book) error
}

func (r *Repository) List(ctx context.Context, query ..., responder Responder) error {
    rows, err := sql.QueryContext(ctx, ...)
    ...

    for rows.Next() {
        tmp := &model.Book{}
        err := row.Scan(&book.X, &book.Y)
        ...
        responder.Send(book)
    }
}
```

server:
```
type BookStreamSender struct {
    Serv pb.Books_BookServer
}

func (ss *BookStreamSender) Send(book *model.Book) error {
    ... mapper
    return ss.Send(...)
}

func (impl *ImplementationServer) List(req *pb.BookListRequest, serv  Books_BookServer) error {
    ...

    return repositoryBook.List(ctx, &BookStreamSender{ Serv: serv } )
}
```

I'm happy to skip all the logic between the two components, but the idea is there.
the principle is quite simple: the server creates a class that responds to the client, which responds to an interface defined in the business part. 

i also use the same method in the other direction for mass insertion.

I wonder if with interface{} there wouldn't be the possibility of a kind of pointer that would allow two services to communicate directly. \n\n--- Comments ---\nHi @kedric,

It sounds to me like there are two issues at play here. First, you would like the server to be able to stream results back to the client. Currently, Service Weaver doesn't support this. It is (reasonably) feasible for us to add streaming support, as our underlying runtime establishes bi-directional channels between two participants under the hood.

The second issue is the relationship between the `Repository` and `BooksStreamSender`. I'm envisioning that those two live in the same process, and that the `Repository` currently uses the underlying gRPC connection to Send() data on. Is that right? If so, you would likely retain a similar design Service Weaver, possibly passing a channel of type `chan *model.Book` into `Repository`.

We will likely need to add streaming support to Service Weaver for this to work. One option is for the `Books` service to support streaming methods. Here is how you may write it in Service Weaver if we supported this functionality:

```
type BookListRequest struct {...}
type Book struct {...}

type BooksService interface {
  List(context.Context, BookListRequest) (<-chan *Book, error)
}
```

Your Service Weaver implementation would possibly look like this:

```
type BooksServiceImpl struct {
  weaver.Implements[BooksService]
}

func (b *BooksServiceImpl) List(ctx context.Context, req *BookListRequest) (<-chan *Book, error) {
  ch := make(chan *Book)
  sender, err := newBookStreamSender(ctx, req)
  if err != nil {
    return nil, err
  }
  go sender.Run()
  return ch, nil
}
```

Let me know if something like this will satisfy your requirements, and we can look about adding streaming support (possibly by using Go channels) to Service Weaver.
\nyes, I think this would work in the case of a data stream.

But it makes me think of another case (sorry, framwork makes me love it): 

When I know I'm going to apply a lot of processing to a structure, I'll load all the data from my database linked to that structure so I can modify it easily, then apply all the modifications in a single, fast transaction using bulk update / bulk insert / bulk delete. 

example:
```go
type Components struct {}
type Process struct {}
type Recipe struct {}

type RecipeExpend struct {
    Recipe *Recipe
    Ingredient []*Ingredient
    Process []*Process
}

type WriterRepository[T any] interface {
    BulkCreate(context.Context, []T) error
    BulkUpdate(context.Context, []T) error
    BulkDelete(context.Context, []T) error
}

type Writer[T any] struct {
    Repository WriterRepository[T]
    Current []T
    ToCreate []T
    ToUpdate []T
    ToDelete []T
} 

func (w *Writer[T])Save(ctx context.Context) error {
    if err := w.Repository.BulkCreate(ctx, w.ToCreate); err != nil {
        return err
    }
    if err := w.Repository.BulkUpdate(ctx, w.ToUpdate); err != nil {
        return err
    }
    if err := w.Repository.BulkDelete(ctx, w.ToDelete); err != nil {
        return err
    }
}

type RecipeWriter interface {
    AddIngredient(*Ingrediant) 
    RemoveIngredient(id uuid.UUID)

    AddProcess(Process) 
    RemoveProcess(id uuid.UUID)

    Save(ctx context.Context) error
}


// implementation of RecipeWriter 
type RecipeWriterImpl struct {
    Recipe *Recipe
    Ingredient Writer[*Ingredient]
    Process Writer[*Process]
}

/*
...
*/

func (rwi *RecipeWriterImpl) Save(ctx context.Context) error {
    // begin tx
    impl.Ingredient.Save(ctx)
    impl.Process.Save(ctx)
    // commit or rallback
}

type RecipeService interface {
    BuildRecipeWriter(context.Context, id uuid.UUID) (RecipeWriter, error)
}
```

well, I can see that in reality I'm going to repatriate the data as close as possible to my processing and I'm going to create a helper that will be built at the processing position. But I don't think it's crazy to be able to make RPC calls on a disantante interface.\nThank you @kedric.

I'm not 100% sure where streaming comes into picture here, but I've noticed that you are transactionally calling `impl.Ingredient.Save()` and `impl.Process.Save()`.

Service Weaver doesn't provide support for distributed transactions. So you will have to keep `Ingredient` and `Process` in the same OS process.

I didn't understand your point fully in sharing this example, maybe you can clarify it for me?\nThank you @spetrovic77 

on reflection, my second example isn't viable on a distributed stack. 

I think I need to take another look at the repository part while playing with the framework to find what suits me.
",23ca27638b033945,https://github.com/ServiceWeaver/weaver/issues/505,"{'number': 505, 'state': 'closed', 'labels': ['enhancement', 'author-action-required'], 'created_at': '2023-08-07T16:43:13Z', 'closed_at': '2024-11-05T23:17:40Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/505/reactions', 'total_count': 1, '+1': 1, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-08-07. Resolution: acknowledged_not_fixed (state=closed, labels=['enhancement', 'author-action-required']). Root cause: unclear (code=)"
github_issue,gh_issue_504,2023-08-07T07:52:44Z,"Question: How to create multiple http services\n\nI want to provide multiple http services for different clients, I haven't found a good way\n\n--- Comments ---\nHi @go-kenka,

I presume you want to create multiple HTTP services that allow you to call into your application? That should be pretty straightforward, you simply define multiple `weaver.Listener` fields in your component implementation, and then create multiple HTTP servers on top of those. See how to create listeners [here](https://serviceweaver.dev/docs.html#step-by-step-tutorial-listeners).

I'm closing this bug for now, but please re-open it in case I misunderstood your question.

Thanks!
-Srdjan\nI want to create a program like this, including front-end and admin management, and need to use two listeners to deploy to different domain names, but now there can only be one weaver.Main.

```
├─authservice
│      config.go
│      service.go
│      weaver_gen.go
│      
├─fileservice
│      config.go
│      service.go
├─gateway
│  ├─admin
│  │  │  server.go
│  │  │  weaver_gen.go
│  └─frontend
│      │  server.go
│      │  weaver_gen.go
├─logservice
│      config.go
│      service.go
│      weaver_gen.go
├─siteservice
│      config.go
│      service.go
│      weaver_gen.go
└─userservice
        config.go
        service.go
        weaver_gen.go
``` 
\nHi @go-kenka, 

Ah, I see the problem you are facing. There is some flexibility here, as you can attach a `weaver.Listener` to any component, not only `weaver.Main`. But I would really recommend the following, as it is most Go-ey:

- Place main.go at the root of your directory structure.
- Place the `weaver.Main` component in main.go, with two `weaver.Listener`s: `admin` and `frontend`.
- `gateway/admin` and `gateway/frontend` are no longer weaver components, they are regular Go types that take in a listener and a weaver component (i.e., `weaver.Main`), and initialize themselves.

That way, the `weaver.Main` component will end up hosting two servers, which is the best solution.

Alternatively, you can make `gateway/admin` and `gateway/frontend` their own components that implement an empty interface, and declare their respective listeners in the implementation. `weaver.Main` will have a `weaver.Ref` to both. You can initialize your HTTP servers in those components' `Init()` methods. You will likely want to [co-locate](https://serviceweaver.dev/docs.html#config-files) `weaver.Main` with one or both of these components, to avoid running too many containers.

I'm re-opening the issue to make sure either of these work for you. \nThank you for your answer, I should use the first way. Because the second way is the mode I am using now, the problem with this mode is that if `weaver.Main` is started multiple times, it will cause multiple calls in `Init()` in the ref component.",8cf6ee84f4455dec,https://github.com/ServiceWeaver/weaver/issues/504,"{'number': 504, 'state': 'closed', 'labels': [], 'created_at': '2023-08-07T07:52:44Z', 'closed_at': '2023-08-10T15:20:02Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/504/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-08-07. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_468,2023-07-19T09:13:23Z,"Issues with Logging Functionality and Incomplete Logs in Weaver Multi Deployment\n\nweaver version:  weaver v0.17.0

1. The Logging functionality within Weaver does not support predefined configurations (such as setting the default `Handler` to `NewJSONHandler`), which poses a great inconvenience for me as I intend to independently deploy a single process using the built-in `s.Logger()` and collect logs.
2. When using the built-in Logger and deploying with Weaver Multi, the logs collected through the command `weaver multi logs --format=json` are incomplete, as the fields I added using `s.Logger().With(slog.String(""logType"", ""attribute""))` are missing.
Default output when deploying with `weaver multi deploy weaver.toml`:
![image](https://github.com/ServiceWeaver/weaver/assets/32825698/6317716a-e6e5-4279-bc7e-457a8dcf7f45)
What I see when using `weaver multi logs --format=json`:
![image](https://github.com/ServiceWeaver/weaver/assets/32825698/9e02b6fd-e3ca-47a0-87c5-958bd4b989a1)
\n\n--- Comments ---\nI opened PR #470 to address your second point. Great catch! 

Do you mind elaborating on your first point? I'm not sure I fully understand. Are you saying that calling the `Logger` method on a component implementation should return the logger set by `slog.SetDefault`?\nThank you for your timely reply and the PR fix, @mwhittaker.

Indeed, it is somewhat similar to the functionality of `slog.SetDefault`, which allows me to customize the `slog.Logger` in `weaver.Main`. For example, setting a custom `io.Writer` (such as `os.File`...), using `slog.NewJSONHandler` instead of `slog.NewTextHandler` by default, and utilizing `slog.ReplaceAttr()` for field manipulation or even data obfuscation...

I noticed that the documentation only briefly explains the logging for single processes (https://serviceweaver.dev/docs.html#single-process-logging), and upon inspecting the source code (v0.17.0), it seems that the logger is hardcoded as `slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{Level: slog.LevelError + 1}))`(https://github.com/ServiceWeaver/weaver/blob/b181a14717694b15882d7fc23af405292a07118a/weavelet.go#L130). Although `weaver multi logs ` can support most of the mentioned requirements, it is not very convenient for single-process deployments and development debugging stages.

I am delighted to discover that the `weaver.SetLogger` feature module has been added in today's commit. I am eagerly anticipating the release of the new version. 🥳\nGot it, thanks for elaborating! Rather than adding new APIs to the weaver package, is it possible to implement your own logger that wraps the logger returned by a component's `Logger` method? Maybe something like the following?

```go
type exampleComponent struct {
     weaver.Implements[ExampleComponent]
     logger *slog.Logger
}

func (e *exampleComponent) Init(context.Context) error {
    myHandler := makeCustomHandler(e.Logger().Handler)
    e.logger = slog.New(myHandler)
    return nil
} 
```

Here, `makeCustomHandler` returns a `slog.Handler` that does whatever custom logic you need before forwarding a `slog.Record` to `e.Logger().Handler`.

Also, sadly, the new `SetLogger` function is internal and will not be callable.\nHaha, it's alright. Please forgive me for not carefully examining the source code. .
I am extremely grateful for the excellent solution you have provided. I will implement it in my project.

Of course, I am still eagerly anticipating the release of the new version.",d520c6e562c5d6f7,https://github.com/ServiceWeaver/weaver/issues/468,"{'number': 468, 'state': 'closed', 'labels': [], 'created_at': '2023-07-19T09:13:23Z', 'closed_at': '2023-08-07T17:07:23Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/468/reactions', 'total_count': 1, '+1': 1, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-07-19. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_467,2023-07-19T05:44:49Z,"AWS ECS deployer support\n\nAny plans on supporting aws ecs deployer? It is blocking us to try weaver in our projects.
\n\n--- Comments ---\nHi @rajender, we have a kube deployer that allows you to deploy Service Weaver in a vanilla Kubernetes cluster, that means EKS too. Would that satisfy your needs? 

We will add corresponding documentation and will write a blog post about it soon, but meanwhile the kube deployer repository is here https://github.com/ServiceWeaver/weaver-kube. \n@rgrandl We are restricted to use ECS. I guess we may not be able to use Kube deployer. 
\nI see. Yeah, we don't have immediate plans to do an AWS ECS deployer. I will add this request to our task list. ",c726285281ae487a,https://github.com/ServiceWeaver/weaver/issues/467,"{'number': 467, 'state': 'closed', 'labels': [], 'created_at': '2023-07-19T05:44:49Z', 'closed_at': '2023-07-24T15:52:01Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/467/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-07-19. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_435,2023-06-30T12:42:44Z,"Are there any plans to have weaver for java lang\n\nDoes servicewaver works only with go, is this independent of any language such as java. 

If there are some examples using java, or js kindly share them..here..\n\n--- Comments ---\nHi @nagkumar! Currently, Service Weaver only supports Go. We may support other languages in the future, but we don't have any short-term plans.",9dc3d7d671d8865f,https://github.com/ServiceWeaver/weaver/issues/435,"{'number': 435, 'state': 'closed', 'labels': [], 'created_at': '2023-06-30T12:42:44Z', 'closed_at': '2023-06-30T16:30:44Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/435/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-06-30. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_434,2023-06-30T11:21:38Z,"Multi Deployer Error: capture stdout EOF\n\nI can't run my current application in the multi mode.

weaver.toml file:
```toml
[serviceweaver]
binary = ""./microtmpl""

[single]
listeners.fsHttp = {address = ""localhost:9000""}

[multi]
listeners.fsHttp = {address = ""localhost:9000""}

[""github.com/naivary/microtmpl/fs/Fs""]
DataDir = ""data""
```

Error message:
```bash
Application <application-name> error: capture stdout: EOF.
```

All files can be found here: https://github.com/naivary/microtmpl. To replicate the error clone the repository and run 
```bash
weaver multi deploy weaver.toml
```

EDIT: I tried to simplify the example using the Step-by-Step Guide in the docs. I didn't work too.

IDK what changed but works now.\n\n--- Comments ---\nHi @naivary, there is a known bug where the multiprocess deployer doesn't work when the app only has a main component and exits right away. Maybe you were running into that?\nI think that was it. The question is how would you run a component without the main componenten having a reference to it? Imagine a main.go file containing the weaver.Main component and a second package example/foo/bar. In the second package one would impelement another component which will have a listener for http traffic. Now I would like to start the weaver application and listen for http traffic, without having a ref to the second component. Is this possible or does weaver need a reference to the component and one would have to define a interface like this
```golang
type Foo interface {
   // ... all methods defined by the component

  // Serve method to accept http traffic
  Serve(context.Context) error
}
```
And the main.go would look something like this:
```golang
type app struct {
  weaver.Implements[weaver.Main]
  foo weaver.Ref[Foo]
}

func run(context.Context, a *app) error {
  return a.foo.Get().Serve(ctx)
}

func main() {
  if err := weaver.Run(context.Background(), run); err != nil {
      panic(err)
  }
}
```

Am I thinking too complicated or falsely?

Thanks in advance.

EDIT: So what i'm trying to say is how to deploy multiple independent Components which do not depend upon each other but all havr to serve public http traffic. \nI run into the same error. My problem was caused because the TCP port was already used. 

@naivary, could you try to change the port from `9000` to something else like `9001`? 

```toml
[multi]
listeners.fsHttp = {address = ""localhost:9001""}
```\nThank you. My issue got already solved. It was caused by only having a main Component. Thats why I kept it open for the clearification how to run multiple independent Component which only listen for http traffic. \nGreat question @naivary. Right now, we don't have great support for running an HTTP server from a non-main component. Your approach works, but I think we probably want to improve the framework to make it easier to do. 

Also right now, only the components reachable from the main component using `weaver.Ref`s are started. If there's a component that no other component has a `weaver.Ref` to, it will be ignored.\nThank you for the clearification. Maybe this should also be a part of the documentation ( the part that a component will not get started if no other is referencing it using `weaver.Run`) \nI agree. Let me update the documentation.\nI will let the issue open for you to close after updating the docs.\nI encountered the problem again. This time there are more then the main component present.\nHm, very interesting. We're actually in the middle of fixing some bugs with weaver and improving the error messages when things go wrong. After that, hopefully the problem goes away, and if it comes back, hopefully the error messages will make it easier to figure out what's going wrong. I'll close this issue again once we land some of those changes.\nv0.19.0 of weaver should now print out more stuff than just `error: capture stdout: EOF` which should make it easier to understand what's going on (see #493 for details). I'll close the issue for now, but please re-open if you run into the error again.",8449aa7d4100d043,https://github.com/ServiceWeaver/weaver/issues/434,"{'number': 434, 'state': 'closed', 'labels': [], 'created_at': '2023-06-30T11:21:38Z', 'closed_at': '2023-08-14T17:58:36Z', 'comments_count': 11, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/434/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-06-30. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_433,2023-06-30T08:26:50Z,"Feature Request: weaver struct tags for weaver.WithConfig[T]\n\nI think it would be nice to have the option to set struct tags for a config struct e.g.

```golang
type config struct {
  Option1 string `weaver:""option_1""`
}
```

the weaver.toml file would look something like this:
```toml
[""example.com/pkg/Component""]
option_1 = ""foo""
```

(PS: I can also try to implement it on my own if the feature is wished and open up a pull request)\n\n--- Comments ---\nHi @naivary, you can use the `toml` tag for this: 

```go
type config struct {
    Option1 string `toml:""option_1""`
}
```

You bring up a good point, though, that this isn't documented anywhere. I'll document it and then close this issue.\nThank you. Forgot about this part...",8449aa7d4100d043,https://github.com/ServiceWeaver/weaver/issues/433,"{'number': 433, 'state': 'closed', 'labels': [], 'created_at': '2023-06-30T08:26:50Z', 'closed_at': '2023-07-05T17:03:09Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/433/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,"Temporal: plateau based on 2023-06-30. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_419,2023-06-27T13:52:55Z,"How to properly make dependency injection with ServiceWeaver\n\nI'm trying to implement the dependency injection pattern in my code.

I need it because we need to mock results from an external API during tests.

Here is a sample of what I'm trying to achieve:

**Service calling external data**
```go
// get external data service
package service

type GetExternalDataService interface {
	GetData(ctx context.Context, value string)
}

type getExternalDataServiceImpl struct {
	weaver.Implements[]
}

func GetData(ctx context.Context, value string) {
  // getting the actual external data //
}
```
**Service**
```go
// service
package service
var Dependency_fn DepFunc

type DepFunc func(ctx context.Context, x string, y string)

type someService interface {
	GetSomeExternalData(ctx context.Context, value string)
}

type someServiceImpl struct {
	weaver.Implements[]
	externalService weaver.Ref[service.GetExternalDataService]
}

func (s *someServiceImpl) GetSomeExternalData(ctx context.Context, value string) {
	// calling external API //
	DepFunc(ctx, ""some data"")
}
```
**Tests**
```go
// tests
package service

func mock_external_data(ctx context.Context, data string) {
  // returns mock data //
}

func setupTest(t *testing.T) {
	t.Helper()
	Dependency_fn = mock_external_data
}


func TestGetSomeExternalData(t *testing.T) {
	setupTest(t)

	runner := weavertest.Local
	runner.Test(t, func(t *testing.T, rate RateService) {

		ctx := context.Background()
		got, err := service.GetSomeExternalData(ctx, ""some value"")
		if err != nil {
			t.Fatal(err)
		}

		if want := what_I_want; !got.Equal(want) {
			t.Fatalf(""got %q, want %q"", got, want)
		}
	})
}
```
**The calling service**
```go
// other service
package secondService

type SecondService struct {
  SendReceivedData(ctx context.Context)
}

type secondServiceImpl struct {
  SendReceivedData(ctx context.Context)
  service weaver.Ref[service.someService]
}

func (s *secondServiceImpl) Init(ctx context.Context) error {
  s.service.Dependency_fn = service.GetExternalDataService
}


func (s *secondServiceImpl) SendReceivedData(ctx context.Context) {
  received, err := s.service.GetSomeExternalData(ctx, ""some data"")
  // other code //
}
```

The whole problem is how to tell the `service` package which `Dependency_fn` function to use when calling it from `secondService` package.

The tests I developed work perfectly and I am able to use the mock function.

I read a similar issue: #188 

In the discussion it is suggested to use `weaver.Get[Foo]`, but this provides me compilation errors such as:
`undefined: weaver.get`

For these examples I tried versions v0.13.0 and v0.16.0.


\n\n--- Comments ---\nHi @Markbnak, does [`weavertest.Fake`](https://pkg.go.dev/github.com/ServiceWeaver/weaver/weavertest#Fake) suit your use case? You can see an example of `weavertest.Fake` in use [here](https://github.com/ServiceWeaver/weaver/blob/main/examples/chat/server_test.go#L79C1-L107). Let me know if you have any questions about how it works and how you're supposed to use it.\nThank you for sharing this, I haven't seen that feature in the documentation.\n@mwhittaker, I think that this suits my use case.
I would appreciate more details on how to use it.
Maybe an other example could help me and the community.
I tried to implement this logic for my code, but the faked component is not being executed, instead the real component is executed during tests.\n@mwhittaker I managed to resolve my issue, [this code example](https://github.com/ServiceWeaver/weaver/blob/main/examples/chat/server_test.go#L79C1-L107) was what I was looking for. I hope you will document that on your website.\nAwesome! I opened #430 for this as well!",87ed9281aa77fd1e,https://github.com/ServiceWeaver/weaver/issues/419,"{'number': 419, 'state': 'closed', 'labels': [], 'created_at': '2023-06-27T13:52:55Z', 'closed_at': '2023-06-29T17:19:16Z', 'comments_count': 5, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/419/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-06-27. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_414,2023-06-25T21:34:19Z,"`weaver generate`  fails when a component uses a router whose routing key is a struct\n\nLet's presume the following `Cache` component associated with routing behaviour.

```
...

// Cache caches emoji query results.
type Cache interface {
	// Get returns the cached emojis produced by the provided query
        // field within cacheRoutingKey. On cache miss, Get returns nil, nil.
	Get(context. Context, cacheRoutingKey) ([]string, error)

	// Put stores a query and its corresponding emojis in the cache.
	Put(context.Context, cacheRoutingKey, []string) error
}

type cacheConfig struct {
	Namespaces []string `toml:""namespaces""`
}

// cache implements the Cache component.
type cache struct {
	weaver.Implements[Cache]
	weaver.WithRouter[router]
	weaver.WithConfig[cacheConfig]

	mu     sync.Mutex
	emojis map[string]map[string][]string
}

type cacheRoutingKey struct {
	ns    string
	query string
}

var _ Cache = (*cache)(nil)

func (c *cache) Init(context.Context) error {
	ns := c.Config().Namespaces
	c.emojis = map[string]map[string][]string{}
	for _, n := range ns {
		c.emojis[string(n)] = map[string][]string{}
	}
	return nil
}

func (c *cache) Get(_ context.Context, rk cacheRoutingKey) ([]string, error) {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.Logger().Debug(""Get"", ""ns"", rk.ns, ""query"", rk.query)
	if _, ok := c.emojis[rk.ns]; !ok {
		return nil, fmt.Errorf(""cache namespace key:'%q' - not defined"", rk.ns)
	}
	return c.emojis[rk.ns][rk.query], nil
}

func (c *cache) Put(_ context.Context, rk cacheRoutingKey, emojis []string) error {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.Logger().Debug(""Put"", ""ns"", rk.ns, ""query"", rk.query)
	if _, ok := c.emojis[rk.ns]; !ok {
		return fmt.Errorf(""cache namespace key:'%q' - not defined"", rk.ns)
	}
	c.emojis[rk.ns][rk.query] = emojis
	return nil
}

// router routes requests to the Cache component. Both Get and Put use the
// query as the routing key. Calls to these methods with the same routing key will
// tend to be routed to the same replica.
type router struct{}

func (router) Get(_ context.Context, rk cacheRoutingKey) cacheRoutingKey {
	return rk
}

func (router) Put(_ context.Context, rk cacheRoutingKey, _ []string) cacheRoutingKey {
	return rk
}
```
As can be seen the routing keys is a `struct` .
Going further the `weaver generate` command fails as bellow:

```
$ weaver generate .
cache.go:29:2: Method `Get(context.Context, cacheRoutingKey) ([]string, error)` of Service Weaver component ""Cache"" has incorrect argument types. Argument 1 has type cacheRoutingKey, which is not serializable. All arguments, besides the initial context.Context, must be serializable.
main.cacheRoutingKey: named structs are not serializable by default. Consider using weaver.AutoMarshal.
cache.go:32:2: Method `Put(context.Context, cacheRoutingKey, []string) (error)` of Service Weaver component ""Cache"" has incorrect argument types. Argument 1 has type cacheRoutingKey, which is not serializable. All arguments, besides the initial context.Context, must be serializable.
main.cacheRoutingKey: not a serializable type; see above for details
```
OK, let's embed `weaver.AutoMarshal` as generator tool suggests and run generate command again:
```
type cacheRoutingKey struct {
	weaver.AutoMarshal
        ns    string
	query string
}
```
```
$ weaver generate .
cache.go:40:6: cache.go:92:15: Router method ""Get"" has invalid routing key type ""cacheRoutingKey"". A routing key type should be an integer, float, string, or a struct with every field being an integer, float, or string.
```
",32205b0053c46c59,https://github.com/ServiceWeaver/weaver/issues/414,"{'number': 414, 'state': 'closed', 'labels': [], 'created_at': '2023-06-25T21:34:19Z', 'closed_at': '2023-06-27T19:50:23Z', 'comments_count': 0, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/414/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-06-25. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_411,2023-06-23T21:27:34Z,"""Code generated by .*"" comment should appear before package clause\n\nhttps://go.dev/s/generatedcode
> To convey to humans and machine tools that code is generated, generated source should have a line that matches the following regular expression (in Go syntax):
`^// Code generated .* DO NOT EDIT\.$`
This line must appear before the first non-comment, non-blank text in the file.\n\n--- Comments ---\nThanks @itstarsun! Good find!",64477983d4846d83,https://github.com/ServiceWeaver/weaver/issues/411,"{'number': 411, 'state': 'closed', 'labels': [], 'created_at': '2023-06-23T21:27:34Z', 'closed_at': '2023-06-27T00:02:20Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/411/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-06-23. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_403,2023-06-19T08:50:20Z,"How can weaver generate support a packaged structure?\n\nI modified the tutorial by moving reverser.go to pkg/reverser/ and make it a pkg. but I got not get the generation working as it has some assumption of pkg/reverser shall be in GOROOT.

```
$ weaver generate . pkg/reverser/
-: package pkg/reverser is not in GOROOT (/usr/local/go/src/pkg/reverser)
```\n\n--- Comments ---\nYou can work around this by adding `./` before the path:

```
weaver generate . ./pkg/reverser/
```

...or simply by invoking the `weaver generate` like this:

```
weaver generate ./...
```\nThanks @edigaryev!\nThanks. it works.",85c44c55354e03a8,https://github.com/ServiceWeaver/weaver/issues/403,"{'number': 403, 'state': 'closed', 'labels': [], 'created_at': '2023-06-19T08:50:20Z', 'closed_at': '2023-06-20T16:04:32Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/403/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-06-19. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_383,2023-06-09T05:07:37Z,"Weaver generate doesn't ignore the ""weaver_gen.go"" file while parsing pkgs\n\nHi, I define a golang struct embeded the `weaver.Automarshal`and run `weaver generate ./...` in my project dir, and it generates a weaver_gen.go file which includes the `WeaverMarshal` and `WeaverUnmarshal` methods of that struct. 
```
type Embed struct {
	weaver.AutoMarshal
	d1 int
	d2 int
	str   string
	slice []string
	kv map[string]int
}

func (x *Embed) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf(""Embed.WeaverMarshal: nil receiver""))
	}
	enc.Int(x.d1)
	enc.Int(x.d2)
	enc.String(x.str)
	serviceweaver_enc_slice_string_4af10117(enc, x.slice)
	serviceweaver_enc_map_string_int_c20ee031(enc, x.kv)
}

func (x *Embed) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf(""Embed.WeaverUnmarshal: nil receiver""))
	}
	x.d1 = dec.Int()
	x.d2 = dec.Int()
	x.str = dec.String()
	x.slice = serviceweaver_dec_slice_string_4af10117(dec)
	x.kv = serviceweaver_dec_map_string_int_c20ee031(dec)
}
```

However when I delete a field defined in the struct and re-run `weaver generate ./...`, it returns the following errors:
```
type Embed struct {
	weaver.AutoMarshal
	d1    int
	d2    int
	//str   string  // delete this field 
	slice []string
	kv    map[string]int
}
```

```
model/weaver_gen.go:28:15: x.str undefined (type *Embed has no field or method str)
model/weaver_gen.go:39:4: x.str undefined (type *Embed has no field or method str)
```
I have to manually delete the `weaver_gen.go` file first and then run `weaver generate` if I change any field of a struct. I  think that is probably not very reasonable :(

When I read the `generate` source code, I find out that there is a `parseNonWeaverGenFile` function whose purpose is to ignore the `weaver_gen.go` file. So I'm confused if the aboving errors are expected ? \n\n--- Comments ---\nGreat catch. That's a bug. I'll work on fixing it.\nHi @songsy13, I'm having trouble reproducing the bug. Could you share a minimal example and the steps you're running to produce the bug? Also note that if you delete a field from your `Embed` struct, `go build` should fail until you re-run `weaver generate`. That is intentional. `weaver generate` should succeed though.\nHi @mwhittaker , I add a model package in examples/hello directory, like this:
```
.
├── README.md
├── hello
├── main.go
├── model
│   ├── model.go
│   └── weaver_gen.go
├── reverser.go
├── weaver.toml
└── weaver_gen.go
```

`model.go` includes a simple struct `Embed`:
```
type Embed struct {
	weaver.AutoMarshal
	num int
	str string
}
```
I installed the latest `weaver cmd` shown from the `weaver version` cmd:
```
weaver v0.14.0
target: darwin/arm64
commit: ?
deployer API: 0.14.0
codegen API: 0.11.0
```
I ran `weaver generate ./...` in the `hello` directory, and it generates a `weaver_gen.go` file in the `model`  package directory. Then I deleted the `str` field in the `Embed` struct and re-ran `weaver generate ./...`, it returned the following errors:
```
-: # github.com/ServiceWeaver/weaver/examples/hello/model
model/weaver_gen.go:33:18: Embed does not satisfy ~struct{weaver.AutoMarshal; num int; str string} (Embed missing in ~struct{github.com/ServiceWeaver/weaver.AutoMarshal; num int; str string})
model/weaver_gen.go:40:15: x.str undefined (type *Embed has no field or method str)
model/weaver_gen.go:48:4: x.str undefined (type *Embed has no field or method str)
```
\nThanks so much @songsy13! I was very easily able to reproduce the bug (I'm actually confused about why I wasn't able to reproduce it earlier). I opened #387 which should fix things!",85d6e6f6841ca333,https://github.com/ServiceWeaver/weaver/issues/383,"{'number': 383, 'state': 'closed', 'labels': ['bug'], 'created_at': '2023-06-09T05:07:37Z', 'closed_at': '2023-06-12T18:48:12Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/383/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-06-09. Resolution: acknowledged_not_fixed (state=closed, labels=['bug']). Root cause: unclear (code=)"
github_issue,gh_issue_381,2023-06-09T04:07:57Z,"Add async request-response\n\nsome days ago i opened #375 and [discord discussion](https://discordapp.com/channels/1091097749488926790/1091097749488926793/1116467050408333342)
main point - transparency of call (local/remote) doesn't help to turn a monolith into a component.

let's give a chance to developer act differently:
additionally or instead of call interface
```go
type LocalCache interface {
	Get(_ context.Context, key string) (string, error)
	Put(_ context.Context, key, val string) error
}
```
should be possible to use ""**_request-response_**"" and develop code as remote 

```go
type LocalCache interface {
	Get(_ context.Context, key string, respval chan string, resperr chan error)
	Put(_ context.Context, key, val string, resperr chan error)
}
```
of course i don't ask marshall/unmarshall chan   

btw i liked blog [here](https://serviceweaver.dev/blog/corba.html)\n\n--- Comments ---\nHi @g41797! In our experience, we've found it better to avoid using channels in APIs and instead let the user wrap synchronous APIs in goroutines when they need to. For example, you can always do the following:

```go
respval := make(chan string)
resperr := make(chan err)
go func() {
    val, err := cache.Get(ctx, key)
    respval <- val
    resperr <- err
}() 
```

And glad you liked the blog :)",6e6786d9d6277fb8,https://github.com/ServiceWeaver/weaver/issues/381,"{'number': 381, 'state': 'closed', 'labels': [], 'created_at': '2023-06-09T04:07:57Z', 'closed_at': '2023-06-09T16:01:24Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/381/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-06-09. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_375,2023-06-05T04:10:10Z,"[Discussion]                               ServiceWeaver as Distributed Monolith\n\n""A long time ago in a galaxy far, far away...."" [CORBA](https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture) provided similar approach. 

And failed.One reason - when you build complex application and base negotiation between modules on methods/calls (object oriented style) instead of messages, you cannot achieve clean separation. Moreover you forget about networking, timing etc. 

Negotiation between modules should be explicit, this is the only way to force developer to design application as set of undependable ""network"" components
 
With the same cost instead of interfaces, you can provide typed mailboxes and similar abstractions for negotiation. 

ServiceWeaver tries to solve problem of convenient development and deployment of microservices. 
But it didn't prevent building of distributed monolith
It doesn't change mindset
     
 \n\n--- Comments ---\nHi @g41797,

Thank you for starting a discussion here. We received many similar statements, some from experts in distributed systems.

@mwhittaker wrote a response as a blog [here](https://serviceweaver.dev/blog/corba.html). If you have time, we would welcome you to read it and share your thoughts back here.
\nfirst of all - thank you for small response latency
second - great blog and specially links within

""...is a mistake to try to isolate the programmer from the fundamental issues of remote calls"" - I agree that ServiceWeaver helps to solve some problems of remote calls

but my point is different - not only remote calls are bad, **_any type of CALL is bad (local&remote)_**

message oriented paradigm is hard, but it's only way to change mind set and force developer/designer really decouple parts of the system.

Yesterday I saw some youtube videos and unknown terminology raised my attention - _modular monolith_ - best solution etc, etc
I dived dipper (because I also didn't know what monolith is) and dipper (microservices - also silver bullet)

one link pointed to serviceweaver

what i understood:

- a lot of applications were developed as monolith
- microservices were created to solve problem of monolith (and other problems..)
- develop microservices is not easy task
- serviceweaver simplifies development/deployment of microservices and improves system stability
- but (from my point of the view) it doesn't change way of design 

and it turned out that last 30 years i developed modular monoliths  





 \nbtw i opened new issue [How to build modular monolith](https://github.com/ThreeDotsLabs/watermill/issues/368) in another project

please take a look, possibly it will explain better what is the real problem
(and i don't participate in this project)\n[Discussion - discord](https://discordapp.com/channels/1091097749488926790/1091097749488926793/1116467050408333342)\nClosing the issue since the discussion moved to discord.",6e6786d9d6277fb8,https://github.com/ServiceWeaver/weaver/issues/375,"{'number': 375, 'state': 'closed', 'labels': [], 'created_at': '2023-06-05T04:10:10Z', 'closed_at': '2023-06-08T22:05:00Z', 'comments_count': 5, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/375/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-06-05. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_369,2023-06-01T07:42:30Z,"runner.Test undefined (type weavertest.Runner has no field or method Test\n\nI'm running weaver v0.12.

I followed the [official documentation](https://serviceweaver.dev/docs.html#testing) to create tests.

I use a similar code:

```
func TestAdd(t *testing.T) {
     runner := weavertest.Local  // A runner that runs components in a single process
     runner.Test(t, func(t *testing.T, adder Adder) {
         ctx := context.Background()
         got, err := adder.Add(ctx, 1, 2)
         if err != nil {
             t.Fatal(err)
         }
         if want := 3; got != want {
             t.Fatalf(""got %q, want %q"", got, want)
         }
     })
}
```

It seems like weavertest.Local.Test does not exist.

`runner.Test undefined (type weavertest.Runner has no field or method Test)`\n\n--- Comments ---\nRunning onto the same issue. 
I've tried also with version v0.10 => same compilation error ...\nAh, this is unfortunately a known problem with our online documentation. The docs reflect the main branch of our repo which is ahead of the latest version (0.12.0 in this case). We'll release v0.13.0 soon which should fix the problem. We'll also work on changing the online docs to reflect the latest version. Sorry for this!\nThis should be fixed now! I'll close the issue, but please re-open if the problem persists.\nThank you for this, it works now with version v0.13.0",87ed9281aa77fd1e,https://github.com/ServiceWeaver/weaver/issues/369,"{'number': 369, 'state': 'closed', 'labels': [], 'created_at': '2023-06-01T07:42:30Z', 'closed_at': '2023-06-08T22:05:33Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/369/reactions', 'total_count': 1, '+1': 1, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-06-01. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_368,2023-06-01T04:08:29Z,"version mismatch\n\nweaver multi deploy weaver.toml

version mismatch: deployer version 0.13.0 is incompatible with app version 0.12.0
\n\n--- Comments ---\nthat is my mistake\nHi @linbaozhong! Can you run the following commands in the root directory of your application and share the output with me?

- `go list -f '{{.Module}}' github.com/ServiceWeaver/weaver`
- `weaver single version`",05455c6ca60f7c8a,https://github.com/ServiceWeaver/weaver/issues/368,"{'number': 368, 'state': 'closed', 'labels': ['author-action-required'], 'created_at': '2023-06-01T04:08:29Z', 'closed_at': '2023-06-09T04:02:06Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/368/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-06-01. Resolution: acknowledged_not_fixed (state=closed, labels=['author-action-required']). Root cause: unclear (code=)"
github_issue,gh_issue_360,2023-05-30T07:38:28Z,"Can weaver add version uasage ?\n\nwhen use weaver command to do something, confuse which version can invoke. 

suggestion:

weaver version // weaver version 


USAGE

  weaver generate                 // weaver code generator
  weaver single    <command> ...  // for single process deployments
  weaver multi     <command> ...  // for multiprocess deployments
  weaver ssh       <command> ...  // for multimachine deployments
  weaver gke       <command> ...  // for GKE deployments
  weaver gke-local <command> ...  // for simulated GKE deployments

DESCRIPTION

  Use the ""weaver"" command to deploy and manage Weaver applications.

  The ""weaver generate"", ""weaver single"", ""weaver multi"", and ""weaver ssh""
  subcommands are baked in, but all other subcommands of the form
  ""weaver <deployer>"" dispatch to a binary called ""weaver-<deployer>"".
  ""weaver gke status"", for example, dispatches to ""weaver-gke status"".\n\n--- Comments ---\nGood suggestion! I'll work on adding `weaver version`.",2136537ef0c1cea2,https://github.com/ServiceWeaver/weaver/issues/360,"{'number': 360, 'state': 'closed', 'labels': ['enhancement'], 'created_at': '2023-05-30T07:38:28Z', 'closed_at': '2023-06-02T17:49:46Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/360/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-05-30. Resolution: acknowledged_not_fixed (state=closed, labels=['enhancement']). Root cause: unclear (code=)"
github_issue,gh_issue_355,2023-05-25T03:02:19Z,"Weaver rollout and autoscaling and its relation with Kubernetes Deployment and Serverless frameworks.\n\nI just noticed Weaver recently, and I think it is a great project with some inspiring ideas. From the documentation, I have the following questions:

1. What is the relationship between Weaver and Kubernetes rollout in terms of deployment? For example, is Kubernetes deployment used in the backend?

2. Weaver has also done some autoscaling tasks, similar to Serverless like Knative in this regard. What are the differences between them?


Is there an explanation/article of relations and design philosophy regarding these? Thank you.

 
\n\n--- Comments ---\n



> I just noticed Weaver recently, and I think it is a great project with some inspiring ideas.

Thank you!

> From the documentation, I have the following questions:
> 
> 1. What is the relationship between Weaver and Kubernetes rollout in terms of deployment? For example, is Kubernetes deployment used in the backend?

We use the Kubernetes Deployment in the backend. We also create a HorizontalPodAutoscaler to scale up the number of its replicas based on the CPU usage.

> 2. Weaver has also done some autoscaling tasks, similar to Serverless like Knative in this regard. What are the differences between them?
> 

Our autoscaling is pretty much based on HorizontalPodAutoscaler. On GKE, we also use node auto-provisioning, so the NodePool size will scale up as the CPU/memory demands increase.

> Is there an explanation/article of relations and design philosophy regarding these? Thank you.

Unfortunately, no documentation is publicly available. Our main reasons for using autoscaling are as follows:

1. The user doesn't have to hard-code the number of replicas for each component.
2. We use blue/green deployment, and with autoscaling you don't have to run two full versions of your application: by shifting traffic, the old version will shrink as the new version grows.",553efe10c5743aff,https://github.com/ServiceWeaver/weaver/issues/355,"{'number': 355, 'state': 'closed', 'labels': [], 'created_at': '2023-05-25T03:02:19Z', 'closed_at': '2023-08-07T17:07:47Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/355/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-05-25. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_350,2023-05-19T01:02:44Z,"weaver multi deploy problem\n\nenvirement:
go version: 1.20.4 windows/amd64
weaver: v0.10.0

issue:
1. i follow the guide (https://serviceweaver.dev/docs.html#step-by-step-tutorial) locally .  everything is fine, until ""weaver multi deploy weaver.toml"" . there is is issue message ""start main process: unknown component ""github.com/ServiceWeaver/weaver/Main""
""
2. to find the answer,  i git clone the source code (https://github.com/ServiceWeaver/weaver) , go to example/hello(https://github.com/ServiceWeaver/weaver/tree/main/examples/hello) . then run ""weaver multi deploy weaver.toml "" . it run correctly . 

help:
who can tell me which wrong ? thanks.

my source tree:
![image](https://github.com/ServiceWeaver/weaver/assets/1647038/69198087-6242-438a-a3d7-940a9db607e7)


go.mod content:
```
module hello

go 1.20

require (
	github.com/ServiceWeaver/weaver v0.10.0
	go.opentelemetry.io/otel v1.15.1
	go.opentelemetry.io/otel/trace v1.15.1
)

require (
	github.com/BurntSushi/toml v1.2.0 // indirect
	github.com/DataDog/hyperloglog v0.0.0-20220214164406-974598347557 // indirect
	github.com/antlr/antlr4/runtime/Go/antlr v0.0.0-20220418222510-f25a4f6275ed // indirect
	github.com/dustin/go-humanize v1.0.0 // indirect
	github.com/fsnotify/fsnotify v1.5.4 // indirect
	github.com/go-logr/logr v1.2.4 // indirect
	github.com/go-logr/stdr v1.2.2 // indirect
	github.com/google/cel-go v0.12.5 // indirect
	github.com/google/pprof v0.0.0-20221118152302-e6195bd50e26 // indirect
	github.com/google/uuid v1.3.0 // indirect
	github.com/hashicorp/golang-lru/v2 v2.0.1 // indirect
	github.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51 // indirect
	github.com/lightstep/varopt v1.3.0 // indirect
	github.com/mattn/go-isatty v0.0.16 // indirect
	github.com/pkg/browser v0.0.0-20210911075715-681adbf594b8 // indirect
	github.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec // indirect
	github.com/stoewer/go-strcase v1.2.0 // indirect
	go.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.7.0 // indirect
	go.opentelemetry.io/otel/sdk v1.11.1 // indirect
	golang.org/x/exp v0.0.0-20230425010034-47ecfdc1ba53 // indirect
	golang.org/x/mod v0.6.0 // indirect
	golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4 // indirect
	golang.org/x/sys v0.1.0 // indirect
	golang.org/x/term v0.0.0-20210927222741-03fcf44c2211 // indirect
	golang.org/x/text v0.7.0 // indirect
	golang.org/x/tools v0.2.0 // indirect
	google.golang.org/genproto v0.0.0-20221109142239-94d6d90a7d66 // indirect
	google.golang.org/protobuf v1.28.1 // indirect
	lukechampine.com/uint128 v1.2.0 // indirect
	modernc.org/cc/v3 v3.40.0 // indirect
	modernc.org/ccgo/v3 v3.16.13 // indirect
	modernc.org/libc v1.22.3 // indirect
	modernc.org/mathutil v1.5.0 // indirect
	modernc.org/memory v1.5.0 // indirect
	modernc.org/opt v0.1.3 // indirect
	modernc.org/sqlite v1.21.0 // indirect
	modernc.org/strutil v1.1.3 // indirect
	modernc.org/token v1.0.1 // indirect
)

```


go.sum content:

```
github.com/BurntSushi/toml v1.2.0 h1:Rt8g24XnyGTyglgET/PRUNlrUeu9F5L+7FilkXfZgs0=
github.com/BurntSushi/toml v1.2.0/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=
github.com/DataDog/hyperloglog v0.0.0-20220214164406-974598347557 h1:t+/ZxFkPEVJYvbKbk4suUhKFuCy3C8rg3tuP6Oj/Zyk=
github.com/DataDog/hyperloglog v0.0.0-20220214164406-974598347557/go.mod h1:hFPkswc42pKhRbeKDKXy05mRi7J1kJ2vMNbvd9erH0M=
github.com/DataDog/mmh3 v0.0.0-20210722141835-012dc69a9e49 h1:EbzDX8HPk5uE2FsJYxD74QmMw0/3CqSKhEr6teh0ncQ=
github.com/ServiceWeaver/weaver v0.10.0 h1:4sUrQb07ndYucdGQ+A4GiKZ7sOKfxVOsOJH+X9X/hPE=
github.com/ServiceWeaver/weaver v0.10.0/go.mod h1:UyeqUiz44uI227JFrJjt9KYqcqnWGEj6TjzKgrvWUek=
github.com/antlr/antlr4/runtime/Go/antlr v0.0.0-20220418222510-f25a4f6275ed h1:ue9pVfIcP+QMEjfgo/Ez4ZjNZfonGgR6NgjMaJMu1Cg=
github.com/antlr/antlr4/runtime/Go/antlr v0.0.0-20220418222510-f25a4f6275ed/go.mod h1:F7bn7fEU90QkQ3tnmaTx3LTKLEDqnwWODIYppRQ5hnY=
github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
github.com/dustin/go-humanize v1.0.0 h1:VSnTsYCnlFHaM2/igO1h6X3HA71jcobQuxemgkq4zYo=
github.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
github.com/dustin/randbo v0.0.0-20140428231429-7f1b564ca724 h1:1/c0u68+2LRI+XSpduQpV9BnKx1k1P6GTb3MVxCE3w4=
github.com/fsnotify/fsnotify v1.5.4 h1:jRbGcIw6P2Meqdwuo0H1p6JVLbL5DHKAKlYndzMwVZI=
github.com/fsnotify/fsnotify v1.5.4/go.mod h1:OVB6XrOHzAwXMpEM7uPOzcehqUV2UqJxmVXmkdnm1bU=
github.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
github.com/go-logr/logr v1.2.3/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
github.com/go-logr/logr v1.2.4 h1:g01GSCwiDw2xSZfjJ2/T9M+S6pFdcNtFYsp+Y43HYDQ=
github.com/go-logr/logr v1.2.4/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
github.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=
github.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=
github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
github.com/golang/protobuf v1.5.2 h1:ROPKBNFfQgOUMifHyP+KYbvpjbdoFNs+aK7DXlji0Tw=
github.com/google/cel-go v0.12.5 h1:DmzaiSgoaqGCjtpPQWl26/gND+yRpim56H1jCVev6d8=
github.com/google/cel-go v0.12.5/go.mod h1:Jk7ljRzLBhkmiAwBoUxB1sZSCVBAzkqPF25olK/iRDw=
github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
github.com/google/go-cmp v0.5.7/go.mod h1:n+brtR0CgQNWTVd5ZUFpTBC8YFBDLK/h/bpaJ8/DtOE=
github.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=
github.com/google/pprof v0.0.0-20221118152302-e6195bd50e26 h1:Xim43kblpZXfIBQsbuBVKCudVG457BR2GZFIz3uw3hQ=
github.com/google/pprof v0.0.0-20221118152302-e6195bd50e26/go.mod h1:dDKJzRmX4S37WGHujM7tX//fmj1uioxKzKxz3lo4HJo=
github.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=
github.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
github.com/hashicorp/golang-lru/v2 v2.0.1 h1:5pv5N1lT1fjLg2VQ5KWc7kmucp2x/kvFOnxuVTqZ6x4=
github.com/hashicorp/golang-lru/v2 v2.0.1/go.mod h1:QeFd9opnmA6QUJc5vARoKUSoFhyfM2/ZepoAG6RGpeM=
github.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51 h1:Z9n2FFNUXsshfwJMBgNA0RU6/i7WVaAegv3PtuIHPMs=
github.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51/go.mod h1:CzGEWj7cYgsdH8dAjBGEr58BoE7ScuLd+fwFZ44+/x8=
github.com/lightstep/varopt v1.3.0 h1:H7OhtEBhYyDhoMu+wJGl4mTqM9TrYYdThG+xLGU3fZQ=
github.com/lightstep/varopt v1.3.0/go.mod h1:3GP18zB7pfvbVUAnJ8xfvYjpwp0CF027QRD5FsfXau0=
github.com/mattn/go-isatty v0.0.16 h1:bq3VjFmv/sOjHtdEhmkEV4x1AJtvUvOJ2PFAZ5+peKQ=
github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
github.com/mattn/go-sqlite3 v1.14.16 h1:yOQRA0RpS5PFz/oikGwBEqvAWhWg5ufRz4ETLjwpU1Y=
github.com/pkg/browser v0.0.0-20210911075715-681adbf594b8 h1:KoWmjvw+nsYOo29YJK9vDA65RGE3NrOnUtO7a+RF9HU=
github.com/pkg/browser v0.0.0-20210911075715-681adbf594b8/go.mod h1:HKlIX3XHQyzLZPlr7++PzdhaXEj94dEiJgZDTsxEqUI=
github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/remyoudompheng/bigfft v0.0.0-20200410134404-eec4a21b6bb0/go.mod h1:qqbHyh8v60DhA7CoWK5oRCqLrMHRGoxYCSS9EjAz6Eo=
github.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec h1:W09IVJc94icq4NjY3clb7Lk8O1qJ8BdBEF8z0ibU0rE=
github.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec/go.mod h1:qqbHyh8v60DhA7CoWK5oRCqLrMHRGoxYCSS9EjAz6Eo=
github.com/stoewer/go-strcase v1.2.0 h1:Z2iHWqGXH00XYgqDmNgQbIBxf3wrNq0F3feEy0ainaU=
github.com/stoewer/go-strcase v1.2.0/go.mod h1:IBiWB2sKIp3wVVQ3Y035++gc+knqhUQag1KpM8ahLw8=
github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=
github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/stretchr/testify v1.8.2 h1:+h33VjcLVPDHtOdpUCuF+7gSuG3yGIftsP1YvFihtJ8=
go.opentelemetry.io/otel v1.7.0/go.mod h1:5BdUoMIz5WEs0vt0CUEMtSSaTSHBBVwrhnz7+nrD5xk=
go.opentelemetry.io/otel v1.15.1 h1:3Iwq3lfRByPaws0f6bU3naAqOR1n5IeDWd9390kWHa8=
go.opentelemetry.io/otel v1.15.1/go.mod h1:mHHGEHVDLal6YrKMmk9LqC4a3sF5g+fHfrttQIB1NTc=
go.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.7.0 h1:8hPcgCg0rUJiKE6VWahRvjgLUrNl7rW2hffUEPKXVEM=
go.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.7.0/go.mod h1:K4GDXPY6TjUiwbOh+DkKaEdCF8y+lvMoM6SeAPyfCCM=
go.opentelemetry.io/otel/sdk v1.7.0/go.mod h1:uTEOTwaqIVuTGiJN7ii13Ibp75wJmYUDe374q6cZwUU=
go.opentelemetry.io/otel/sdk v1.11.1 h1:F7KmQgoHljhUuJyA+9BiU+EkJfyX5nVVF4wyzWZpKxs=
go.opentelemetry.io/otel/sdk v1.11.1/go.mod h1:/l3FE4SupHJ12TduVjUkZtlfFqDCQJlOlithYrdktys=
go.opentelemetry.io/otel/trace v1.7.0/go.mod h1:fzLSB9nqR2eXzxPXb2JW9IKE+ScyXA48yyE4TNvoHqU=
go.opentelemetry.io/otel/trace v1.15.1 h1:uXLo6iHJEzDfrNC0L0mNjItIp06SyaBQxu5t3xMlngY=
go.opentelemetry.io/otel/trace v1.15.1/go.mod h1:IWdQG/5N1x7f6YUlmdLeJvH9yxtuJAfc4VW5Agv9r/8=
golang.org/x/exp v0.0.0-20230425010034-47ecfdc1ba53 h1:5llv2sWeaMSnA3w2kS57ouQQ4pudlXrR0dCgw51QK9o=
golang.org/x/exp v0.0.0-20230425010034-47ecfdc1ba53/go.mod h1:V1LtkGg67GoY2N1AnLN78QLrzxkLyJw7RJb1gzOOz9w=
golang.org/x/mod v0.6.0 h1:b9gGHsz9/HhJ3HF5DHQytPpuwocVTChQJK3AvoLRD5I=
golang.org/x/mod v0.6.0/go.mod h1:4mET923SAdbXp2ki8ey+zGs1SLqsuM2Y0uvdZR/fUNI=
golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4 h1:uVc8UZUe6tr40fFVnUP5Oj+veunVezqYl9z7DYw9xzw=
golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sys v0.0.0-20210423185535-09eb48e85fd7/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20210616045830-e2b7044e8c71/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.0.0-20220412211240-33da011f77ad/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.1.0 h1:kunALQeHf1/185U1i0GOB/fy1IPRDDpuoOOqRReG57U=
golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/term v0.0.0-20210927222741-03fcf44c2211 h1:JGgROgKl9N8DuW20oFS5gxc+lE67/N3FcwmBPMe7ArY=
golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
golang.org/x/text v0.7.0 h1:4BRB4x83lYWy72KwLD/qYDuTu7q9PjSagHvijDw7cLo=
golang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=
golang.org/x/tools v0.2.0 h1:G6AHpWxTMGY1KyEYoAQ5WTtIekUUvDNjan3ugu60JvE=
golang.org/x/tools v0.2.0/go.mod h1:y4OqIKeOV/fWJetJ8bXPU1sEVniLMIyDAZWeHdV+NTA=
golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
google.golang.org/genproto v0.0.0-20221109142239-94d6d90a7d66 h1:wx7sJ5GRBQLRcslTNcrTklsHhHevQvxgztW18txbbZM=
google.golang.org/genproto v0.0.0-20221109142239-94d6d90a7d66/go.mod h1:rZS5c/ZVYMaOGBfO68GWtjOw/eLaZM1X6iVtgjZ+EWg=
google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
google.golang.org/protobuf v1.28.1 h1:d0NfwRgPtno5B1Wa6L2DAG+KivqkdutMf1UhdNx175w=
google.golang.org/protobuf v1.28.1/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
lukechampine.com/uint128 v1.2.0 h1:mBi/5l91vocEN8otkC5bDLhi2KdCticRiwbdB0O+rjI=
lukechampine.com/uint128 v1.2.0/go.mod h1:c4eWIwlEGaxC/+H1VguhU4PHXNWDCDMUlWdIWl2j1gk=
modernc.org/cc/v3 v3.40.0 h1:P3g79IUS/93SYhtoeaHW+kRCIrYaxJ27MFPv+7kaTOw=
modernc.org/cc/v3 v3.40.0/go.mod h1:/bTg4dnWkSXowUO6ssQKnOV0yMVxDYNIsIrzqTFDGH0=
modernc.org/ccgo/v3 v3.16.13 h1:Mkgdzl46i5F/CNR/Kj80Ri59hC8TKAhZrYSaqvkwzUw=
modernc.org/ccgo/v3 v3.16.13/go.mod h1:2Quk+5YgpImhPjv2Qsob1DnZ/4som1lJTodubIcoUkY=
modernc.org/ccorpus v1.11.6 h1:J16RXiiqiCgua6+ZvQot4yUuUy8zxgqbqEEUuGPlISk=
modernc.org/httpfs v1.0.6 h1:AAgIpFZRXuYnkjftxTAZwMIiwEqAfk8aVB2/oA6nAeM=
modernc.org/libc v1.22.3 h1:D/g6O5ftAfavceqlLOFwaZuA5KYafKwmr30A6iSqoyY=
modernc.org/libc v1.22.3/go.mod h1:MQrloYP209xa2zHome2a8HLiLm6k0UT8CoHpV74tOFw=
modernc.org/mathutil v1.5.0 h1:rV0Ko/6SfM+8G+yKiyI830l3Wuz1zRutdslNoQ0kfiQ=
modernc.org/mathutil v1.5.0/go.mod h1:mZW8CKdRPY1v87qxC/wUdX5O1qDzXMP5TH3wjfpga6E=
modernc.org/memory v1.5.0 h1:N+/8c5rE6EqugZwHii4IFsaJ7MUhoWX07J5tC/iI5Ds=
modernc.org/memory v1.5.0/go.mod h1:PkUhL0Mugw21sHPeskwZW4D6VscE/GQJOnIpCnW6pSU=
modernc.org/opt v0.1.3 h1:3XOZf2yznlhC+ibLltsDGzABUGVx8J6pnFMS3E4dcq4=
modernc.org/opt v0.1.3/go.mod h1:WdSiB5evDcignE70guQKxYUl14mgWtbClRi5wmkkTX0=
modernc.org/sqlite v1.21.0 h1:4aP4MdUf15i3R3M2mx6Q90WHKz3nZLoz96zlB6tNdow=
modernc.org/sqlite v1.21.0/go.mod h1:XwQ0wZPIh1iKb5mkvCJ3szzbhk+tykC8ZWqTRTgYRwI=
modernc.org/strutil v1.1.3 h1:fNMm+oJklMGYfU9Ylcywl0CO5O6nTfaowNsh2wpPjzY=
modernc.org/strutil v1.1.3/go.mod h1:MEHNA7PdEnEwLvspRMtWTNnp2nnyvMfkimT1NKNAGbw=
modernc.org/tcl v1.15.1 h1:mOQwiEK4p7HruMZcwKTZPw/aqtGM4aY00uzWhlKKYws=
modernc.org/token v1.0.1 h1:A3qvTqOwexpfZZeyI0FeGPDlSWX5pjZu9hF4lU+EKWg=
modernc.org/token v1.0.1/go.mod h1:UGzOrNV1mAFSEB63lOFHIpNRUVMvYTc6yu1SMY/XTDM=
modernc.org/z v1.7.0 h1:xkDw/KepgEjeizO2sNco+hqYkU12taxQFqPEmgm1GWE=


```

weaver.toml:

```
[serviceweaver]
name = ""hellworld""
binary = ""./hello.exe""

```

other code file is same as example/hello


thanks.


\n\n--- Comments ---\nSame issue here. Editing gen file with slash seems not to work.\nHi @haroldyong! Can you try upgrading to v0.12.0 of Service Weaver and see if that fixes your problem? You can update the weaver version by updating your `go.mod` to include `github.com/ServiceWeaver/weaver v0.12.0`. You can update the tool by running `go install github.com/ServiceWeaver/weaver/cmd/weaver@v0.12.0`.

If you still run into an error, can you try running `weaver multi purge` and also share the output of `weaver multi version`?\nI'm not the author, but mb my results are helpful:
weaver multi purge, result: ""pgrep"": executable file not found in %PATH%
weaver multi version, result: weaver multi: commit=? deployer=v0.12.0 target=windows/amd64\n> Hi @haroldyong! Can you try upgrading to v0.12.0 of Service Weaver and see if that fixes your problem? You can update the weaver version by updating your `go.mod` to include `github.com/ServiceWeaver/weaver v0.12.0`. You can update the tool by running `go install github.com/ServiceWeaver/weaver/cmd/weaver@v0.12.0`.
> 
> If you still run into an error, can you try running `weaver multi purge` and also share the output of `weaver multi version`?

thanks for reply. 


i check with 0.12 , got the same error  ""start main process: unknown component ""github.com/ServiceWeaver/weaver/Main""""\ni double check the offical sample code. 

1. correct
a. cd the ""github\serviceweaver\weaver\examples\hello""
b. go build
c.  edit weaver.toml from (binary = ""./hello"") to (binary = ""./hello.exe"") 
d.  weaver multi deploy weaver.toml

2. wrong
a. cd the ""github\serviceweaver\weaver\examples\hello""
b. weaver generate
c. go build
d.  edit weaver.toml from (binary = ""./hello"") to (binary = ""./hello.exe"") 
e.  weaver multi deploy weaver.toml

that is difference between weaver_gen.go file in windows10 os.
![image](https://github.com/ServiceWeaver/weaver/assets/1647038/9f1af3fd-e246-4be9-aa21-0c259392f0c7)







\nAh, I think this problem was fixed in #351, but we haven't included that change in a release yet. I'll push out another release soon, and then ping you to try again. \nThis should be fixed now! I'll close the issue but please re-open if the problem isn't fixed.",2136537ef0c1cea2,https://github.com/ServiceWeaver/weaver/issues/350,"{'number': 350, 'state': 'closed', 'labels': [], 'created_at': '2023-05-19T01:02:44Z', 'closed_at': '2023-06-08T22:06:08Z', 'comments_count': 7, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/350/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-05-19. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_331,2023-05-15T07:42:57Z,"Error Running Latest Version of 'Weaver': Updating 'Slog' Package and 'Weaver Generate' Command Not Responding\n\n1. When using the latest version of `weaver`, an error occurs (indicating that the version of the `slog` package needs to be updated).
```bash
➜  go run .        
# github.com/ServiceWeaver/weaver
vendor/github.com/ServiceWeaver/weaver/singleprocess.go:327:66: slog.HandlerOptions{…}.NewTextHandler undefined (type slog.HandlerOptions has no field or method NewTextHandler)
vendor/github.com/ServiceWeaver/weaver/weavelet.go:112:69: slog.HandlerOptions{…}.NewTextHandler undefined (type slog.HandlerOptions has no field or method NewTextHandler)
```

2.  `weaver generate` doesn't respond for a long time and there is no output on the command line. Below is a simple reproducing code. I'm not sure if my way of opening it is correct.

go version: 1.20.4
weaver: 0.10.0\n\n--- Comments ---\nI tried using `weaver generate . ./bff` as instructed in the documentation, but it seemed to hang with no response, and I had to forcefully terminate the command using `ctrl + c`. However, I found that using `go generate weaver generate ./...` generated the code directly without any issues.\nThank you for the reply. Regarding the first question, the issue should be resolved in the next version with the merging of the pull request (#333) . However, the second question is unrelated to this particular submission. Today, I followed the official tutorial (https://serviceweaver.dev/docs.html#step-by-step-tutorial-components) and tested it (`$ weaver generate .`) in a new environment, but I still encountered the same problem (the command hangs without any response) . I attempted to debug it and it seems to be stuck at [`pkgList, err := packages.Load(cfg, pkgs...)`](https://github.com/ServiceWeaver/weaver/blob/d2179635a1d0d4d5656cd5993a0c8963c7009d26/internal/tool/generate/generator.go#L109).\nThanks for investigating further @ryan961! Sorry you're running into this problem. First, can you share the output of `weaver multi version`? 

I wasn't able to reproduce the issue locally, and our GitHub actions also run `weaver generate` without any issue, so it's a bit tricky to debug. Hanging in `packages.Load` is also strange. Is it possible that `packages.Load` is just slow for some reason? Maybe you could add a print after the `packages.Load` call and let it run for a while? If you want, you could also create a little GitHub repo that reproduces the bug, and I can try to clone it and see if I have the same issue.\nThank you. Today, I also tried testing it using github action (https://github.com/ryan961/weaverhello/actions/runs/5000742013/jobs/8958536074) and a fresh Ubuntu machine separately, but I couldn't reproduce the issue (`weaver generate .` worked fine). I suspect that it's likely an issue with my local environment (such as the usage of the package version management tool `asdf`...). For now, I will close this issue. If there is any new feedback or discoveries in the future, I will communicate them through the new issue again\nPerfect! Thanks for shepherding this issue so elegantly and contributing a fix to the original problem. Super exemplary stuff :)",d520c6e562c5d6f7,https://github.com/ServiceWeaver/weaver/issues/331,"{'number': 331, 'state': 'closed', 'labels': [], 'created_at': '2023-05-15T07:42:57Z', 'closed_at': '2023-05-17T10:08:42Z', 'comments_count': 5, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/331/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-05-15. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_323,2023-05-08T18:45:52Z,"SSH Deployer\n\nI would like to more or less finish the last features needed for the ssh deployer to learn more about the deployer architecture. I just need to know where to start to learn what the for exampel the healtz endpoint hast to deliver and what is missing.

Cheers",8449aa7d4100d043,https://github.com/ServiceWeaver/weaver/issues/323,"{'number': 323, 'state': 'closed', 'labels': [], 'created_at': '2023-05-08T18:45:52Z', 'closed_at': '2023-05-24T12:00:34Z', 'comments_count': 0, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/323/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-05-08. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_319,2023-05-05T08:43:37Z,"build failed in used latest exp\n\n```
gopath\pkg\mod\github.com\!service!weaver\weaver@v0.7.2\runtime\logging\logger.go:94:12: cannot use func(a slog.Attr) {…} (value of type func(a slog.Attr)) as func(slog.Attr) bool value in argument to rec.Attrs
```

The last `exp/slog` changed the function returns.

current version is: https://pkg.go.dev/golang.org/x/exp@v0.0.0-20230419192730-864b3d6c5c2c/slog?tab=versions#:~:text=v0.0.0%2D20230321023759%2D10a507213a29
latest version is: https://pkg.go.dev/golang.org/x/exp@v0.0.0-20230419192730-864b3d6c5c2c/slog?tab=versions#:~:text=v0.0.0%2D20230425010034%2D47ecfdc1ba53

",e9d13e9ac32b1833,https://github.com/ServiceWeaver/weaver/issues/319,"{'number': 319, 'state': 'closed', 'labels': [], 'created_at': '2023-05-05T08:43:37Z', 'closed_at': '2023-05-05T23:35:45Z', 'comments_count': 0, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/319/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-05-05. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_303,2023-04-27T12:27:17Z,"Ref is unresolved type\n\nHello! I tried to run hello example, but had error.

I used go-code from ""step by step"" article - https://serviceweaver.dev/docs.html#installation:~:text=executed%20as%20RPCs.-,Multiple%20Components,-In%20a%20Service

```
package main

import (
    ""context""
    ""fmt""
    ""log""

    ""github.com/ServiceWeaver/weaver""
)

func main() {
    if err := weaver.Run(context.Background(), serve); err != nil {
        log.Fatal(err)
    }
}

type app struct{
    weaver.Implements[weaver.Main]
    reverser weaver.Ref[Reverser]
}

func serve(ctx context.Context, app *app) error {
    // Call the Reverse method.
    var r Reverser = app.reverser.Get()
    reversed, err := r.Reverse(ctx, ""!dlroW ,olleH"")
    if err != nil {
        return err
    }
    fmt.Println(reversed)
    return nil
}
```

My IDE said me about `reverser weaver.Ref[Reverser]`, that Ref is unresolved type. Also in hello example in repo there is other code.\n\n--- Comments ---\nAh, good catch. We're currently changing some APIs and haven't been diligent about updating the go module version. The website's code was using an API not yet on the latest downloadable version of the API. We'll resolve this shortly and things should be working again.\nHi @olezhek28, if you upgrade to the latest weaver version (by running `go install github.com/ServiceWeaver/weaver/cmd/weaver@latest` and by updating the version in your `go.mod` to `@latest`), do things work now?\nI'm closing this issue, but feel free to re-open if the problem persists.",48d25ecaf65a91b0,https://github.com/ServiceWeaver/weaver/issues/303,"{'number': 303, 'state': 'closed', 'labels': ['bug'], 'created_at': '2023-04-27T12:27:17Z', 'closed_at': '2023-06-27T00:21:44Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/303/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-27. Resolution: acknowledged_not_fixed (state=closed, labels=['bug']). Root cause: unclear (code=)"
github_issue,gh_issue_302,2023-04-27T12:22:38Z,"Application hello error: capture stdout: EOF\n\nHello! I tried to run hello example, but had error.

`weaver multi deploy weaver.toml`
`Application hello error: capture stdout: EOF`

I used Apple Macbook M1.

**weaver.toml**
```
[serviceweaver]
binary = ""./hello""
```

**main.go**
```
package main

import (
	""context""
	""fmt""
	""net/http""

	""github.com/ServiceWeaver/weaver""
)

func main() {
	weaver.Run(context.Background(), serve)
}

//go:generate ../../cmd/weaver/weaver generate

type server struct {
	weaver.Implements[weaver.Main]
}

func serve(ctx context.Context, s *server) error {
	// Get a client to the Reverser component.
	reverser, err := weaver.Get[Reverser](s)
	if err != nil {
		return err
	}

	// Get a network listener on address ""localhost:12345"".
	opts := weaver.ListenerOptions{LocalAddress: ""localhost:12345""}
	lis, err := s.Listener(""hello"", opts)
	if err != nil {
		return err
	}
	fmt.Printf(""hello listener available on %v\n"", lis)

	// Serve the /hello endpoint.
	http.Handle(""/hello"", weaver.InstrumentHandlerFunc(""hello"",
		func(w http.ResponseWriter, r *http.Request) {
			reversed, err := reverser.Reverse(r.Context(), r.URL.Query().Get(""name""))
			if err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
			fmt.Fprintf(w, ""Hello, %s!\n"", reversed)
		}))
	return http.Serve(lis, nil)
}

```

**reverser.go**
```
package main

import (
	""context""

	""github.com/ServiceWeaver/weaver""
)

// Reverser component.
type Reverser interface {
	Reverse(context.Context, string) (string, error)
}

// Implementation of the Reverser component.
type reverser struct {
	weaver.Implements[Reverser]
}

func (r *reverser) Reverse(_ context.Context, s string) (string, error) {
	runes := []rune(s)
	n := len(runes)
	for i := 0; i < n/2; i++ {
		runes[i], runes[n-i-1] = runes[n-i-1], runes[i]
	}
	return string(runes), nil
}
```\n\n--- Comments ---\nHi @olezhek28, can you do the following. 

1. Share the output of `weaver multi version`. 
2. Share the version of the weaver module in your `go.mod` file? 
3. Run `weaver multi purge`.
4. Re-run the app. 
5. After it crashes, share the output of `weaver multi logs --system`.\n1. weaver multi: commit=? deployer=v0.6.0 target=darwin/arm64 version
2. 
```
module service_weaver

go 1.20

require github.com/ServiceWeaver/weaver v0.6.1

require (
	github.com/BurntSushi/toml v1.2.0 // indirect
	github.com/DataDog/hyperloglog v0.0.0-20220214164406-974598347557 // indirect
	github.com/antlr/antlr4/runtime/Go/antlr v0.0.0-20220418222510-f25a4f6275ed // indirect
	github.com/dustin/go-humanize v1.0.0 // indirect
	github.com/fsnotify/fsnotify v1.5.4 // indirect
	github.com/go-logr/logr v1.2.3 // indirect
	github.com/go-logr/stdr v1.2.2 // indirect
	github.com/google/cel-go v0.12.5 // indirect
	github.com/google/pprof v0.0.0-20221118152302-e6195bd50e26 // indirect
	github.com/google/uuid v1.3.0 // indirect
	github.com/hashicorp/golang-lru/v2 v2.0.1 // indirect
	github.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51 // indirect
	github.com/lightstep/varopt v1.3.0 // indirect
	github.com/mattn/go-isatty v0.0.16 // indirect
	github.com/pkg/browser v0.0.0-20210911075715-681adbf594b8 // indirect
	github.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec // indirect
	github.com/stoewer/go-strcase v1.2.0 // indirect
	go.opentelemetry.io/otel v1.13.0 // indirect
	go.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.7.0 // indirect
	go.opentelemetry.io/otel/sdk v1.11.1 // indirect
	go.opentelemetry.io/otel/trace v1.13.0 // indirect
	golang.org/x/exp v0.0.0-20230321023759-10a507213a29 // indirect
	golang.org/x/mod v0.6.0 // indirect
	golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4 // indirect
	golang.org/x/sys v0.1.0 // indirect
	golang.org/x/term v0.0.0-20210927222741-03fcf44c2211 // indirect
	golang.org/x/text v0.7.0 // indirect
	golang.org/x/tools v0.2.0 // indirect
	google.golang.org/genproto v0.0.0-20221109142239-94d6d90a7d66 // indirect
	google.golang.org/protobuf v1.28.1 // indirect
	lukechampine.com/uint128 v1.2.0 // indirect
	modernc.org/cc/v3 v3.40.0 // indirect
	modernc.org/ccgo/v3 v3.16.13 // indirect
	modernc.org/libc v1.22.3 // indirect
	modernc.org/mathutil v1.5.0 // indirect
	modernc.org/memory v1.5.0 // indirect
	modernc.org/opt v0.1.3 // indirect
	modernc.org/sqlite v1.21.0 // indirect
	modernc.org/strutil v1.1.3 // indirect
	modernc.org/token v1.0.1 // indirect
)

```

3. 
```
weaver multi purge
WARNING: You are about to kill all processes which match the following regex:                                                                                                                                                                 

    weaver multi (dashboard|deploy|logs|profile)

This currently includes the following processes:

        (no matching processes found)
    
You will also delete the following paths used to store logs and data for
""weaver multi"" Service Weaver applications. This data will be deleted
immediately and irrevocably. Are you sure you want to proceed?""

    - /var/folders/rq/dxk00vbd56q8qn7dv8f3lzn40000gp/T/serviceweaver/logs/weaver-multi
    - /Users/okozyrev/.local/share/serviceweaver/multi_registry
    - /Users/okozyrev/.local/share/serviceweaver/perfetto_multi.db

Enter (y)es to continue: y

exit status 2: pkill: illegal option -- e
usage: pkill [-signal] [-ILfilnovx] [-F pidfile] [-G gid]
             [-P ppid] [-U uid] [-g pgrp] [-t tty] [-u euid]
             pattern ...

```

4. success

5.
```
D0502 10:37:09.904803 weavelet 0368374f weavelet.go:297] i logs --system                                                                                                                                                        1 ✘  took 44s   at 10:37:54  
┌ weavelet 0368374f-4d6d-4e90-967a-1bd2baa8a178 started ┐
│   hostname   : mbp-okozyrev-OZON-FVFFK3TZQ05N         │
│   deployment : 301aab27-7f0b-4d60-91e7-753ff1151a49   │
│   address    : tcp://127.0.0.1:58589                  │
│   pid        : 21452                                  │
└───────────────────────────────────────────────────────┘ serviceweaver/system=""""
D0502 10:37:09.905121 weavelet 0368374f weavelet.go:307] Registering component... component=""github.com/ServiceWeaver/weaver/Main"" serviceweaver/system=""""
D0502 10:37:09.905093 weavelet 0368374f weavelet.go:429] UpdateComponents components=""[github.com/ServiceWeaver/weaver/Main]"" serviceweaver/system=""""
D0502 10:37:09.905267 weavelet 0368374f weavelet.go:534] Constructing component component=""github.com/ServiceWeaver/weaver/Main"" serviceweaver/system=""""
D0502 10:37:09.905315 weavelet 0368374f weavelet.go:539] Constructing component succeeded component=""github.com/ServiceWeaver/weaver/Main"" serviceweaver/system=""""
D0502 10:37:09.923406 weavelet 00dbbed7 weavelet.go:297] 
┌ weavelet 00dbbed7-d330-40d0-a4be-13729bd365ee started ┐
│   hostname   : mbp-okozyrev-OZON-FVFFK3TZQ05N         │
│   deployment : 301aab27-7f0b-4d60-91e7-753ff1151a49   │
│   address    : tcp://127.0.0.1:58590                  │
│   pid        : 21453                                  │
└───────────────────────────────────────────────────────┘ serviceweaver/system=""""
D0502 10:37:09.923448 weavelet 00dbbed7 weavelet.go:307] Registering component... component=""github.com/ServiceWeaver/weaver/Main"" serviceweaver/system=""""
D0502 10:37:09.923567 weavelet 00dbbed7 weavelet.go:429] UpdateComponents components=""[github.com/ServiceWeaver/weaver/Main]"" serviceweaver/system=""""
D0502 10:37:09.923609 weavelet 00dbbed7 weavelet.go:534] Constructing component component=""github.com/ServiceWeaver/weaver/Main"" serviceweaver/system=""""
D0502 10:37:09.923631 weavelet 00dbbed7 weavelet.go:539] Constructing component succeeded component=""github.com/ServiceWeaver/weaver/Main"" serviceweaver/system=""""
D0502 10:37:09.923868 weavelet 0368374f weavelet.go:456] Updating routing info... component=""github.com/ServiceWeaver/weaver/Main"" local=""true"" replicas=""[]"" serviceweaver/system=""""
D0502 10:37:09.923883 weavelet 0368374f weavelet.go:461] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/Main"" local=""true"" replicas=""[]"" serviceweaver/system=""""
D0502 10:37:09.923958 weavelet 0368374f weavelet.go:315] Registering component succeeded component=""github.com/ServiceWeaver/weaver/Main"" serviceweaver/system=""""
D0502 10:37:09.923966 weavelet 0368374f weavelet.go:307] Registering component... component=""service_weaver/hello/Reverser"" serviceweaver/system=""""
D0502 10:37:09.923984 weavelet 00dbbed7 weavelet.go:456] Updating routing info... component=""github.com/ServiceWeaver/weaver/Main"" local=""true"" replicas=""[]"" serviceweaver/system=""""
D0502 10:37:09.923993 weavelet 00dbbed7 weavelet.go:461] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/Main"" local=""true"" replicas=""[]"" serviceweaver/system=""""
D0502 10:37:09.924037 weavelet 00dbbed7 weavelet.go:315] Registering component succeeded component=""github.com/ServiceWeaver/weaver/Main"" serviceweaver/system=""""
D0502 10:37:09.924045 weavelet 00dbbed7 weavelet.go:307] Registering component... component=""service_weaver/hello/Reverser"" serviceweaver/system=""""
D0502 10:37:09.924105 weavelet 0368374f weavelet.go:456] Updating routing info... component=""service_weaver/hello/Reverser"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0502 10:37:09.924117 weavelet 0368374f weavelet.go:461] Updating routing info succeeded component=""service_weaver/hello/Reverser"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0502 10:37:09.924153 weavelet 0368374f weavelet.go:456] Updating routing info... component=""service_weaver/hello/Reverser"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0502 10:37:09.924162 weavelet 0368374f weavelet.go:461] Updating routing info succeeded component=""service_weaver/hello/Reverser"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0502 10:37:09.939392 weavelet cf532938 weavelet.go:297] 
┌ weavelet cf532938-a384-4126-b14f-7e891f8bb880 started ┐
│   hostname   : mbp-okozyrev-OZON-FVFFK3TZQ05N         │
│   deployment : 301aab27-7f0b-4d60-91e7-753ff1151a49   │
│   address    : tcp://127.0.0.1:58592                  │
│   pid        : 21454                                  │
└───────────────────────────────────────────────────────┘ serviceweaver/system=""""
D0502 10:37:09.939406 weavelet 0368374f weavelet.go:456] Updating routing info... component=""service_weaver/hello/Reverser"" local=""false"" replicas=""[tcp://127.0.0.1:58592]"" serviceweaver/system=""""
D0502 10:37:09.939422 weavelet 0368374f weavelet.go:461] Updating routing info succeeded component=""service_weaver/hello/Reverser"" local=""false"" replicas=""[tcp://127.0.0.1:58592]"" serviceweaver/system=""""
D0502 10:37:09.939537 weavelet cf532938 weavelet.go:429] UpdateComponents components=""[service_weaver/hello/Reverser]"" serviceweaver/system=""""
D0502 10:37:09.939574 weavelet cf532938 weavelet.go:534] Constructing component component=""service_weaver/hello/Reverser"" serviceweaver/system=""""
D0502 10:37:09.939605 weavelet cf532938 weavelet.go:539] Constructing component succeeded component=""service_weaver/hello/Reverser"" serviceweaver/system=""""
D0502 10:37:09.952354 weavelet 7e810dd6 weavelet.go:297] 
┌ weavelet 7e810dd6-79f8-46b0-8925-246ba96df10f started ┐
│   hostname   : mbp-okozyrev-OZON-FVFFK3TZQ05N         │
│   deployment : 301aab27-7f0b-4d60-91e7-753ff1151a49   │
│   address    : tcp://127.0.0.1:58593                  │
│   pid        : 21455                                  │
└───────────────────────────────────────────────────────┘ serviceweaver/system=""""
D0502 10:37:09.952461 weavelet 0368374f weavelet.go:456] Updating routing info... component=""service_weaver/hello/Reverser"" local=""false"" replicas=""[tcp://127.0.0.1:58592 tcp://127.0.0.1:58593]"" serviceweaver/system=""""
D0502 10:37:09.952480 weavelet 0368374f weavelet.go:461] Updating routing info succeeded component=""service_weaver/hello/Reverser"" local=""false"" replicas=""[tcp://127.0.0.1:58592 tcp://127.0.0.1:58593]"" serviceweaver/system=""""
D0502 10:37:09.952597 weavelet 7e810dd6 weavelet.go:429] UpdateComponents components=""[service_weaver/hello/Reverser]"" serviceweaver/system=""""
D0502 10:37:09.952644 weavelet 7e810dd6 weavelet.go:534] Constructing component component=""service_weaver/hello/Reverser"" serviceweaver/system=""""
D0502 10:37:09.952675 weavelet 7e810dd6 weavelet.go:539] Constructing component succeeded component=""service_weaver/hello/Reverser"" serviceweaver/system=""""
D0502 10:37:09.952701 weavelet 0368374f weavelet.go:315] Registering component succeeded component=""service_weaver/hello/Reverser"" serviceweaver/system=""""
D0502 10:37:09.952719 weavelet 0368374f weavelet.go:608] Creating a connection to a remote component... component=""service_weaver/hello/Reverser"" serviceweaver/system=""""
D0502 10:37:09.952810 weavelet 00dbbed7 weavelet.go:456] Updating routing info... component=""service_weaver/hello/Reverser"" local=""false"" replicas=""[tcp://127.0.0.1:58592 tcp://127.0.0.1:58593]"" serviceweaver/system=""""
D0502 10:37:09.952839 weavelet 00dbbed7 weavelet.go:461] Updating routing info succeeded component=""service_weaver/hello/Reverser"" local=""false"" replicas=""[tcp://127.0.0.1:58592 tcp://127.0.0.1:58593]"" serviceweaver/system=""""
D0502 10:37:09.952893 weavelet 00dbbed7 weavelet.go:315] Registering component succeeded component=""service_weaver/hello/Reverser"" serviceweaver/system=""""
D0502 10:37:09.952906 weavelet 00dbbed7 weavelet.go:608] Creating a connection to a remote component... component=""service_weaver/hello/Reverser"" serviceweaver/system=""""
D0502 10:37:09.959685 weavelet 0368374f weavelet.go:623] Creating connection to remote component succeeded component=""service_weaver/hello/Reverser"" serviceweaver/system=""""
D0502 10:37:09.959690 weavelet 00dbbed7 weavelet.go:623] Creating connection to remote component succeeded component=""service_weaver/hello/Reverser"" serviceweaver/system=""""
I0502 10:37:09.961280 deployer 89900713 deployer.go:465] Proxy listening address=""127.0.0.1:12345"" serviceweaver/system=""""
S0502 10:37:09.961581 stdout   0368374f                ] hello listener available on 127.0.0.1:12345
S0502 10:37:09.961673 stdout   00dbbed7                ] hello listener available on 127.0.0.1:12345
```\nAh, sweet. It looks like things are working then? I'll close the issue, but please re-open if I missed something. It also looks like the `-e` flag we're passing to `pkill` doesn't work on mac. I'll look into that.",48d25ecaf65a91b0,https://github.com/ServiceWeaver/weaver/issues/302,"{'number': 302, 'state': 'closed', 'labels': ['bug'], 'created_at': '2023-04-27T12:22:38Z', 'closed_at': '2023-05-02T16:19:03Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/302/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-27. Resolution: acknowledged_not_fixed (state=closed, labels=['bug']). Root cause: unclear (code=)"
github_issue,gh_issue_300,2023-04-27T03:56:07Z,"Looking forward to adding a tool respository.\n\nI hope to add a repository similar to 'weaver-tools' that includes useful tools such as `recovery middleware`, `compress middleware`, etc. for agile development. I'm not sure if the author has any plans to include these in the future, but if possible, I would be very interested in contributing.\n\n--- Comments ---\nHi @ryan961! I don't think we have any short term plans, but if we do start working on them, I can let you know :) Definitely feel free to start working on something!",d520c6e562c5d6f7,https://github.com/ServiceWeaver/weaver/issues/300,"{'number': 300, 'state': 'closed', 'labels': [], 'created_at': '2023-04-27T03:56:07Z', 'closed_at': '2023-04-27T17:41:08Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/300/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-27. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_276,2023-04-20T15:07:49Z,"Cannot run examples/hello out of the box\n\nEssentially I did
```zsh
git clone git@github.com:ServiceWeaver/weaver.git
cd weaver/examples/hello
go mod init hello
go mod tidy
weaver generate .
go run .
```
and got output
```
hello listener available on 127.0.0.1:12345
panic: http: multiple registrations for /healthz
```
followed by a stack trace pointing [here](https://github.com/ServiceWeaver/weaver/blob/main/examples/hello/main.go#L57).

Have I missed a step? Is it not expected that I could run the example like that? Where is that prior call to register `/healthz` happening?\n\n--- Comments ---\nWhoops! That's our bad. I'm working a quick fix, and the team is working on more thorough fix. 

The context is that the GKE deployer requires an app to export a `/healthz` endpoint. The weaver package registers a `/healthz` endpoint with the default HTTP mux:

https://github.com/ServiceWeaver/weaver/blob/59a308d4c210205b848b54db73bf9478c0523c77/weaver.go#L88-L91

We recently changed the hello app to register a `/healthz` endpoint with the mux as well, which caused the panic. For now, I'll revert the change we made to the hello app. In the longer term, we'll probably change the weaver package to not automatically register a `/healthz` endpoint at all.",cdc74e5027acff6e,https://github.com/ServiceWeaver/weaver/issues/276,"{'number': 276, 'state': 'closed', 'labels': ['bug'], 'created_at': '2023-04-20T15:07:49Z', 'closed_at': '2023-04-20T20:42:38Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/276/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-20. Resolution: acknowledged_not_fixed (state=closed, labels=['bug']). Root cause: unclear (code=)"
github_issue,gh_issue_275,2023-04-20T13:24:59Z,"Component `Deinit` method\n\nRight now I'm playing around with Service Weaver and [Dapr](https://dapr.io/). I'm trying to create Pub/Sub subscribers in `Init` but I will also need to unregister a subscriber once the component is scaled down.\n\n--- Comments ---\nHi @fkorotkov! Thanks for your suggestion and for sharing your use case. I think the idea of a `Deinit` method sounds interesting. The team can chat about it more. One challenge I think we'd have to figure out is the fact that machines can fail abruptly. In these cases, it's impossible to run the `Deinit` function. \nI think if a machine crashes no one can do anything. But in regular scaling scenario such ""graceful shutdown"" can help with smoother operation IMO.\nI think ServiceWeaver needs a `app.Shutdown(ctx) error` or `app.Cleanup(ctx) error` method on the app and on each service component so that it can grafully shutdown each service. 

And if a machine crashes it crashes and ServiceWeaver cannot do anything about it, but I think that ServiceWeaver should try to comply with k8s gracefull shutdown.

```
func main() {
	if err := weaver.Run(context.Background(), run); err != nil {
		log.Fatal(err)
	}
}

// the code below should be handled by ServiceWeaver.
func run(ctx context.Context, app *App) error {
	shutdown := make(chan os.Signal, 1)
	signal.Notify(shutdown, syscall.SIGINT, syscall.SIGTERM)

	sig := <-shutdown:
	
	return app.Shutdown(ctx)
}

```


#### k8s gracfull shutdown
* SIGTERM signal is sent to the pod
* At this point, Kubernetes waits for a specified time called the termination grace period.
 
* https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-terminating-with-grace\nI have encountered the same requirement today. So I searched and found this April issue.

I think it's very necessary to provide a mechanism like ""Deinit()"" or ""app.Shutdown()"" to notify app to do same closing work and to end the goroutines.
I hope this can be a base feature for Service Weaver.\nOne the cleanest ways I've seen is how `fx` does it.  See https://uber-go.github.io/fx/lifecycle.html

The lifecycle hook can be injected into any component in order to register startup / shutdown operations. A Shutdowner can also be injected into components which want to force the local instance to shut down.\nAdded a `Shutdown` method. Please install the latest weaver version and follow the instructions described here https://serviceweaver.dev/docs.html#components-interfaces\nWow! Thank you!\nThank you! @rgrandl ",a1246d533e7d88e7,https://github.com/ServiceWeaver/weaver/issues/275,"{'number': 275, 'state': 'closed', 'labels': ['enhancement'], 'created_at': '2023-04-20T13:24:59Z', 'closed_at': '2024-05-30T18:24:33Z', 'comments_count': 8, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/275/reactions', 'total_count': 1, '+1': 1, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-20. Resolution: acknowledged_not_fixed (state=closed, labels=['enhancement']). Root cause: unclear (code=)"
github_issue,gh_issue_270,2023-04-19T21:32:39Z,"Component initialization for subscriptions in Pub/Sub scenario\n\nIn my Pub/Sub scenario I'd like to have components that doesn't have any methods but they only subscribe to bunch of topics in `Init`. These components do call other components inside subscriptions thought.

As far as I understand this component won't be initialized until I manually get an instance of it. I probably can initialize it in `main` but I have concerns when I have multiple of such subscribe-only components.

Let's say I have 3 different components `Foo`, `Bar` and `Baz` that only subscribe to topics. If I init each one of them in `main` how does splitting will work? Does it mean that every instance of my app on different machines will init `Foo`, `Bar` and `Baz` components and subscribe to all the topics.\n\n--- Comments ---\nHi @fkorotkov, great question! 

> As far as I understand this component won't be initialized until I manually get an instance of it.

Yes, you're 100% right.

> Let's say I have 3 different components Foo, Bar and Baz that only subscribe to topics. If I init each one of them in main how does splitting will work? Does it mean that every instance of my app on different machines will init Foo, Bar and Baz components and subscribe to all the topics.

The number of replicas of every component is determined by the deployer. For example, if you `go run .` a Service Weaver application, there will only be one replica of every component. If you `weaver multi deploy` an application, there will be two replicas of every component (see #233). If you `weaver gke deploy` an application, the number of replicas will autoscale with load. I'll close this issue, but if it doesn't answer your question, please re-open it! 

If you want a deep dive into exactly how a deployer works, you can check out this blog post: https://serviceweaver.dev/blog/deployers.html\nI guess my question is still unanswered. Seems with the current architecture, in order to support Pub/Sub pattern, one will need to register all the subscribers in the `root`, therefore making every weavelet to handle all the subscriptions for the entire app which seems a bit resource wasteful.

If there would be a way to tell that a particular component always need to have at least one replica even if no one called `Get` and there will be a `Deinit` method (#275), then similar Pub/Sub scenarios will be covered.

Just want to share a use case so you might consider supporting it. 🙌

\n> I guess my question is still unanswered. Seems with the current architecture, in order to support Pub/Sub pattern, one will need to register all the subscribers in the root, therefore making every weavelet to handle all the subscriptions for the entire app which seems a bit resource wasteful.

Ah, I think I see the confusion. Calling `weaver.Get[T]` on some component `T` does not start a local instance of `T`. It ensures that some replicas of `T` are running somewhere. The exact location of where they run is determined by the deployer. So, you are free to call `weaver.Get` for all of your subscriber components. This won't make every weavelet run an instance of the components. Does that make sense?\nInteresting! I'll need to run some experiments but I think this answers my question. Thank you!\nAwesome! Please re-open the issue if you have any more questions!",a1246d533e7d88e7,https://github.com/ServiceWeaver/weaver/issues/270,"{'number': 270, 'state': 'closed', 'labels': [], 'created_at': '2023-04-19T21:32:39Z', 'closed_at': '2023-04-20T19:27:43Z', 'comments_count': 5, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/270/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-19. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_265,2023-04-18T16:36:43Z,"Support openapi.json generation\n\nSupport openapi.json or openapi.yaml output will be great.

Since it can provide http API service, can we make it Restful friendly, then how client connect with it is a question. if we have oepnapi.json we may generate typescript client for it.\n\n--- Comments ---\nHi @chinglinwen. I'm not super familiar with OpenAPI, so maybe you could elaborate more on what kind of support you think Service Weaver could provide? Is it not possible today to use OpenAPI for a Service Weaver application's HTTP server? \nI see how it is simple to write an component, I'd like to write component for RestFul HTTP API for external access say Web ( out of  microservices, can't use go for Web ).

The goal is about to provide **RestFul API** with Service Weaver ( maybe similar to an API Gateway )

Currently there's no relate tools or library about open API here, there's no mention about how Web( javascript or typescript ) to access such API ( leave it to the user, I agree one may write one themselves, but wondering if service weaver can provide extra best practices of RestFul API (eg. https://google.aip.dev/ ), guideline, library or tools for help)

- for example an easy way to generate openapi with [openapi-gen](https://github.com/kubernetes/code-generator/tree/master/cmd/openapi-gen) like tools 

```
type Adder interface {
    Add(context.Context, *http.Request) (http.ResponseWriter, error) 
}

type adder struct{
    weaver.Implements[Adder]
    weaver.Restful[Adder] // similar to this etc. 
   request struct{...}
   response struct{...}
}

func (adder) Create(_ context.Context, req *http.Request) (http.ResponseWriter, error) {
   // bind the body to some struct maybe,  say adder.request
}
```

then generate openapi with `openapi-gen`, similar to how kKubernetes does generate openapi for crd way.

just a basic thought, not sure it's a good way, but a possible way to extends library or tool to help design RestFul API?

it doesn't have to be openapi, [twirp](github.com/twitchtv/twirp), or others that can generate typescript SDK will do I think.

this way we can happily  write API with service weaver too, not just for microservice.\nAh, I see. Thanks for explaining! 

One thing to note is how [components](https://serviceweaver.dev/docs.html#step-by-step-tutorial-components) and [listeners](https://serviceweaver.dev/docs.html#step-by-step-tutorial-listeners) relate to the *private* and *public* API of an application. Components are private. They are not accessible outside an application. This is useful because it lets you change component APIs freely without worrying about breaking anything. The API exposed on a listener, however, is public. When you deploy a new version of an application, you have to be careful not break this API. 

Because of this, I think it's best *not* to generate APIs for components. Using OpenAPI for listeners makes a lot of sense, though. But, it seems like there's not much additional functionality for us to add here? Is there any friction for someone to use OpenAPI right now for their APIs? \nI don't know that Components are private. They are not accessible outside an application before.

You're right, currently it has the the freedom to do any combination of handler and component, and that's good.

And this may just a thought probe, myself don't know how to make it work better, maybe a fully customized RestFul API alone will just work.

So, agree to close this issue for now.\nSounds good. Thanks @chinglinwen ",46205dfe7a9c3e00,https://github.com/ServiceWeaver/weaver/issues/265,"{'number': 265, 'state': 'closed', 'labels': ['enhancement'], 'created_at': '2023-04-18T16:36:43Z', 'closed_at': '2023-04-24T15:56:56Z', 'comments_count': 6, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/265/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-18. Resolution: acknowledged_not_fixed (state=closed, labels=['enhancement']). Root cause: unclear (code=)"
github_issue,gh_issue_259,2023-04-14T19:28:19Z,"Are there plans to further expand the scope of GKE management capabilities?\n\nPerhaps currently only the following features are available:

1. Initializing the Kubernetes cluster and other GCP components when performing `weaver gke deploy` for the first time
2. Adding/updating pods to the Kubernetes cluster when the app is deployed
3. Delete pods when app is uninstalled

I would like to see the following features added:

1. Cleanup of all GCP components
-> For those who first encounter weaver through the tutorial, most will test it for a while and then remove the test environment.
For now, it looks like I'll probably have to clear it myself.
Wouldn't it be nice if we could explicitly do gke init/cleanup via weaver-cli?

2. Inquiry/change of GCP infrastructure resources controlled by weaver
-> Like terraform, if we can check and discern which resources are controlled by weaver, it will be helpful for ongoing infrastructure management.

What do you think about this?\n\n--- Comments ---\nThanks for your comments!

I really like (1). We already have `weaver multi purge`, I think `weaver gke purge` would be a great add-on. Is this something you'd be interested in helping with, @myyrakle ?

I like (2) as well, since right now the set of things we control is all over the place.\nThis has been partially addressed. The remaining work has been deprioritized. ",c1b812d896137800,https://github.com/ServiceWeaver/weaver/issues/259,"{'number': 259, 'state': 'closed', 'labels': [], 'created_at': '2023-04-14T19:28:19Z', 'closed_at': '2024-11-05T23:16:28Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/259/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-14. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_258,2023-04-14T11:32:09Z,"Q: Why is the ssh deployment not described in the docs?\n\nThe docs do not describe a ssh deployment using weaver. Is it not possible or should it be written?\n\n--- Comments ---\nHi @naivary! We haven't documented the SSH deployer yet because it's still missing some commands (e.g., `weaver ssh metrics`, `weaver ssh profile`, `weaver ssh purge`, `weaver ssh status`). Once we implement the commands and polish it, I think we will add it to the documentation!",8449aa7d4100d043,https://github.com/ServiceWeaver/weaver/issues/258,"{'number': 258, 'state': 'closed', 'labels': [], 'created_at': '2023-04-14T11:32:09Z', 'closed_at': '2023-04-14T16:13:16Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/258/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-14. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_249,2023-04-11T11:02:41Z,"Custom mux usage in the listener\n\nFirst of all thank you for the framework. I'm wondering how to use the custom mux with listeners like:

```go
ctx := context.Background()
root := weaver.Init(ctx)

opts := weaver.ListenerOptions{ LocalAddress: "":4001""}
listner, err := root.Listener(""greeter"", opts)

if err != nil {
    log.Fatal(err)
}

// custom mux
mux := chi.NewRouter()
mux..Get(""/"", func(w http.ResponseWriter, _ *http.Request) {
   response.Write([]bye(""Hello""))
})

http.Serve(listner, mux)
```

When I run the app, my custom routes made with mux are not working. Please let me know if we can do this and where I'm doing wrong.\n\n--- Comments ---\n```go
package main

import (
	""context""
	""log""
	""net/http""
	""os""

	""github.com/ServiceWeaver/weaver""
	chi ""github.com/go-chi/chi/v5""
)

func main() {
	if err := run(); err != nil {
		log.Fatal(err)
	}
}

func run() error {
	ctx := context.Background()
	root := weaver.Init(ctx)

	opts := weaver.ListenerOptions{LocalAddress: "":4001""}
	listner, err := root.Listener(""greeter"", opts)

	if err != nil {
		log.Fatal(err)
	}

	// custom mux
	mux := chi.NewRouter()
	mux.Get(""/hello"", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte(""hello""))
	})

	if err = http.Serve(listner, mux); err != nil {
		return err
	}

	log.Println(""Server running..."")

	return nil
}

```

This would be a working example. Copy the code and run:
```shell
go mod tidy
```

```shell
weaver generate .
```

```shell
go run .
```

Afterwards you can request the data from another shell process
```
curl localhost:4001/hello
```

Let me know if it worked. If it did help pls close the issue.

Cheers.\nThanks for the comments. I was checking at wrong endpoint. It's working and closing the issue.",8751d9cb15cf662f,https://github.com/ServiceWeaver/weaver/issues/249,"{'number': 249, 'state': 'closed', 'labels': ['author-action-required'], 'created_at': '2023-04-11T11:02:41Z', 'closed_at': '2023-04-12T06:08:15Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/249/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-11. Resolution: acknowledged_not_fixed (state=closed, labels=['author-action-required']). Root cause: unclear (code=)"
github_issue,gh_issue_248,2023-04-11T06:47:01Z,"Q: New Cloud Deployer\n\nHi,

quick question about the development of deployers. Is the weaver-gke deployer developed as described in [this](https://serviceweaver.dev/blog/deployers.html) blog or is there something else to take in concern if you someone wants to develop an ""official"" deployer to contribute to the project?

Cheers.\n\n--- Comments ---\nHi @naivary! Yup, the weaver-gke deployer is implemented using the APIs described in that blog post. In fact, here's the file that implements an `EnvelopeHandler`: https://github.com/ServiceWeaver/weaver-gke/blob/main/internal/babysitter/babysitter.go. The GKE deployer does implement some more advanced deployer features, those described in the ""Advanced Deployer Features"" section of the blog. If you want to contribute a deployer, following the blog post is definitely the way to go! ",8449aa7d4100d043,https://github.com/ServiceWeaver/weaver/issues/248,"{'number': 248, 'state': 'closed', 'labels': [], 'created_at': '2023-04-11T06:47:01Z', 'closed_at': '2023-04-11T16:10:36Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/248/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-11. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_241,2023-04-09T11:50:59Z,"GKE: Rolling update doesn't work well \n\nRolling update doesn't work well in gke.

In my opinion, if I redeploy with the same toml configuration, weaver should basically do a rolling update with no downtime.
If not, please correct me.

So, currently I have implemented the health check API in the form of ""GET /"".

And actually, the old version of the deployment is going down based on the health check.

The problem is that switching between versions of the server is not done non-disruptively.

![image](https://user-images.githubusercontent.com/16988115/230770381-9ee29867-8d76-41b3-8547-a220a42c21bc.png)

A load balancing error occurs for a while as above.
What could be the problem?

```
# weaver.toml
[serviceweaver]
name = ""weaver-start""
binary = ""./weaver-start""

[gke]
regions = [""asia-northeast3""]
public_listener = [
  {name = ""weaver-start"", hostname = ""myyrakle.com""},
]
```\n\n--- Comments ---\nHi @myyrakle,

Thanks for pointing this out, this is a known issue. As far as we can tell, we're updating the [external load-balancer](https://cloud.google.com/load-balancing/docs/https) gradually and with the right set of traffic shares, but it does error out for a brief period of time during the traffic change.

We're working on resolving this issue. And you're right, the intention is that you just set the rollout period in your configuration file and the framework ensures that the new version is deployed gradually and safely, without any service interruption.\nWe did some fixes that should make the rolling update experience much better. ",c1b812d896137800,https://github.com/ServiceWeaver/weaver/issues/241,"{'number': 241, 'state': 'closed', 'labels': [], 'created_at': '2023-04-09T11:50:59Z', 'closed_at': '2024-11-05T23:15:49Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/241/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-09. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_240,2023-04-09T11:03:47Z,"slog.Handler not implemented\n\nHi,

../../go/pkg/mod/github.com/!service!weaver/weaver@v0.3.0/runtime/logging/logger.go:85:9: cannot use h (variable of type *LogHandler) as slog.Handler value in return statement: *LogHandler does not implement slog.Handler (wrong type for method Handle)
                have Handle(slog.Record) error
                want Handle(context.Context, slog.Record) error

The handler used in the package is correct with the corresponding interface signature but the newer version of slog is using another Handle method signature. This leads to the error above. I'm doing something wrong while installing weaver on my local machine?\n\n--- Comments ---\nHi @naivary, thanks so much for reporting this. It looks like our code depends on a stale version of the `exp/slog` module from 02/06/2023:

https://github.com/ServiceWeaver/weaver/blob/2c48ca8f415cb9dba82ce28b854957512789c0e2/go.mod#L25

We'll work on updating the code to the latest version of `exp`. \nMy pleasure to contribute. I would like to contribute to the project but I have no idea where to start for the beginning to? I already read some main parts of the code and understood it (thanks for the nice written code and docs). Should I start with an issue first or try something else? Or try to update the package to use the newest version of slog?
\nHi @naivary, we updated the code to the latest version of exp. 

Contributions - Right now there are a few things you can help with:
1) Go over the issues, and see if they still make sense; In particular https://github.com/ServiceWeaver/weaver/issues/106 might be useful to address. 
2) Improving our testing coverage (just go through the code and try to add new tests where you see that they are missing/not enough)
3) While reading the code, if you find anything that can be improved (e.g., code cleanup, better code organization, we use deprecated APIs)
4) If you are more adventurous, you can read our blog post on how to write a new deployer and maybe you can try to write a simple deployer that can deploy a service weaver application in a VM, or you can improve our SSH deployer (few things in my mind: add health checks, add slow rollouts, add tests).
",8449aa7d4100d043,https://github.com/ServiceWeaver/weaver/issues/240,"{'number': 240, 'state': 'closed', 'labels': [], 'created_at': '2023-04-09T11:03:47Z', 'closed_at': '2023-05-05T23:36:23Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/240/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-09. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_239,2023-04-09T03:21:17Z,"How to deploy to multiple machines？\n\nWeaver-docs has a guide for local machine multiprocess deployment, but I don't see a guide for deployment to multiple machines。\n\n--- Comments ---\nHi @wind-c, great question. There's currently three ways to deploy a Service Weaver application to multiple machines. 

1. You can deploy an app to Google Cloud using our [GKE deployer](https://serviceweaver.dev/docs.html#gke).
2. You can deploy an app using our SSH deployer, `weaver ssh`. We haven't documented this deployer yet, since it's still a work in progress, but it does ship with the `weaver` command. For example, if you go to the [`collatz` example](https://github.com/ServiceWeaver/weaver/tree/main/examples/collatz), you can run `weaver ssh deploy weaver.toml`.
3. You can implement a new deployer that deploys to multiple machines! We recently published [a blog post on how to implement a deployer](https://serviceweaver.dev/blog/deployers.html). 

If you run into any problems with these, let us know!",9c509ebae5db9ef5,https://github.com/ServiceWeaver/weaver/issues/239,"{'number': 239, 'state': 'closed', 'labels': [], 'created_at': '2023-04-09T03:21:17Z', 'closed_at': '2023-04-10T16:11:05Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/239/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-09. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_233,2023-04-06T19:32:04Z,"Q: In a multi process deployment, can I adjust the number of replias?\n\nI'm using it according to the official documentation. I have a question because I couldn't find a part where I could set up a replica.

P.S. It would be nice to have a Discussion for Q&A...\n\n--- Comments ---\nHi @myyrakle. There is no easy way to adjust the number of replicas. Here's the code that defines the number of replicas: 

https://github.com/ServiceWeaver/weaver/blob/2c48ca8f415cb9dba82ce28b854957512789c0e2/internal/tool/multi/deployer.go#L48

If you want, you can edit the source code and recompile the `weaver` tool. 

We could allow users to configure the number of replicas. If you don't mind sharing, what were you trying to accomplish by changing the number of replicas? \n> P.S. It would be nice to have a Discussion for Q&A...

I've never used GitHub Discussions before. We have [a Google Group for Q&A right now](https://groups.google.com/g/serviceweaver), but maybe Discussions are better? What has your experience been with Discussions vs Google Groups?\nI didn't need that feature right away.
However, if the function to adjust the number of processes is provided, I think that users will be able to make the most of their resources within the limit.

What do you think of handling these values ​​in `weaver.toml`?\nPersonally, the experience of github discussion was simple and good.
And it's also very visible. 
In addition, it was nice to be able to write an article right away without additional login.\n> What do you think of handling these values ​​in weaver.toml?

We've been trying to keep config files as minimal as possible, but if we find there's a lot of desire to specify the number of replicas for a multiprocess deployment, we can definitely add it! 

> Personally, the experience of github discussion was simple and good.

Awesome, thanks so much for sharing. I'll chat with the team about enabling Discussions then. It sounds nice.
",c1b812d896137800,https://github.com/ServiceWeaver/weaver/issues/233,"{'number': 233, 'state': 'closed', 'labels': [], 'created_at': '2023-04-06T19:32:04Z', 'closed_at': '2023-04-14T19:34:47Z', 'comments_count': 5, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/233/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-06. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_224,2023-04-05T14:45:02Z,"Generate files from another package\n\nHi, I am pretty new to this project but found it very interesting!

I am working on building a hexagonal architecture structure in Go, and one of the thing I am doing is separating the ports (interface) from their corresponding concrete implementations adapters.

I was looking to compose my adapter with the weaver.Implements[T], where T is the port (interface, abstraction) which reside on another package.

There is this limitation now, of requiring the interface in the same package as the concrete implementation (when using the weaver CLI). For me that goes against the coupling and segregation concerns I want to enforce with this type of architecture. 

I was wondering if that limitation be removed in the future.

Thanks\n\n--- Comments ---\nHi @jpearll! Thanks so much for checking out the project. You're totally correct that right now we require a component interface and component implementation to be in the same package. We elaborate on this more in #98. I'll close this issue as a duplicate of #98, if that's okay with you. We'll definitely re-examine the limitation and see if it can be removed. Feel free to re-open if you have any other questions :)",8b759ff5d5bf652e,https://github.com/ServiceWeaver/weaver/issues/224,"{'number': 224, 'state': 'closed', 'labels': [], 'created_at': '2023-04-05T14:45:02Z', 'closed_at': '2023-04-05T16:07:07Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/224/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-05. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_216,2023-04-02T02:21:29Z,"why auto-generated metrics only measure remote method calls\n\nthose between two co-located components **also need metrics**

![image](https://user-images.githubusercontent.com/6802322/229327573-61c6a839-ec4a-454f-9a4d-4bb3fb936cf8.png)
\n\n--- Comments ---\nHi @junneyang! Good question. In earlier versions of the project, we actually did enable auto-generated metrics for local method calls. We removed it because we felt the overhead of updating metrics was too high for local method calls. For remote calls, this overhead is overshadowed by the overhead of performing an RPC. 

If you are sure you want to record metrics for local method calls, you can declare and maintain a set of metrics manually. I'll close this issue, but in the future we may revisit this decision. ",082b08928d90fb17,https://github.com/ServiceWeaver/weaver/issues/216,"{'number': 216, 'state': 'closed', 'labels': [], 'created_at': '2023-04-02T02:21:29Z', 'closed_at': '2023-04-03T15:51:23Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/216/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-04-02. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_209,2023-03-29T10:19:01Z,"Is there any other communication channel apart of github where ServiceWeaver usage can be discussed?\n\nHi there!

I'm learning how to work with ServiceWeaver and obviously have some questions that aren't covered in https://serviceweaver.dev.
Is there any communication channel that can be used for expertise sharing? 

Many thanks!\n\n--- Comments ---\nHi @vpakhuchyi! Thanks for checking out Service Weaver. In addition to GitHub, we have a [Google Group](https://groups.google.com/g/serviceweaver). You can also email the team directly at serviceweaver@google.com. You can find these links on our website at https://serviceweaver.dev/contact.html.",7a1e39d31ab5aeb7,https://github.com/ServiceWeaver/weaver/issues/209,"{'number': 209, 'state': 'closed', 'labels': [], 'created_at': '2023-03-29T10:19:01Z', 'closed_at': '2023-03-29T15:38:52Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/209/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-29. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_208,2023-03-29T10:11:55Z,"GKE deployment ignores regions value in weaver.toml for serviceweaver-config cluster deployment \n\nHi folks! Thanks a lot for your efforts with ServiceWeaver!

I'm learning how to work with it and specifically to deploy it to GKE.
Here is an example of my weaver.toml file:

```
[serviceweaver]
name = ""project""
binary = ""./project""

[gke]
project = ""project""
account = ""my@gmail.com""
regions = [""europe-west2""]
public_listener = [
  {name = ""project"", hostname = ""project.com""},
]

[""/.../project/components/A""]
A = ""test""
B = ""test""

[""/.../project/components/B""]
A = ""test""
B = ""test""
```

When I run the GKE deployment I see the following line:
```Creating cluster serviceweaver-config in location us-central1... Done```
After all, in GCP console I see that serviceweaver-config cluster is deployed in us-central1 region.

My project's zone:
```
➜ $ gcloud config get compute/zone
europe-west2-a
```

Is it expected that serviceweaver-config is always deployed in us-central1 and ignores weaver.toml configuration? 
If yes - why it's needed?

Thanks in advance!\n\n--- Comments ---\nCurrently, yes, the config cluster is always us-central1: https://github.com/ServiceWeaver/weaver-gke/blob/d3d4b98803fe204c58ecdd7e26c552926d247f1e/internal/gke/gke.go#L68-L69

I'll let @spetrovic77 elaborate on this :)\nThanks for filing the issue. What Michael said is correct.

A bit of background. GKE [load-balancing libraries](https://cloud.google.com/kubernetes-engine/docs/how-to/deploying-multi-cluster-gateways) require configuration from a single cluster. This cluster needs to run somewhere, hence the need to pick a single region to run it in. We just happened to pick `us-central1`.

In addition to this configuration cluster, we additionally start application clusters in each region you specify in your TOML file, i.e., `europe-west2` in your example.

Note that the configuration cluster is not on the request path for your application. It is used for configuring the load-balancers, for controling the rollouts of new application versions, and other centralized functionalities like that.

To help reduce the GKE costs for you in running this extra cluster, all of our GKE clusters run as [bare-bones](https://github.com/ServiceWeaver/weaver-gke/blob/d3d4b98803fe204c58ecdd7e26c552926d247f1e/internal/gke/deploy.go#L756) as possible.

\nHi @mwhittaker @spetrovic77, thanks for the explanation. 

I see that it doesn't affect the deployed application directly. However, I don't see any advantages of always picking the US region for the configuration cluster. 

Even more, for example, talking about development environments, it's not always important to have multi-zonal or even multi-regional resources. It's much cheaper to keep everything in a single zone/region and expand it only in further environments (alpha, beta etc). 
After all, having the possibility to configure all clusters regions/zones can bring benefits. \n@vpakhuchyi , we fixed this a while ago. We don't create a config cluster anymore. We'll deploy the service weaver services in the first region where you deploy your application.",7a1e39d31ab5aeb7,https://github.com/ServiceWeaver/weaver/issues/208,"{'number': 208, 'state': 'closed', 'labels': [], 'created_at': '2023-03-29T10:11:55Z', 'closed_at': '2024-05-30T16:54:47Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/208/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-29. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_188,2023-03-24T06:04:20Z,"How can one component talk to another one directly?\n\nI was hoping to see some possibility for injecting component references through the `Init` method or via embedding a generic interface. At the moment, the only way for component `A` to talk to component `B` is through a piece of code that contains references to the both (e.g. an HTTP handler). First, `A` gets called, then it's result gets passed to `B`. His effectively earns that the entire gluing layer can only leave in a single process at best.\n\n--- Comments ---\nHi @preslavrachev,

There should be very little restriction on which components can talk to other components and how. Could you elaborate a bit more on the issue you're seeing?

`weaver.Init` returns a ""root"" `weaver.Instance`, which can be used via `weaver.Get[Foo]` to establish a connection to an arbitrary component `Foo`. The type that implements `Foo` also embeds `weaver.Implements`, which provides its own `weaver.Instance`, which allows `Foo` to establish a connection to an arbitrary component `Bar` via `weaver.Get[Bar]`. And so on.

Really, `weaver.Instance` is just a way for us to identify which components are calling other components. (It also helps ensure that `weaver.Get` is guaranteed to be called after `weaver.Init`.) In general, `weaver.Get` should be treated as a global method that can be called from anywhere anytime, as long as you have a `weaver.Instance` around.

Hope this helps. If what I said isn't true, please share a code snippet. It's possible that our API needs to be improved to make this clearer.\n``@spetrovic77 Thanks for the thorough explanation!

> The type that implements Foo also embeds weaver.Implements, which provides its own weaver.Instance, which allows Foo to establish a connection to an arbitrary component Bar via weaver.Get[Bar]. And so on.

I was totally unaware that by embedding `weaver.Implements`, a component implicitly turns into a `weaver.Instance` too:

So, this is working now!

```go
// A component.
type A interface {
	Foo(context.Context, string) (string, error)
}

// Implementation of the A component.
type a struct {
	weaver. Implements[A]
	b B
}

func (a *a) Init(_ context.Context) {
	b, err  := weaver. Get[B](a)
	if err != nil {
           // handle the error
        }
       a.b = b
}
```

I suggest two things:

A) Add a section to the documentation that demonstrates inter-component communication (I can send a PR if you tell me where).
B) update `Init` (or come up with a new lifecycle method) so that it returns a possible error.\nYeah, you are right, the fact that `weaver.Implements` makes the implementation a `weaver.Instance` is pretty subtle. WDYT @mwhittaker ?\nI agree it's subtle. I was thinking of adding a section to the step-by-step tutorial to explain this. I think we could also improve the go docs.\nYeah, it doesn't help that our tutorial examples are one-level, i.e., main() Gets a component which in turn doesn't Get another. Maybe we can use a slightly more complex example?\nDoes this example https://github.com/ServiceWeaver/weaver/tree/main/examples/onlineboutique satisfies the above request?

@preslavrachev If you take a look here, is that what you're after? https://github.com/ServiceWeaver/weaver/blob/main/examples/onlineboutique/checkoutservice/service.go\nYeah, we have a lot of code examples, but the tutorial should also talk about this since most folks will run into it.\n@amrnt Yes, precisely.

@spetrovic77 @mwhittaker I agree with an addition to the docs. As much as the Go community keeps being divided on the topic of dependency injection, that's precisely what it is, and in the case of large, distributed applications, it is very useful.

What I am a little bit concerned about is that the way of ""pulling"" dependencies inside a component is very implicit. It is not only against the Go philosophy, but has a few general drawbacks like, how do we test components in isolation? With a regular `NewXXX` function, I can explicitly pass arguments that satisfy those dependencies. Now, I am only able to set the entire chain up with `weavertest.Init`, but that's about it. For isolated component testing, would you recommend adding an explicit constructor function that gets used for testing?

P.S. Forget my previous comment about `Init` needing to return an error. It already does - I simply had forgotten to duble-check the spec :) This might be a problem, because if someone implements `Init` incorrectly, it won't be called and this might cause a bunch of runtime issues. I'd rather have it checked at generation time (I'll open a separate issue for that).\n> What I am a little bit concerned about is that the way of ""pulling"" dependencies inside a component is very implicit. It is not only against the Go philosophy, but has a few general drawbacks like, how do we test components in isolation? With a regular `NewXXX` function, I can explicitly pass arguments that satisfy those dependencies. Now, I am only able to set the entire chain up with `weavertest.Init`, but that's about it. For isolated component testing, would you recommend adding an explicit constructor function that gets used for testing?

@preslavrachev Can you file a new issue with more details on which type of testing you'd like to do? In theory, if your component implementation doesn't use any Service Weaver APIs, you should be able to create an empty instance of the implementation and call methods on it.

If your component does call Service Weaver APIs, you can create a simple test that calls `weavertest.Init` and then `Get`s your component.

Is your concern testing component `A`, which internally calls component `B`'s methods? And you would rather not instantiate `B`, but perhaps mock while testing?

In any case, please file a new issue and we'll take a look.\nHello there,
I'm trying to achieve to implement dependency injection with service weaver.
I tried this piece of code `weaver.Get[Foo]` but I'm getting a error during compilation.

`undefined: weaver.get`

This error happens for version v0.13.0 and v0.16.0.

What versions did you use for that?\n@Markbnak I think the SW API has changed a little since the last comment here. I am not sure if this will help you, but I wrote an article on dependency injection using SW acouple of months ago: https://preslav.me/2023/05/12/golang-dependency-injection-in-google-service-weaver/

Check it out, and I'd be happy to issue an updated version if you find something that does not work.\n@preslavrachev thanks for sharing your blogpost",6ede8c0de8b4efe5,https://github.com/ServiceWeaver/weaver/issues/188,"{'number': 188, 'state': 'closed', 'labels': [], 'created_at': '2023-03-24T06:04:20Z', 'closed_at': '2023-03-28T23:25:18Z', 'comments_count': 12, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/188/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-24. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_187,2023-03-24T01:59:07Z,"weaver multi status Error\n\n![image](https://user-images.githubusercontent.com/28730421/227404938-2de35bc2-9fde-4292-b419-83fc3afef967.png)
\n\n--- Comments ---\nSeems like #189 fixed this issue? Feel free to re-open if not!",b5271b9f2e841bed,https://github.com/ServiceWeaver/weaver/issues/187,"{'number': 187, 'state': 'closed', 'labels': [], 'created_at': '2023-03-24T01:59:07Z', 'closed_at': '2023-03-24T18:37:38Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/187/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-24. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_185,2023-03-23T14:21:49Z,"How to get another component instance in component?\n\nAssume that the `Reverser` component will call another `Adder` component and I want the method call is exexuted as `RPC` instead of single process when running `weaver multi deploy` command.
I just making a few changes to the code in [tutorial](https://serviceweaver.dev/docs.html#step-by-step-tutorial) :

```golang
func (r *reverser) Reverse(ctx context.Context, s string) (string, error) {
	runes := []rune(s)
	n := len(runes)
	for i := 0; i < n/2; i++ {
		runes[i], runes[n-i-1] = runes[n-i-1], runes[i]
	}
	a, _ := weaver.Get[Adder](common.GlobalInstance(ctx))
	add, err := a.Add(ctx, rand.Int63(), rand.Int63())
	if err != nil {
		log.Fatal(err)
	}
	return fmt.Sprintf(""%s_%d"", string(runes), add), nil
}
```
`common.GlobalInstance`:
```golang
var instance weaver.Instance

var once sync.Once

func GlobalInstance(ctx context.Context) weaver.Instance {
	if instance == nil {
		once.Do(func() {
			instance = weaver.Init(ctx)
		})
	}
	return instance
}

```

The application can startup without error log, however, there is no output when I `curl 127.0.0.1:12345/hello?name=weaver`.\n\n--- Comments ---\nHi @beacon007, great question. The instance returned by `weaver.Init` should only be used by your code in `main`. Other components should not be using it. Instead, a component implementation should use itself as an instance! When you embed `weaver.Implements` inside a struct, that struct inherits methods that make it implement the `Instance` interface. You can see an example of one component invoking another here: 

https://github.com/ServiceWeaver/weaver/blob/dbe6df4ba8c063a18d41c5f51f9b70f47af67abc/weavertest/internal/simple/simple.go#L32-L50

We'll work on improving the documentation on this. I realize the go docs don't show that `weaver.Implements` implements `weaver.Instance`. I'll close this issue but feel free to re-open if you have any more questions.",1d13a75580a60b3b,https://github.com/ServiceWeaver/weaver/issues/185,"{'number': 185, 'state': 'closed', 'labels': [], 'created_at': '2023-03-23T14:21:49Z', 'closed_at': '2023-03-23T16:00:57Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/185/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-23. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_179,2023-03-21T07:32:06Z,"weaver multi deploy is failure\n\nstep1:   weaver multi deploy weaver.toml
╭───────────────────────────────────────────────────╮
│ app        : hello                                │
│ deployment : cb92a3e5-a956-46ff-86ac-269d7b09b0c9 │
╰───────────────────────────────────────────────────╯
S0321 15:16:50.243458 stdout  567250c1           ] hello listener available on 127.0.0.1:12345
S0321 15:16:50.243765 stdout  020d2067           ] hello listener available on 127.0.0.1:12345

step2: curl ""localhost:12345/hello?name=Weaver""
keep blocking

step3: weaver multi status
╭──────────────────────────────────────────────────────╮
│ DEPLOYMENTS                                          │
├───────┬──────────────────────────────────────┬───────┤
│ APP   │ DEPLOYMENT                           │ AGE   │
├───────┼──────────────────────────────────────┼───────┤
│ hello │ cb92a3e5-a956-46ff-86ac-269d7b09b0c9 │ 3m56s │
╰───────┴──────────────────────────────────────┴───────╯
╭───────────────────────────────────────────────╮
│ COMPONENTS                                    │
├───────┬────────────┬───────────┬──────────────┤
│ APP   │ DEPLOYMENT │ COMPONENT │ REPLICA PIDS │
├───────┼────────────┼───────────┼──────────────┤
│ hello │ cb92a3e5   │           │              │
│ hello │ cb92a3e5   │ main      │ 15208, 15209 │
╰───────┴────────────┴───────────┴──────────────╯
╭─────────────────────────────────────────────────╮
│ LISTENERS                                       │
├───────┬────────────┬──────────┬─────────────────┤
│ APP   │ DEPLOYMENT │ LISTENER │ ADDRESS         │
├───────┼────────────┼──────────┼─────────────────┤
│ hello │ cb92a3e5   │ hello    │ 127.0.0.1:12345 │
╰───────┴────────────┴──────────┴─────────────────╯

component only one , expect two.

\n\n--- Comments ---\nHi, can you share a bit more on which system you're running your program? Is it Windows perhaps?\nCould you also try the following steps. First, delete the following directories. Note that doing so will delete any history of any Service Weaver apps you're running locally.

```console
rm -r ~/.local/share/serviceweaver/
rm -r /tmp/serviceweaver/
```

Next, make sure that the weaver tool and the compiled Service Weaver binary are at the latest version. If your application binary is at the latest version, but the weaver multi deploy command is stale, things will break. To do this, re-run the following command:

```
go install github.com/ServiceWeaver/weaver/cmd/weaver@latest
```

And in the `go.mod` file in your application, make sure you're using the latest version of Service Weaver.

If the problem persists after all this, please let me know!\n@veterancj the issue should be fixed. If not, please reopen the issue. ",0843115b55c2c47a,https://github.com/ServiceWeaver/weaver/issues/179,"{'number': 179, 'state': 'closed', 'labels': ['author-action-required'], 'created_at': '2023-03-21T07:32:06Z', 'closed_at': '2023-05-05T23:41:42Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/179/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-21. Resolution: acknowledged_not_fixed (state=closed, labels=['author-action-required']). Root cause: unclear (code=)"
github_issue,gh_issue_171,2023-03-16T19:56:01Z,"Support for Kubernetes\n\nHi, I wanted to ask if there are plans to support Kubernetes as a deployer, I see the `gke` deployer has kubernetes in the mix, but I was wondering why pure kubernetes deploy was not part of the initial release\n\n--- Comments ---\nHi @dvaldivia,

We would love to support vanilla Kubernetes. The main reasons we launched with GKE support are:

1. GKE supports multi-region/multi-cluster applications, and
2. GKE load-balancers come with traffic-shifting capabilities.

Of the two, (2) was more important. Service Weaver makes the guarantee that a version X of an application only talks to other instances of version X. This typically means that a blue/green deployment is required (i.e., can't update Pods via rolling updates). An automated blue/green deployment strategy requires traffic shifting. Note that traffic-shifting can be achieved in vanilla Kubernetes using Istio, but we haven't done that yet.

Would you be interested in helping create a vanilla Kubernetes deployer?\nTotally, what is needed? \nI knew Weaver recently, and I'm interested in supporting a vanilla Kubernetes.

I think traffic-shifting can be supported as the following.

* Pods of main process, which is entrypoint from the external, have a same label on blue/green versions. And Service tied to Ingress is specified this label on labelSelector.
    * My understanding, this way should be the same as Argo Rollout without Istio.
* Pods of other processes are tied to the label of individual versions.

I don't understand the implementation of deployer still now, So I'll investigate to know it at first. 
\nHi Kanata,

That would be excellent! Please let us know if you need anything from us in this process. Feel free to use the GKE deployer as a reference: it uses the Go K8s libraries extensively.

Re: blue/green. I think what you suggested is good except that gradual traffic shifting isn't supported by Kubernetes constructs. In other words, it would be ideal if Ingress slowly transitions traffic from the old deployed version to the new.

At least for GKE, this support added a ton of complexity. However, perhaps for vanilla Kubernetes we should just start with an atomic switch from the old version to the new? We can worry about adding Istio or some such later, if people really care about it. WDYT?\n> Re: blue/green. I think what you suggested is good except that gradual traffic shifting isn't supported by Kubernetes constructs. In other words, it would be ideal if Ingress slowly transitions traffic from the old deployed version to the new.

Regarding the above, it is possible to be almost realized by vanilla K8s way.

For example, in case we want to forward 20% of traffic to the new version, and in case the number of `replicas` is 5, it is good to be deployed 1 new Pod and 4 old Pods.

* FYR: https://argoproj.github.io/argo-rollouts/features/canary/#overview → `Important` column

Anyway, I agree with your following opinion!

> However, perhaps for vanilla Kubernetes we should just start with an atomic switch from the old version to the new? We can worry about adding Istio or some such later, if people really care about it.\nHi @dvaldivia, @ShotaKitazawa  and all, 

We implemented a vanilla Kubernetes [deployer](https://github.com/ServiceWeaver/weaver-kube) that enables to run Service Weaver applications in any Kubernetes environment. 

The main missing piece is traffic-shifting, which we plan to add soon. We are considering using [argo rollouts](https://argoproj.github.io/rollouts/) for that. 

If you would like to try the kubernetes deployer, provide any feedback, or help us improve it, please let us know.\nI would love to see it can align with argocd and argo rollouts paradigm. As for real large application. clusters are managed by other configuration manager code. we don't really need to have the weaver command to support the whole global traffic management.\n@cloudxu, @dvaldivia, @ShotaKitazawa you can add argocd / argo in the mix. We've played around with it and it should work. Let us know if you have any other questions.",cb03ae906f707a2a,https://github.com/ServiceWeaver/weaver/issues/171,"{'number': 171, 'state': 'closed', 'labels': [], 'created_at': '2023-03-16T19:56:01Z', 'closed_at': '2024-05-30T16:56:57Z', 'comments_count': 8, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/171/reactions', 'total_count': 14, '+1': 14, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-16. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_165,2023-03-15T03:50:40Z,"Remove $ sign from docs commands\n\nthe doc has $ signs in the beginning. While its visually appealing it makes copying the command difficult.

Either we remove the dollar sign all the commands or make the copy button no copy the $ sign.

```bash
$ go run .                      # Run locally.
$ weaver gke deploy weaver.toml # Run in the cloud.
```\n\n--- Comments ---\nThanks for reporting, we have a PR in progress that fixes the issue.",365bfd0adaef8998,https://github.com/ServiceWeaver/weaver/issues/165,"{'number': 165, 'state': 'closed', 'labels': [], 'created_at': '2023-03-15T03:50:40Z', 'closed_at': '2023-03-15T23:24:28Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/165/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-15. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_159,2023-03-14T10:07:28Z,"An error occured while trying to run the exmaples by weaver gke-local deploy weaver.toml\n\nWhen i use  go install github.com/ServiceWeaver/weaver-gke/cmd/weaver-gke-local@latest and  go install github.com/ServiceWeaver/weaver/cmd/weaver@latest , to use this tutorial .
Version ""eb99fc75-e9d8-4288-bc73-65523bdb3d5a"" of app ""hello"" started successfully.
Note that stopping this binary will not affect the app in any way.
Tailing the logs...
S0314 18:01:20.394463 stderr  71addc96           ] error initializing Service Weaver: internal error creating weavelet: new weavelet conn: string field contains invalid UTF-8
S0314 18:01:20.406475 stderr  3e6318a8           ] error initializing Service Weaver: internal error creating weavelet: new weavelet conn: string field contains invalid UTF-8
S0314 18:01:20.432982 stderr  71addc96           ] error initializing Service Weaver: internal error creating weavelet: new weavelet conn: string field contains invalid UTF-8
S0314 18:01:20.447786 stderr  3e6318a8           ] error initializing Service Weaver: internal error creating weavelet: new weavelet conn: string field contains invalid UTF-8
S0314 18:01:20.475621 stderr  71addc96           ] error initializing Service Weaver: internal error creating weavelet: new weavelet conn: string field contains invalid UTF-8
 
when i use the ` weaver gke-local status`
╭──────────────────────────────────────────────────────────────────╮
│ Deployments                                                      │
├───────┬──────────────────────────────────────┬────────┬──────────┤
│ APP   │ DEPLOYMENT                           │ AGE    │ STATUS   │
├───────┼──────────────────────────────────────┼────────┼──────────┤
│ hello │ 8d0b6e69-c2fa-49c6-8f07-01d2ecc9ca7d │ 53m52s │ DELETING │
│ hello │ 60991bdc-02d8-4fb1-a6d7-124c837317cc │ 48m51s │ DELETING │
│ hello │ 6f5ce217-39a8-436c-8524-4c3865af7158 │ 47m26s │ DELETING │
│ hello │ 8942443f-2e0c-4a19-898e-15828e0ef55b │ 45m37s │ DELETING │
│ hello │ 3a46ab2a-5a2e-4486-8982-1e5d6776be98 │ 41m45s │ DELETING │
│ hello │ 45a552ba-d610-453f-930e-0f623555e1c5 │ 40m13s │ DELETING │
│ hello │ 1bac82e7-9dd3-4fa2-92a3-c31e83d5c4ea │ 33m49s │ DELETING │
│ hello │ 06d3532d-325e-4239-9417-7c464b1178f1 │ 28m36s │ DELETING │
│ hello │ a9176f47-587c-4f03-81a6-ec3a9d4155f4 │ 28m21s │ DELETING │
│ hello │ abce5cb9-d349-455c-befc-11b5e592f466 │ 27m47s │ DELETING │
│ hello │ 77088351-d631-4f49-b967-6e570fad91c4 │ 18m32s │ DELETING │
│ hello │ a48bcd83-c105-40f5-ae8d-e2e09ceafde6 │ 16m21s │ DELETING │
│ hello │ a9188e41-6a4f-4452-9511-e0ac2ac36a5e │ 14m33s │ DELETING │
│ hello │ f1353f27-52e0-4bd6-b7e4-d4742f70ce4d │ 11m21s │ DELETING │
│ hello │ e54ad469-b832-4e30-86e9-ebc4b46ecf7a │ 10m17s │ DELETING │
│ hello │ 306ba873-6bef-4110-ac46-a82a607b4c15 │ 8m15s  │ DELETING │
│ hello │ 54f956ea-effa-4584-a593-d13b2ccf7b53 │ 8m6s   │ DELETING │
│ hello │ 1c23e162-a3a5-484b-803d-1a5f713e831c │ 6m8s   │ DELETING │
│ hello │ 72972e52-6398-4140-a47c-bfffe3ec0759 │ 5m3s   │ DELETING │
│ hello │ 5193b0f1-ba8e-456e-8d7f-213e0948c226 │ 2m18s  │ DELETING │
│ hello │ eb99fc75-e9d8-4288-bc73-65523bdb3d5a │ 26s    │ ACTIVE   │
╰───────┴──────────────────────────────────────┴────────┴──────────╯
╭───────────────────────────────────────────────────╮
│ COMPONENTS                                        │
├─────┬────────────┬──────────┬───────────┬─────────┤
│ APP │ DEPLOYMENT │ LOCATION │ COMPONENT │ HEALTHY │
├─────┼────────────┼──────────┼───────────┼─────────┤
╰─────┴────────────┴──────────┴───────────┴─────────╯
╭──────────────────────────────────────────────────────────────────────────────╮
│ TRAFFIC                                                                      │
├──────┬────────────┬─────┬────────────┬──────────┬─────────┬──────────────────┤
│ HOST │ VISIBILITY │ APP │ DEPLOYMENT │ LOCATION │ ADDRESS │ TRAFFIC FRACTION │
├──────┼────────────┼─────┼────────────┼──────────┼─────────┼──────────────────┤
╰──────┴────────────┴─────┴────────────┴──────────┴─────────┴──────────────────╯
╭────────────────────────────╮
│ ROLLOUT OF hello           │
├─────────────────┬──────────┤
│                 │ us-west1 │
├─────────────────┼──────────┤
│ TIME            │ eb99fc75 │
│ Mar 14 10:01:46 │ 1.00     │
╰─────────────────┴──────────╯

curl --header 'Host: hello.com' ""localhost:8000/hello?name=Weaver""
host ""hello.com"" not found

\n\n--- Comments ---\nThis is likely caused by some breaking changes we introduced.

@kiripeng214 Are you cloning the `weaver` repo and running examples it contains? If so, could you checkout the latest stable version, which is currently v0.1.5, and re-compile the `hello` binary:

```console
$ git checkout v0.1.5
$ cd examples/hello
$ go build .
```

If you're working in your own repo on the other hand, change the `go.mod` file to depend on `weaver@0.1.5`, and re-compile the `hello` binary.

After that, please download the latest version of weaver-gke-local:

`$ go install github.com/ServiceWeaver/weaver-gke-local/cmd/weaver-gke-local@v0.1.5`

(In theory, `go install github.com/ServiceWeaver/weaver-gke-local/cmd/weaver-gke-local@latest` should work as well.)

Things should work after these steps are followed. Please let us know if they don't.



\n> This is likely caused by some breaking changes we introduced.
> 
> @kiripeng214 Are you cloning the `weaver` repo and running examples it contains? If so, could you checkout the latest stable version, which is currently v0.1.5, and re-compile the `hello` binary:
> 
> ```
> $ git checkout v0.1.5
> $ cd examples/hello
> $ go build .
> ```
> 
> If you're working in your own repo on the other hand, change the `go.mod` file to depend on `weaver@0.1.5`, and re-compile the `hello` binary.
> 
> After that, please download the latest version of weaver-gke-local:
> 
> `$ go install github.com/ServiceWeaver/weaver-gke-local/cmd/weaver-gke-local@v0.1.5`
> 
> (In theory, `go install github.com/ServiceWeaver/weaver-gke-local/cmd/weaver-gke-local@latest` should work as well.)
> 
> Things should work after these steps are followed. Please let us know if they don't.

Thanks!,it can work.",ce33ddcb8fb35d9f,https://github.com/ServiceWeaver/weaver/issues/159,"{'number': 159, 'state': 'closed', 'labels': [], 'created_at': '2023-03-14T10:07:28Z', 'closed_at': '2023-03-21T05:48:11Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/159/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-14. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_154,2023-03-13T18:34:01Z,"tutorial wont multi deploy - cant resolve local hostname\n\nthis feels like an env variable problem, but its not clear which var or how to override.

when following the tutorial, i get to the `multi deploy` phase and i get this output when trying to hit the endpoint for the first time:


> S0313 11:24:35.338221 stderr  c17304c8           ] error initializing Service Weaver: error creating internal listener: listen tcp: lookup HOSTNAME.COMPANY.com: no such host


(hostname PII redacted) 

it seems like it is trying to resolve my FQDN, but should really just be using localhost or the loopback IP.

FWIW, single deploy is working fine:

```
hello listener available on 127.0.0.1:12345
╭───────────────────────────────────────────────────╮
│ app        : hello                                │
│ deployment : ddde8609-00e3-4074-a41c-60f6fa3e4275 │
╰───────────────────────────────────────────────────╯
```

```
curl ""localhost:12345/hello?name=Weaver""
Hello, revaeW!
```\n\n--- Comments ---\nThanks @stevemcghee . It's very likely we introduced a bug with one of our recent changes. We are working on a fix. Sorry about that.\nAs a workaround for now, add you hostname to your `/etc/hosts`.
```
127.0.0.1 HOSTNAME.COMPANY.com
```\nHi @stevemcghee, can you run the following program on your machine for me and tell what it prints out? I'm working on a fix right now, but want to see if what I think is wrong is actually what's wrong.

```go
package main

import (
	""fmt""
	""net""
	""os""
)

func main() {
	// Listen on localhost.
	_, err := net.Listen(""tcp"", ""localhost:0"")
	if err != nil {
		fmt.Printf(""ERROR listening on localhost: %v\n"", err)
	} else {
		fmt.Println(""SUCCESS listening on localhost"")
	}

	// Listen on $HOSTNAME.
	host, err := os.Hostname()
	if err != nil {
		fmt.Printf(""ERROR getting hostname: %v\n"", err)
		return
	}
	_, err = net.Listen(""tcp"", host+"":0"")
	if err != nil {
		fmt.Printf(""ERROR listening on $HOSTNAME: %v\n"", err)
	} else {
		fmt.Println(""SUCCESS listening on $HOSTNAME"")
	}
}
```\n> SUCCESS listening on localhost
> ERROR listening on $HOSTNAME: listen tcp: lookup HOST.COMPANY.com: no such host

(haven't edited `/etc/hosts` at this point)\nThanks @stevemcghee! That's very helpful. I opened PR #156, which should address this issue.\nHi @stevemcghee, I merged #156 which I think should fix your problem. If it doesn't, please re-open the issue! \nHi, I have the same problem and using @latest version doesn't resolve the problem. 

running the code you provided above returns this:

> SUCCESS listening on localhost
> ERROR listening on $HOSTNAME: listen tcp: lookup ""machine name"": no such host

Any ideas? \n@ttallskog, do you mind sharing what you did and what error message you got? I'll re-open this issue and help you debug.\n@mwhittaker I was running the introduction `https://serviceweaver.dev/docs.html#step-by-step-tutorial` and failed when running command `weaver multi deploy` with the error:

hello % ~/go/bin/weaver multi deploy weaver.toml 
╭───────────────────────────────────────────────────╮
│ app        : hello                                │
│ deployment : a1668867-e51c-4bf0-a547-1c0598dd0fc2 │
╰───────────────────────────────────────────────────╯
S0321 14:15:29.033529 stderr  bf248e0a           ] error initializing Service Weaver: error creating internal listener: listen tcp: lookup _machine name_: no such host
S0321 14:15:29.034529 stderr  b196cfc8           ] error initializing Service Weaver: error creating internal listener: listen tcp: lookup _machine name_: no such host


After this I ran the code provided by you @mwhittaker with the result: 

SUCCESS listening on localhost
ERROR listening on $HOSTNAME: listen tcp: lookup _machine name_: no such host

do you need more information?\nThanks @ttallskog! And what's the version of service weaver in your `go.mod` file?\n> 

I guest `v0.1.5`, because I have also met the same issue.\nYes, it's version 0.1.5.

Den lör 25 mars 2023 16:27alvin1221 ***@***.***> skrev:

> I guest v0.1.5, because I have also met the same issue.
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/ServiceWeaver/weaver/issues/154#issuecomment-1483851034>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAG3PR6L7LCB74N3HUWT6KLW54FHLANCNFSM6AAAAAAVZONC3M>
> .
> You are receiving this because you were mentioned.Message ID:
> ***@***.***>
>
\nsame here.\nHm, here's some things I would do to debug. First, delete the following directories. Note that doing so will delete any history of any Service Weaver apps you're running locally.

```console
rm -r ~/.local/share/serviceweaver/
rm -r /tmp/serviceweaver/
```

Next, make sure that the weaver tool *and* the compiled Service Weaver binary are at the latest version. If your application binary is at the latest version, but the `weaver multi deploy` command is stale, things will break. To do this, re-run the following command:

```
go install github.com/ServiceWeaver/weaver/cmd/weaver@latest
```

And in the `go.mod` file in your application, make sure you're using the latest version of Service Weaver. 

If the problem persists after all this, please let me know!\n@stevemcghee, @ttallskog, @kazshinohara  is this still an issue for you?",82745d49b879be15,https://github.com/ServiceWeaver/weaver/issues/154,"{'number': 154, 'state': 'closed', 'labels': ['author-action-required'], 'created_at': '2023-03-13T18:34:01Z', 'closed_at': '2023-05-05T23:40:41Z', 'comments_count': 15, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/154/reactions', 'total_count': 1, '+1': 1, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-13. Resolution: acknowledged_not_fixed (state=closed, labels=['author-action-required']). Root cause: unclear (code=)"
github_issue,gh_issue_153,2023-03-13T06:07:23Z,"One component with multiple implementations\n\nAssuming I am like this now,
```go
package main

import (
	""context""
	""fmt""
	""github.com/ServiceWeaver/weaver""
)

type Adder interface {
	Add(context.Context, int, int) (int, error)
}

type adder struct {
	weaver.Implements[Adder]
}

func (a adder) Add(_ context.Context, x, y int) (int, error) {
	return x + y, nil
}

type adder2 struct {
	weaver.Implements[Adder]
}

func (a adder2) Add(_ context.Context, x, y int) (int, error) {
	return x + 2*y, nil
}

func main() {
	ctx := context.Background()
	root := weaver.Init(ctx)
	addrer, err := weaver.Get[Adder](root)
	if err != nil {
		panic(err)
	}
	sum, err := addrer.Add(ctx, 1, 2)
	if err != nil {
		panic(err)
	}
	fmt.Println(sum)
}

```

Both adder and adder2 have implemented weaver.Implements[Adder]，

run

``` shell
weaver generate.
```

it will generate a duplicate adder_local_stub struct.
```go
package main

// Code generated by ""weaver generate"". DO NOT EDIT.
import (
	""context""
	""github.com/ServiceWeaver/weaver/runtime/codegen""
	""go.opentelemetry.io/otel/codes""
	""go.opentelemetry.io/otel/trace""
	""reflect""
	""time""
)

func init() {
	codegen.Register(codegen.Registration{
		Name:        ""weaver-test/Adder"",
		Iface:       reflect.TypeOf((*Adder)(nil)).Elem(),
		New:         func() any { return &adder{} },
		LocalStubFn: func(impl any, tracer trace.Tracer) any { return adder_local_stub{impl: impl.(Adder), tracer: tracer} },
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return adder_client_stub{stub: stub, addMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: ""weaver-test/Adder"", Method: ""Add""})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return adder_server_stub{impl: impl.(Adder), addLoad: addLoad}
		},
	})
	codegen.Register(codegen.Registration{
		Name:        ""weaver-test/Adder"",
		Iface:       reflect.TypeOf((*Adder)(nil)).Elem(),
		New:         func() any { return &adder2{} },
		LocalStubFn: func(impl any, tracer trace.Tracer) any { return adder_local_stub{impl: impl.(Adder), tracer: tracer} },
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return adder_client_stub{stub: stub, addMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: ""weaver-test/Adder"", Method: ""Add""})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return adder_server_stub{impl: impl.(Adder), addLoad: addLoad}
		},
	})
}

// Local stub implementations.

type adder_local_stub struct {
	impl   Adder
	tracer trace.Tracer
}

func (s adder_local_stub) Add(ctx context.Context, a0 int, a1 int) (r0 int, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, ""main.Adder.Add"", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Add(ctx, a0, a1)
}

type adder_local_stub struct {
	impl   Adder
	tracer trace.Tracer
}

func (s adder_local_stub) Add(ctx context.Context, a0 int, a1 int) (r0 int, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, ""main.Adder.Add"", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Add(ctx, a0, a1)
}

// Client stub implementations.

type adder_client_stub struct {
	stub       codegen.Stub
	addMetrics *codegen.MethodMetrics
}

func (s adder_client_stub) Add(ctx context.Context, a0 int, a1 int) (r0 int, err error) {
	// Update metrics.
	start := time.Now()
	s.addMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, ""main.Adder.Add"", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.addMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.addMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int(a0)
	enc.Int(a1)
	var shardKey uint64

	// Call the remote method.
	s.addMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.addMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.Int()
	err = dec.Error()
	return
}

type adder_client_stub struct {
	stub       codegen.Stub
	addMetrics *codegen.MethodMetrics
}

func (s adder_client_stub) Add(ctx context.Context, a0 int, a1 int) (r0 int, err error) {
	// Update metrics.
	start := time.Now()
	s.addMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, ""main.Adder.Add"", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.addMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.addMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int(a0)
	enc.Int(a1)
	var shardKey uint64

	// Call the remote method.
	s.addMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.addMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.Int()
	err = dec.Error()
	return
}

// Server stub implementations.

type adder_server_stub struct {
	impl    Adder
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s adder_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case ""Add"":
		return s.add
	default:
		return nil
	}
}

func (s adder_server_stub) add(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int
	a0 = dec.Int()
	var a1 int
	a1 = dec.Int()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Add(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Int(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

type adder_server_stub struct {
	impl    Adder
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s adder_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case ""Add"":
		return s.add
	default:
		return nil
	}
}

func (s adder_server_stub) add(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int
	a0 = dec.Int()
	var a1 int
	a1 = dec.Int()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Add(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Int(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

```



\n\n--- Comments ---\nHi @wuqinqiang! Currently, Service Weaver does not allow you to have multiple implementations of the same component interface. Your issue brings up a great point though, that in the face of multiple implementations of the same component, `weaver generate` succeeds but produces code that does not compile. `weaver generate` should error out with a helpful message explaining that multiple implementations of the same component interface is not allowed. I'll leave this issue open until we fix that.

See #149 for a similar issue.\nThank you for your response. Looking forward to the fix.",768033841c0d2c84,https://github.com/ServiceWeaver/weaver/issues/153,"{'number': 153, 'state': 'closed', 'labels': [], 'created_at': '2023-03-13T06:07:23Z', 'closed_at': '2023-03-21T17:28:06Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/153/reactions', 'total_count': 1, '+1': 1, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-13. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_149,2023-03-11T07:28:04Z,"Having multiple implementations for an interface\n\nHi everybody,

Having an `interface` makes sense when you have multiple `implementations`.
I wondered, how can I have multiple `implementations` for an `interface/component` and choose among them?



\n\n--- Comments ---\nHi @agtabesh! Currently, there is no way to have multiple implementations of a component and choose among them.

We have thought about it before though, specifically in the context of testing. Our idea was to allow people to write weavertests and substitute a component implementation for a fake or mock component. We'll likely revisit this in the future! I'll close this issue for now, but if you have any good ideas for what this kind of change would look like, feel free to share!\nWhat about things with the same implementation, but different configuration?

Say we have 5 different databases we want to connect to. Some components would use 2, while others might only use 1 of them?",7ae3764d77860d4a,https://github.com/ServiceWeaver/weaver/issues/149,"{'number': 149, 'state': 'closed', 'labels': [], 'created_at': '2023-03-11T07:28:04Z', 'closed_at': '2023-03-11T19:07:58Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/149/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-11. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_147,2023-03-10T15:14:36Z,"extending k8s manifests\n\nIs it possible to integrate weaver with cloud-native tools ( like argocd , external DNS, sealed secrets ..... etc ) ?

for example:
- consider a scenario where we need to add an annotation to a k8s service weaver generates .
- or reverting the deployment using argocd ?
- Or reading an env param, from a specific k8s secret?\n\n--- Comments ---\nI am also interested in this point, I would like to continue to use my general methods for deploying applications (via ArgoCD and other CI/CD systems)

In general, the main question is whether this system will work correctly if you run it in its own container or whether there are requirements for kubernetes settings.\nHi @viggin543 and @batazor and all,

We implemented a vanilla Kubernetes [deployer](https://github.com/ServiceWeaver/weaver-kube) that enables to run Service Weaver applications in any Kubernetes environment.

The deployer will generate the yaml files for you, and then you can use `kubectl apply` to deploy the application. You can add annotations to the k8s services the weaver generates. 

For cloud-native tools: We are considering using [argo rollouts](https://argoproj.github.io/rollouts/) for traffic shifting. 

Which CI/CD systems do you think there are the most popular, and the community would like weaver integration with? \nHi @rgrandl , very cool. will check out the new deployer.

regarding the CI/CD tools

GitHub actions for sure.\n@rgrandl We use Argo CD/Argo Rollout - it would be cool to have some base support for this GitOps system.

We use helm/kustomize to deploy from ArgoCD - I think k8s-manifest generation is already enough to work with argocd\n> The deployer will generate the yaml files for you, and then you can use `kubectl apply` to deploy the application. You can add annotations to the k8s services the weaver generates.

@rgrandl  hello,here is question 
how add annotations  and reading an env param, from a specific k8s secret?
Manual modification weaver generate manifest yaml?\nThis is not actionable.",c81f38480b961cd4,https://github.com/ServiceWeaver/weaver/issues/147,"{'number': 147, 'state': 'closed', 'labels': [], 'created_at': '2023-03-10T15:14:36Z', 'closed_at': '2024-11-05T23:14:51Z', 'comments_count': 6, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/147/reactions', 'total_count': 4, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 4, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-10. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_146,2023-03-10T07:29:13Z,"An error occured while trying to run the exmaples by weaver multi deploy weaver.toml \n\n╭───────────────────────────────────────────────────╮
│ app        : collatz                              │
│ deployment : bb245bfa-1a97-4e0e-92b7-4e9d33d53621 │
╰───────────────────────────────────────────────────╯
S0310 15:22:06.728927 stderr  ea38724c           ] error initializing Service Weaver: internal error creating weavelet: new weavelet conn: string field contains invalid UTF-8
S0310 15:22:06.729157 stderr  303508ff           ] error initializing Service Weaver: internal error creating weavelet: new weavelet conn: string field contains invalid UTF-8
\n\n--- Comments ---\nSame here \n@llgoo, can you tells us some more details about your setup? Also, is this always happening?
\nHi @rgrandl 
The issue was caused by outdated version of `weaver`. After I reinstalled it with the latest version using the command `go install github.com/ServiceWeaver/weaver/cmd/weaver@latest`, it started working properly.\nYep that solves the problem the weaver CLI and the lib need to be the same `v0.1.3`\nGlad to hear that it worked. Closing the issue for now.",a989297bab5e4611,https://github.com/ServiceWeaver/weaver/issues/146,"{'number': 146, 'state': 'closed', 'labels': [], 'created_at': '2023-03-10T07:29:13Z', 'closed_at': '2023-03-11T21:35:07Z', 'comments_count': 5, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/146/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-10. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_145,2023-03-10T07:04:13Z,"Is there a plan for C++-weaver?\n\nThis framework is really amazing, is there any plan for developing a C++ version?\n\n--- Comments ---\nHi Collin,

This is a question that has better visibility if posted [here](https://groups.google.com/g/serviceweaver). See [this](https://groups.google.com/g/serviceweaver/c/IXcNidiiz8M) thread for discussions around multiple languages support.

If we decide to support multiple languages support, we will probably start with Java and Python. 

Thanks,
- Robert",b9ee258cde6f27d6,https://github.com/ServiceWeaver/weaver/issues/145,"{'number': 145, 'state': 'closed', 'labels': [], 'created_at': '2023-03-10T07:04:13Z', 'closed_at': '2023-03-10T17:58:20Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/145/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-10. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_142,2023-03-10T02:02:01Z,"multi delploy: component  not registered\n\nweaver config:
```
[serviceweaver]
binary = ""./hello""
colocate = [
    [""main""],
    [""com/bar/ReverserBar"", ""com/bar/ReverserFoo""],
]
```
code dir:
```
.
├── cmd
├── com
│   ├── bar
│   │   ├── bar.go
│   │   └── weaver_gen.go
│   └── foo
│       ├── foo.go
│       └── weaver_gen.go
├── go.mod
├── go.sum
├── hello
├── main.go
└── weaver.toml
```
multi delopy error:

error initializing Service Weaver: internal error creating weavelet: component ""com.bar.ReverserBar"" not registered

why? how to fixed it?\n\n--- Comments ---\nMaybe you should add the package name to the path？\n> 

go mod:
`module git-biz.qianxin-inc.cn/test/hello`

weaver generate code
```
//components  git-biz.qianxin-inc.cn/test/hello/com/bar/ReverserBar
func init() {
	codegen.Register(codegen.Registration{
		Name:  ""git-biz.qianxin-inc.cn/test/hello/com/bar/ReverserBar"",
		Iface: reflect.TypeOf((*ReverserBar)(nil)).Elem(),
		New:   func() any { return &reverser{} },
		LocalStubFn: func(impl any, tracer trace.Tracer) any {
			return reverserBar_local_stub{impl: impl.(ReverserBar), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return reverserBar_client_stub{stub: stub, reverseMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: ""git-biz.qianxin-inc.cn/test/hello/com/bar/ReverserBar"", Method: ""Reverse""})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return reverserBar_server_stub{impl: impl.(ReverserBar), addLoad: addLoad}
		},
	})
}
//components git-biz.qianxin-inc.cn/test/hello/com/foo/ReverserFoo
func init() {
	codegen.Register(codegen.Registration{
		Name:  ""git-biz.qianxin-inc.cn/test/hello/com/foo/ReverserFoo"",
		Iface: reflect.TypeOf((*ReverserFoo)(nil)).Elem(),
		New:   func() any { return &reverser{} },
		LocalStubFn: func(impl any, tracer trace.Tracer) any {
			return reverserFoo_local_stub{impl: impl.(ReverserFoo), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return reverserFoo_client_stub{stub: stub, reverseMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: ""git-biz.qianxin-inc.cn/test/hello/com/foo/ReverserFoo"", Method: ""Reverse""})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return reverserFoo_server_stub{impl: impl.(ReverserFoo), addLoad: addLoad}
		},
	})
}
```
weaver config:
```
[serviceweaver]
binary = ""./hello""
colocate = [
    [""main""],
    [""git-biz.qianxin-inc.cn/test/hello/com/bar/ReverserBar"", ""git-biz.qianxin-inc.cn/test/hello/com/bar/ReverserFoo""],
]
```
main code
```
.......
reverser_bar, err := weaver.Get[bar.ReverserBar](root)
    if err != nil {
        log.Fatal(err)
    }
    // Get a client to the Reverser component.
    reverser_foo, err := weaver.Get[foo.ReverserFoo](root)
    if err != nil {
        log.Fatal(err)
    }
    // Serve the /hello endpoint.
    http.HandleFunc(""/hello_bar"", func(w http.ResponseWriter, r *http.Request) {
        reversed, err := reverser_bar.Reverse(r.Context(), r.URL.Query().Get(""name""))
        if err != nil {
            http.Error(w, err.Error(), http.StatusInternalServerError)
        }
        fmt.Fprintf(w, ""Bar, %s!\n"", reversed)
    })
    // Serve the /hello endpoint.
    http.HandleFunc(""/hello_foo"", func(w http.ResponseWriter, r *http.Request) {
        reversed, err := reverser_foo.Reverse(r.Context(), r.URL.Query().Get(""name""))
        if err != nil {
            http.Error(w, err.Error(), http.StatusInternalServerError)
        }
        fmt.Fprintf(w, ""Foo, %s!\n"", reversed)
    })
....
```

when use command `weaver multi deploy weaver.toml `, got error logs:
```
error initializing Service Weaver: internal error creating weavelet: component ""git-biz.qianxin-inc.cn/test/hello/com/bar/ReverserFoo"" not registered
```

use code debug stack(deploy type single)
<img width=""1265"" alt=""image"" src=""https://user-images.githubusercontent.com/1990233/224245842-e178727a-38da-47e7-b066-97658754896b.png"">

thanks a lot for you.\nupdate config `git-biz.qianxin-inc.cn/test/hello/com/bar/ReverserFoo` => `git-biz.qianxin-inc.cn/test/hello/com/foo/ReverserFoo`\n> update config `git-biz.qianxin-inc.cn/test/hello/com/bar/ReverserFoo` => `git-biz.qianxin-inc.cn/test/hello/com/foo/ReverserFoo`

😅\nmy config is invalid",6a0540e0ccaaefb1,https://github.com/ServiceWeaver/weaver/issues/142,"{'number': 142, 'state': 'closed', 'labels': [], 'created_at': '2023-03-10T02:02:01Z', 'closed_at': '2023-03-10T07:29:35Z', 'comments_count': 5, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/142/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-10. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_131,2023-03-08T05:30:22Z,"running out of requesting address under performance testing\n\n### Setup

os: macOS Catalina Version 10.15.7 
go version go1.20.1 darwin/amd64
commit: 1bd05fa3de1c2526a6944e9018be6d7753973314
deploy: examples/hello weaver multi deploy weaver.toml
benchmark command: ab -n 100000 -c 8 -k http://10.79.161.90:12345/hello?name=world

### Issue:
around finishing 40000 requests, it would throw errors like ""http: proxy error: dial tcp 127.0.0.1:54178: connect: can't assign requested address""

### Investigation

* found the dial is from http proxy that launched by weaver, and default transport does not limit MaxConnsPerHost, connections were massively created when under pressure;

* tried to set transport args MaxConnsPerHost and MaxIdleConnsPerHost  to a high number, tried (100, 100), (150, 100), (100, 150), no longer seeing the same error above, but a new issue come out ""panic: net/http: internal error: connCount underflow"",  this one seems to come up intermittently,  see https://github.com/golang/go/issues/38172

* **tried the same on a Debian 5.4.143, however the issue didn't reproduce**,  it seemed to be macOS related.

### Questions
* what do you suggest to fix it?

\n\n--- Comments ---\nOkay, it seems i can no longer reproduce ""panic: net/http: internal error: connCount underflow"", probably it was under critical connection resource saturation.

for those who encounters erorr ""connect: can't assign requested address"", set MaxConnsPerHost and MaxIdleConnsPerHost 
to values like (150, 100) the DefaultTransport  in file internal/proxy/proxy.go should help.

\n@runvyang can you take another look at #144 ?\nI encountered the same problem and I seem need to set `MaxIdleConnsPerHost` as 100 to get over the problem.

I left `MaxIdleConns` as 100 as well as it is the default transport made for `httputil.ReverseProxy` is 100 see [here](https://github.com/golang/go/blob/ac85f2bedd405d64b54c3a248c9079b6cde57359/src/net/http/httputil/reverseproxy.go#L158) and [here](https://github.com/golang/go/blob/ac85f2bedd405d64b54c3a248c9079b6cde57359/src/net/http/transport.go#L50). 

@runvyang do you have time to update your PR? Otherwise, I can also come up with a similar fix.\nThis is not actionable.",24f6fbbc51c64d72,https://github.com/ServiceWeaver/weaver/issues/131,"{'number': 131, 'state': 'closed', 'labels': [], 'created_at': '2023-03-08T05:30:22Z', 'closed_at': '2024-11-05T23:14:13Z', 'comments_count': 4, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/131/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-08. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_130,2023-03-08T03:30:42Z,"weaver status: Get ""http://127.0.0.1:xxxxx/debug/serviceweaver/status"" error\n\nwhen i click `stop` button in golang idea `debug` mode, the file in `share\serviceweaver\single_registry` cannot be deleted.
In `run` mode or `ctrl + c ` is ok\n\n--- Comments ---\nbefore goland Version: 2022.3,IDE sends os.Kill signal which cannot be caught.I solved the problem by upgrading IDE version.\nif weaver services doesn't stop gracefully ,`Registry.list`will return dead registration cause`weaver status` doesn't work.
```go
// list returns all registrations, dead or alive.
func (r *Registry) list() ([]Registration, error)
```",6f7dafd7ed8b6a0c,https://github.com/ServiceWeaver/weaver/issues/130,"{'number': 130, 'state': 'closed', 'labels': [], 'created_at': '2023-03-08T03:30:42Z', 'closed_at': '2023-03-25T02:22:03Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/130/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-08. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_127,2023-03-07T12:34:25Z,"multi deploy: not supported by windows\n\nwhen I executed `weaver multi deploy weaver.toml`, it doesn't work.
config
```
[serviceweaver]
name = ""weaver""
binary = ""./weaver.exe""
```
temp/serviceweaver/logs/weaver-multiweaver..f1de7a14-6cfb-49fb-9f63-1fec84875a3b.error.log
```
,  
weaver
babysitter""$f1de7a14-6cfb-49fb-9f63-1fec84875a3b)#9N? 2error:dC:/Users/lemon/go/pkg/mod/github.com/!service!weaver/weaver@v0.1.1/internal/babysitter/babysitter.go@?Je.RunRserviceweaver/systemR RerrRSfork/exec C:\Users\lemon\GolandProjects\weaver\weaver.exe: not supported by windows,  
weaver
babysitter""$f1de7a14-6cfb-49fb-9f63-1fec84875a3b)#9N? 2error:dC:/Users/lemon/go/pkg/mod/github.com/!service!weaver/weaver@v0.1.1/internal/babysitter/babysitter.go@?Je.RunRserviceweaver/systemR RerrRSfork/exec C:\Users\lemon\GolandProjects\weaver\weaver.exe: not supported by windows
```

is weaver multiprocess does not support windows?\n\n--- Comments ---\nit's a bug and the team fixing it I guess. In the mean time you can change the name and delete files on ``/tmp/serviceweaver/logs/weaver-multi`` to try again to see if it help\n> it's a bug and the team fixing it I guess. In the mean time you can change the name and delete files on `/tmp/serviceweaver/logs/weaver-multi` to try again to see if it help

delete files doesn't work. i think  the problem is ExtraFiles is not supported on Windows.
```go
// ExtraFiles specifies additional open files to be inherited by the
// new process. It does not include standard input, standard output, or
// standard error. If non-nil, entry i becomes file descriptor 3+i.
//
// ExtraFiles is not supported on Windows.
ExtraFiles []*[os](https://pkg.go.dev/os).[File](https://pkg.go.dev/os#File)
```\nDuplicate of #81 ",6f7dafd7ed8b6a0c,https://github.com/ServiceWeaver/weaver/issues/127,"{'number': 127, 'state': 'closed', 'labels': [], 'created_at': '2023-03-07T12:34:25Z', 'closed_at': '2023-03-21T11:15:45Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/127/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-07. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_126,2023-03-07T12:24:46Z,"check if process is still alive when executing `weaver single/multi status` command\n\nwhen I manually killed components' processes and then used command `weaver single/multi status`, I found the killed pids are still presented in column `REPLICA PIDS`. The corresponding codes are in file `internal/status/status.go`:
```
// formatDeployments pretty-prints the set of components.
func formatComponents(w io.Writer, statuses []*Status) {
         ...
	for _, status := range statuses {
		...
		for _, component := range status.Components {
			prefix, _ := formatId(status.DeploymentId)
			c := logging.ShortenComponent(component.Name)
			sort.Slice(component.Pids, func(i, j int) bool {
				return component.Pids[i] < component.Pids[j]
			})
			pids := make([]string, len(component.Pids))
			for i, pid := range component.Pids {
				pids[i] = fmt.Sprint(pid)
			}
			t.Row(status.App, prefix, c, strings.Join(pids, "", ""))
		}
	}
}
```

Maybe check for process liveness is needed before assembling pids info. Glad to help if you think this optimization is needed.\n\n--- Comments ---\nHi @xwcq, great suggestion! I think if a process dies when deployed via `weaver multi deploy`, the entire deployment should be killed. This makes it easier to see when and why things are failing. We'll work on implementing that, which should also fix the issue you reported.\nOp, my mistake. This behavior is actually already implemented.",ee619fa5217b9668,https://github.com/ServiceWeaver/weaver/issues/126,"{'number': 126, 'state': 'closed', 'labels': ['enhancement'], 'created_at': '2023-03-07T12:24:46Z', 'closed_at': '2023-04-03T22:51:28Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/126/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-07. Resolution: acknowledged_not_fixed (state=closed, labels=['enhancement']). Root cause: unclear (code=)"
github_issue,gh_issue_125,2023-03-07T09:42:59Z,"Is it a bug when counting procs in the colocation group?\n\n```
// numProcsIn returns the number of processes assigned to the provided group,
// using the placement specified in the provided set of components.
func numProcsIn(group *protos.ColocationGroup, components map[string]*component) int {
	procs := map[string]bool{}
	for _, c := range components {
		if c.colocGroupName == group.Name {
			procs[c.processName] = true  
		}
	}
	return len(procs)
}
```

In the Place function, components are divided into group，and components in the same group get there processName set to the first component's component name。So in func numProcsIn, len(procs) can never be > 1\n\n--- Comments ---\nHi @collinmsn. Good find! You're absolutely right that, currently, `numProcsIn` will always return 0 or 1. In earlier versions of the code, we allowed multiple different processes to be co-located together, with communication between them done via shared memory. We disabled this feature for now but may introduce it again later. When this feature was enabled, `numProcsIn` made a lot more sense and could return a value greater than 1. 

I'll close this issue for now since there's no bug, but we are actively working on cleaning up this code. Thanks for bringing it to our attention!",b9ee258cde6f27d6,https://github.com/ServiceWeaver/weaver/issues/125,"{'number': 125, 'state': 'closed', 'labels': [], 'created_at': '2023-03-07T09:42:59Z', 'closed_at': '2023-03-07T17:33:14Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/125/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-07. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_113,2023-03-06T16:35:56Z,"deploy the application error\n\n![image](https://user-images.githubusercontent.com/54879886/223173107-734ef2d6-c501-4bc5-8c0a-8a331389a529.png)
\n\n--- Comments ---\n![image](https://user-images.githubusercontent.com/54879886/223173272-e555aa7c-1ee8-40f3-8620-aa70128a1021.png)
\nHi I got the same error but on mac 

```bash
filename ""...2f6add44-e6ff-4bff-8d89-8ebe81a69af3.error.log"" must have format ""<app>.<deployment>.<weavelet>.<level>.log""
``` 

Any idea ??\nThanks @y26s4824k264 and @alejandrojnm for filing this bug! Here's what I think is happening. 

When you `weaver multi deploy` an application, the application's logs are written to files in `/tmp/serviceweaver/logs/weaver-multi`. This following code computes the names of the log files as a concatenation of four things (the app name, the deployment id, the weavelet id, and the log level):

https://github.com/ServiceWeaver/weaver/blob/262d632dfaa2654e6e94aa4a73a0ccd8302253b7/runtime/logging/files.go#L149-L151

Elsewhere in the code, we try to parse these four things out of the filename:

https://github.com/ServiceWeaver/weaver/blob/262d632dfaa2654e6e94aa4a73a0ccd8302253b7/runtime/logging/files.go#L167-L171

By default, if you don't provide an application name, Service Weaver takes the name of the binary as the application name. So, what I think is happening is that Service Weaver is taking the name of the binary (i.e. `awesomeProject2.exe`) as the application name, but because it has a period in it, it is messing up how we parse log filenames. 

This is a bug, and we'll fix it. In the meantime, try explicitly adding an application name to your config file:

```toml
[serviceweaver]
name = ""awesomeProject2""
binary = ""./awesomeProject2.exe""
```\n@mwhittaker I put the name and I got the same error this is the toml file
```toml
[serviceweaver]
name = ""api""
binary = ""./api""
```\nDo you mind trying to delete all the log files in `/tmp/serviceweaver/logs/weaver-multi` and then trying again? The ill-formatted log file might still exist and could be messing things up.\nI don't have that in my `tmp` folder \n> I don't have that in my `tmp` folder 

Most likely if you are on a Mac it'll be under the `/var/folders` temporary directory \nOn win11, Win+R and input `%temp%`  to open the temp dir. delete all the log files is ok !\n> On win11, Win+R and input `%temp%` to open the temp dir. delete all the log files is ok !

%temp%\serviceweaver\logs\weaver-multi
it seems that weaver multi is not supported on win10\nI'm closing this issue because it seems resolved? Feel free to re-open if not.\nI think this should also be added to the official documentation(https://serviceweaver.dev/docs.html#multiprocess).
Or, would it be difficult to apply branch handling only for windows?

Currently, it is difficult to solve without looking at this issue.\nhttps://github.com/ServiceWeaver/weaver/pull/232

What do you think of processing in this form?
Are there side effects or other issues?",6e2faa9af5ef271e,https://github.com/ServiceWeaver/weaver/issues/113,"{'number': 113, 'state': 'closed', 'labels': [], 'created_at': '2023-03-06T16:35:56Z', 'closed_at': '2023-04-03T20:51:37Z', 'comments_count': 12, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/113/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-06. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_111,2023-03-06T15:31:16Z,"windows adaptation issues\n\n![image](https://user-images.githubusercontent.com/54879886/223155573-fcc825c3-fd22-4747-9f28-a6c72d6070d2.png)
![image](https://user-images.githubusercontent.com/54879886/223155650-2e3a4888-f5e1-40ec-9184-1a5e0134b94e.png)
\n\n--- Comments ---\nthe command is located on the wrong port\nI am not sure I understand. Are you saying that the `gke` deployment is listening on the same port as the `multi` deployment? \nthe port i open 是12345 and he seems to be listening in goland IDE\ndelete files on `C:\Users\Administrator\.local\share\serviceweaver\single_registry`\nFixed in #189 . Please reopen if it still doesn't work for you. ",6e2faa9af5ef271e,https://github.com/ServiceWeaver/weaver/issues/111,"{'number': 111, 'state': 'closed', 'labels': [], 'created_at': '2023-03-06T15:31:16Z', 'closed_at': '2023-05-05T23:46:52Z', 'comments_count': 5, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/111/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-06. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_108,2023-03-06T03:43:56Z,"Unable to install to the mac after go install\n\n### This framework makes me very excited to see the trend of unification, but I have encountered problems in installation

### **This is my go env configuration**
`
GO111MODULE=""""
GOARCH=""arm64""
GOBIN=""""
GOCACHE=""/Users/devops/Library/Caches/go-build""
GOENV=""/Users/devops/Library/Application Support/go/env""
GOEXE=""""
GOEXPERIMENT=""""
GOFLAGS=""""
GOHOSTARCH=""amd64""
GOHOSTOS=""darwin""
GOINSECURE=""""
GOMODCACHE=""/Users/devops/go/pkg/mod""
GONOPROXY=""""
GONOSUMDB=""""
GOOS=""darwin""
GOPATH=""/Users/devops/go""
GOPRIVATE=""""
GOPROXY=""https://goproxy.cn,direct""
GOROOT=""/usr/local/go""
GOSUMDB=""sum.golang.org""
GOTMPDIR=""""
GOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""
GOVCS=""""
GOVERSION=""go1.19.5""
GCCGO=""gccgo""
AR=""ar""
CC=""clang""
CXX=""clang++""
CGO_ENABLED=""1""
GOMOD=""/Users/devops/go/src/serviceweaver/go.mod""
GOWORK=""""
CGO_CFLAGS=""-g -O2""
CGO_CPPFLAGS=""""
CGO_CXXFLAGS=""-g -O2""
CGO_FFLAGS=""-g -O2""
CGO_LDFLAGS=""-g -O2""
PKG_CONFIG=""pkg-config""
GOGCCFLAGS=""-fPIC -arch arm64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/lk/k280wks50hv_1zt5y1lmrlhw0000gn/T/go-build3603867559=/tmp/go-build -gno-record-gcc-switches -fno-common""
`
### **Here are my actions**
`go install github.com/ServiceWeaver/weaver/cmd/weaver@latest`

in .bashrc and .bash_profile

`export PATH=""$PATH:$GOPATH/bin""`

`source ~/(.bashrc | .bash_profile)`

`weaver --help`

`zsh: command not found: weaver`

what more information do I need to provide?\n\n--- Comments ---\nif you use zsh, you should source zshrc I believe, and also if you try on your ide/editor with ``weaver --help`` it should work flawless. @erqiu-sj \n> 如果你使用 zsh，我相信你应该获得 zshrc，而且如果你尝试使用你的 ide/editor，它`weaver --help`应该可以完美运行。@erqiu-sj

I tried and found that the result was the same. I think it was caused by the lack of weaver binaries in the go/bin directory after go install. When I ran go install again, I found that there was no prompt\n> > 如果你使用 zsh，我相信你应该获得 zshrc，而且如果你尝试使用你的 ide/editor，它`weaver --help`应该可以完美运行。@erqiu-sj
> 
> I tried and found that the result was the same. I think it was caused by the lack of weaver binaries in the go/bin directory after go install. When I ran go install again, I found that there was no prompt

i don't know if it's caused by lack of binaries, but I know how to solve it lol. cus I used to happen on this issues too, but not from this project so I guess it's the same thing, anyway I think the problem is solved right?\nyou might need to install GCC if you don't have it installed\n@erqiu-sj The error message shows that the terminal you are using is zsh, but you set `export PATH=""$PATH:$GOPATH/bin""` in the bash configuration.\n> @erqiu-sj报错提示你使用的最终终端是 zsh，但是你`export PATH=""$PATH:$GOPATH/bin""`在 bash 配置中设置的。

I also configured it in the. zshrc file....\n> 如果你没有安装 GCC，你可能需要安装它

` gcc --version
Apple clang version 14.0.0 (clang-1400.0.29.202)
Target: arm64-apple-darwin22.3.0
Thread model: posix
InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin`

is this one?\ndo you see any errors when trying to build the ServiceWeaver project from the source using `go build`?\n> 在尝试使用源代码构建 ServiceWeaver 项目时，您是否看到任何错误`go build`？

I'll try it after work\nadding $GOPATH/bin to /etc/paths works fine for me :)\nClosing this issue, this seems to be a GOPATH issue, unless I'm mistaken. Feel free to re-open if I'm wrong.",c1d265226449cf3c,https://github.com/ServiceWeaver/weaver/issues/108,"{'number': 108, 'state': 'closed', 'labels': [], 'created_at': '2023-03-06T03:43:56Z', 'closed_at': '2023-03-15T23:26:15Z', 'comments_count': 11, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/108/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-06. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_106,2023-03-05T18:45:39Z,"System tmp directory is not always same as remote ssh deployment\n\n# Issue 

This issue was also partly discussed on #100 

When deploying from macOS the operating system defaults to a `/var/folders/*` temporary directory and this will not work with unix systems

Right now the ssh deployer pulls the temp directory via `os.TempDir()` 

https://github.com/ServiceWeaver/weaver/blob/35727ae307c392d27cadfbf5302d56a3e76977ab/internal/tool/ssh/deploy.go#L143

Determining the correct temp directory is not the easiest thing for example the ""canonical environment variable in Unix and POSIX"" [TMPDIR](https://en.wikipedia.org/wiki/TMPDIR) environment variable is not always set

```
aran@###:~$ uname -a
Linux ### 5.15.0-52-generic #58-Ubuntu SMP Thu Oct 13 08:03:55 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
aran@####:~$ echo $TMPDIR

aran@####:~$
```

Comparing this to macOS I get the following output

```
❯ echo $TMPDIR
/var/folders/sq/3sdsh9n14p790p7xwhdlvdzc0000gn/T/

~
❯
```

# Proposed Solution

To fix this I propose introducing an additional configuration option to the ssh deployer allowing for this variable to be override from the default `/tmp` which should work both on macOS and Unix systems 

This new configuration option can be added to the `sshConfigSchema` type as a string and defaults to `/tmp` 

https://github.com/ServiceWeaver/weaver/blob/35727ae307c392d27cadfbf5302d56a3e76977ab/internal/tool/ssh/deploy.go#L181-L183

The new tmp directory variable can then be passed into the `Deployment`   

https://github.com/ServiceWeaver/weaver/blob/35727ae307c392d27cadfbf5302d56a3e76977ab/runtime/protos/runtime.proto#L104-L106

That is used by the `copyBinaries` func 

https://github.com/ServiceWeaver/weaver/blob/35727ae307c392d27cadfbf5302d56a3e76977ab/internal/tool/ssh/deploy.go#L136

The new tmp directory will be used on the following line instead of `os.TempDir()` 

https://github.com/ServiceWeaver/weaver/blob/35727ae307c392d27cadfbf5302d56a3e76977ab/internal/tool/ssh/deploy.go#L143

Configuration would look as follows 

```
[serviceweaver]
name = ""hello""
binary = ""./hello""

[ssh]
locations_file = ""./ssh_locations.txt""
tmp_dir = ""/something/custom""
```

Of course if the `tmp_dir` is omitted then it would default to `/tmp` which works for both unix and posix systems

Hopefully that explains the issue and a possible solution to the issue. Let me know your thoughts on this and whether you feel like should do something differently? \n\n--- Comments ---\nThanks for the proposal, @aranw.

I wonder if it's possible for the participants to pick their own temporary directory? This would be a preferable solution to adding another configuration option just for temp directory access. WDYT @rgrandl.

This sounds like a great first project for one of our community members.\nYeah that's kind of what I was thinking by the configuration option. Users of the ssh deployer could then state what temp directory to use overriding the default `/tmp` 

Edit: Another possible solution would be to expand the site locations to be another struct where users can set both ip/hostnames and a temp directory? \nThanks @aranw for the proposal. I agree with @spetrovic77, it would be nice if we don't have to embed the temp directory in the config. 

We need the temp directory name per location in 2 places:
* to copy the weaver binary 
* to start a babysitter process 

Would it be better if we would get the temp directories from each machine and then copy the binary accordingly to each of these? 

The pros of this approach is that the config is as simple as it is now. 

The cons is that we may need to do an extra ssh command to each location to get their temp directory name, and keep track of that at the manager (which doesn't seem that bad). \nWhen I was looking into this I couldn't find a reliable source for retrieving the temporary directory. On my current Ubuntu 22.04.2 LTS installation `$TMPDIR` is not set. I've not found a command that would retrieve it. 

I have however found the `mktemp` which could be a reliable alternative 

This is the output from Ubuntu 22.04.2 LTS
```
mktemp --help
Usage: mktemp [OPTION]... [TEMPLATE]
Create a temporary file or directory, safely, and print its name.
TEMPLATE must contain at least 3 consecutive 'X's in last component.
If TEMPLATE is not specified, use tmp.XXXXXXXXXX, and --tmpdir is implied.
Files are created u+rw, and directories u+rwx, minus umask restrictions.

  -d, --directory     create a directory, not a file
  -u, --dry-run       do not create anything; merely print a name (unsafe)
  -q, --quiet         suppress diagnostics about file/dir-creation failure
      --suffix=SUFF   append SUFF to TEMPLATE; SUFF must not contain a slash.
                        This option is implied if TEMPLATE does not end in X
  -p DIR, --tmpdir[=DIR]  interpret TEMPLATE relative to DIR; if DIR is not
                        specified, use $TMPDIR if set, else /tmp.  With
                        this option, TEMPLATE must not be an absolute name;
                        unlike with -t, TEMPLATE may contain slashes, but
                        mktemp creates only the final component
  -t                  interpret TEMPLATE as a single file name component,
                        relative to a directory: $TMPDIR, if set; else the
                        directory specified via -p; else /tmp [deprecated]
      --help     display this help and exit
      --version  output version information and exit

GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
Full documentation <https://www.gnu.org/software/coreutils/mktemp>
or available locally via: info '(coreutils) mktemp invocation'
```

It is also apparently available on macOS as well https://ss64.com/osx/mktemp.html\nNice. It would be great if we can do this instead of adding a new field in the config.

This sounds great to me. 
\nI'll get to work implementing this and removing the config stuff instead 👍🏻 \nSounds great. Thanks @aranw for working on this.\n@rgrandl after investigating the `mktemp` as a possible solution am not sure it'll be ideal as each iteration over `locs` calling `mktemp` on each server will create a new unique folder per location and looking at the code am assuming you'll ned to know the location of the binary 

https://github.com/ServiceWeaver/weaver/blob/262d632dfaa2654e6e94aa4a73a0ccd8302253b7/internal/tool/ssh/deploy.go#L144

I don't know enough about how you run the app binaries just yet but am guessing this `dep.App.Binary` is used elsewhere? 

Maybe it'll make more sense to just change 
https://github.com/ServiceWeaver/weaver/blob/262d632dfaa2654e6e94aa4a73a0ccd8302253b7/internal/tool/ssh/deploy.go#L143
to 
`remoteDepDir := filepath.Join(""/tmp"", dep.Id)`

This should work across all unix/posix servers \n@aranw I think that using `mktemp` should be fine. The only prerequisite would be that `mktemp` command should exist on all the machines.

I think what you can do is as follows:
* in https://github.com/ServiceWeaver/weaver/blob/main/internal/tool/ssh/deploy.go#L134, for each location you will run a SSH command that does `mktemp -u`. This will return you a path to a temp directory (e.g., /tmp/tmp.Flu0vKtk5v). Note that -u it means dry-run so the directory is not actually created. Then you can do another ssh command where you create the actual directory (e.g., `mkdir -p /tmp/tmp.Flu0vKtk5v/deploymentid`) https://github.com/ServiceWeaver/weaver/blob/main/internal/tool/ssh/deploy.go#L145.

* you will have to keep track the mapping between location and the corresponding temporary directory. This mapping is needed by the manager https://github.com/ServiceWeaver/weaver/blob/main/internal/tool/ssh/impl/manager.go to start remote babysitters at these locations.

**Note**: https://github.com/ServiceWeaver/weaver/blob/main/internal/tool/ssh/deploy.go#L142 - this might be a bug. I don't remember why we did that, but I think it's safe to ignore it. I will send a fix, once I try it out on multiple machines. Do you mind checking if the deployment works on multiple machines if you comment this line (in case you have access to a cluster)?

I would avoid hardcoding `/tmp` because that can get tricky and harder to evolve.

\nHey @rgrandl sorry for the slow reply. I've been busy last week or so now with other stuff

Just getting back into this and looking into

If I understand your proposed solution I'll end up with a unique path per ssh location but looking at the current code there is no way to represent that and I'll need to make a few changes so that I can track a location and it's path for use by the manager?
 \nHi @aranw that's correct. \nHi. What is the current status of the implementation?

Cheers.\nHey @naivary @rgrandl 

Unfortunately I haven't been able to work on this since my last update. Various things came up both in my work life and personal and it's resulted in me not having the time to work on this at all \nCan I try to help you and solve the problem with you?",6e284fb7bf877e37,https://github.com/ServiceWeaver/weaver/issues/106,"{'number': 106, 'state': 'closed', 'labels': [], 'created_at': '2023-03-05T18:45:39Z', 'closed_at': '2023-06-09T16:16:49Z', 'comments_count': 14, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/106/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-05. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_105,2023-03-05T14:37:35Z,"What is the difference and connection between it and orleans?\n\n\n\n--- Comments ---\n@bxjg1987 this is a question suited for https://groups.google.com/g/serviceweaver. Do you mind asking it there?\nI'll close the issue for now, but let's continue the discussion on the Google Groups for posterity.",eb8b5971d41c4d2d,https://github.com/ServiceWeaver/weaver/issues/105,"{'number': 105, 'state': 'closed', 'labels': [], 'created_at': '2023-03-05T14:37:35Z', 'closed_at': '2023-03-06T18:00:56Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/105/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-05. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_104,2023-03-05T10:20:48Z,"weaver multi deploy runs forever even when deployment fails\n\n```sh
> weaver multi deploy weaver.toml
╭───────────────────────────────────────────────────╮
│ app        : hello                                │
│ deployment : ac742841-b8c5-44d0-bd98-807a798050d8 │
╰───────────────────────────────────────────────────╯
S0305 10:16:59.219106 stderr  0bd24c35           ] panic: listener ""hello"": localhost:8080 already in use
S0305 10:16:59.219231 stderr  0bd24c35           ] 
S0305 10:16:59.219239 stderr  0bd24c35           ] goroutine 1 [running]:
S0305 10:16:59.219247 stderr  0bd24c35           ] main.main()
S0305 10:16:59.219254 stderr  0bd24c35           ]      hello/main.go:18 +0xc5
S0305 10:16:59.230226 stderr  9fbaada9           ] panic: listener ""hello"": localhost:8080 already in use
S0305 10:16:59.230359 stderr  9fbaada9           ] 
S0305 10:16:59.230368 stderr  9fbaada9           ] goroutine 1 [running]:
S0305 10:16:59.230375 stderr  9fbaada9           ] main.main()
S0305 10:16:59.230382 stderr  9fbaada9           ]      hello/main.go:18 +0xc5
```\n\n--- Comments ---\nThanks for reporting, this is interesting. Right now, Ctrl+C will kill the `weaver multi` process (and all others), but you're saying that it should kill itself automatically whenever one of the underlying component processes fail?

It's tricky because `weaver multi` actually runs multiple replicas of all of its processes. This is to help test the cloud""scenario where processes/containers are replicated. We likely don't want to kill the whole application if one process fails, and we actually attempt to restart all crashed processes on failure. (And repeatedly do so as long as they keep crashing.) Again, this is to simulate the cloud scenario where the containers get restarted automatically on failure.

So I believe we don't want to implement the behavior of killing the whole app whenever a process fails.\nSorry for not being clear. By ""runs forever"" I meant that it actually runs forever without any attempt to restart any failure processes at all.

Consider this example:
```sh
> weaver multi deploy weaver.toml
╭───────────────────────────────────────────────────╮
│ app        : hello                                │
│ deployment : aafaa31e-13b2-408b-8379-9fc369a4cbe5 │
╰───────────────────────────────────────────────────╯
I0305 21:51:55.771518 main    3d1112c2 main.go:28] listening addr=""127.0.0.1:42155""
I0305 21:51:55.776886 main    1ad76411 main.go:28] listening addr=""127.0.0.1:42725""
I0305 21:51:56.607621 main    1ad76411 main.go:22] exiting with code 1
I0305 21:51:56.614743 main    3d1112c2 main.go:22] exiting with code 1
2023/03/05 21:51:56 http: proxy error: dial tcp 127.0.0.1:42725: connect: connection refused
2023/03/05 21:51:56 http: proxy error: dial tcp 127.0.0.1:42155: connect: connection refused
2023/03/05 21:51:56 http: proxy error: dial tcp 127.0.0.1:42725: connect: connection refused
2023/03/05 21:51:56 http: proxy error: dial tcp 127.0.0.1:42155: connect: connection refused
```
```sh
curl localhost:8080/exit 200
curl localhost:8080/exit 200
curl localhost:8080/exit 502
curl localhost:8080/exit 502
curl localhost:8080/exit 502
curl localhost:8080/exit 502
```

> We likely don't want to kill the whole application if one process fails, and we actually attempt to restart all crashed processes on failure.


This only seems to be true for `weaver ssh` not for `weaver multi`:
https://github.com/ServiceWeaver/weaver/blob/35727ae307c392d27cadfbf5302d56a3e76977ab/internal/tool/multi/deploy.go#L91
https://github.com/ServiceWeaver/weaver/blob/35727ae307c392d27cadfbf5302d56a3e76977ab/internal/babysitter/babysitter.go#L131",64477983d4846d83,https://github.com/ServiceWeaver/weaver/issues/104,"{'number': 104, 'state': 'closed', 'labels': [], 'created_at': '2023-03-05T10:20:48Z', 'closed_at': '2023-03-05T19:14:10Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/104/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-05. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_100,2023-03-04T19:11:03Z,"ssh deployer errors with ""unknown keys [location_file]"" \n\nI've tried both setting up my own test weaver application and using the collatz example and both times when running 
```bash
❯ weaver ssh deploy weaver.toml
```
I get the following error message 
```
unable to parse ssh config: section ""ssh"" has unknown keys [locations_file]
```

I've tried looking at the code but nothing seems to stand out to me at a quick glance as to why this is erroring. I don't fully understand how all the code works just yet but thought I'd raise the issue and continue debugging \n\n--- Comments ---\nNice bug report! I'm just learning the code as well, but I may have an idea about this problem.

https://github.com/ServiceWeaver/weaver/blob/35727ae307c392d27cadfbf5302d56a3e76977ab/internal/tool/ssh/deploy.go#L181-L186

I believe the `serverweaver_metric` struct tag on line 182 is wrong. It doesn't appear anywhere else in the code, and `ParseConfigSection` (which receives that struct) seems to use https://pkg.go.dev/github.com/burntsushi/toml#Decode to decode the config. That function expects a `toml` struct tag.

That leaves the `locations_file` field from the config as ""undecoded"", which causes the error here:

https://github.com/ServiceWeaver/weaver/blob/35727ae307c392d27cadfbf5302d56a3e76977ab/runtime/config.go#L87-L88

I suspect this diff should fix it, but I'm not familiar enough with the testing of this package to add test coverage for the change:

```diff
diff --git a/internal/tool/ssh/deploy.go b/internal/tool/ssh/deploy.go
index 6a6e276..9be6534 100644
--- a/internal/tool/ssh/deploy.go
+++ b/internal/tool/ssh/deploy.go
@@ -179,7 +179,7 @@ func getLocations(app *protos.AppConfig) ([]string, error) {
 	const shortSSHKey = ""ssh""
 
 	type sshConfigSchema struct {
-		LocationsFile string `serverweaver_metric:""locations_file""`
+		LocationsFile string `toml:""locations_file""`
 	}
 	parsed := &sshConfigSchema{}
 	if err := runtime.ParseConfigSection(sshKey, shortSSHKey, app, parsed); err != nil {
```\nHi @aranw. Thanks for pointing out the issue. @dnephin this is one of the problem, great find :). There is another small issue we introduced while renaming the project. I am creating a fix. \nAh thanks for finding this so quickly. I didn't get too deep into identifying the issue before having to go out. I'll try this diff either later tonight or tomorrow at some point\nSorry for the inconvenience. Please try the diff and let us know if you have any issues running the SSH deployer.\nYeah that looks like it has progressed a little further now onto a new error relating to creating deployment directory

Thanks for the quick turn around with a fix! \nHmm, can you share the error? I tried on my local machine and it works fine. Are you testing on your local machine or on multiple machines? \nIt is a remote server 

```
unable to create deployment directory at location #####: exit status 1
```

`#####` is the name of my host alias in my ssh config file \nGot it. We create a deployment directory on each remote machine where Service Weaver will be deployed. Right now we try to create the directory using ssh and the location is os.TempDir()/deploymentId. https://github.com/ServiceWeaver/weaver/blob/main/internal/tool/ssh/deploy.go#L147 

Can you try if simply creating the remote directory over SSH works? e.g., ssh #### ""mkdir -p /tmp/bla"". I am wondering whether you have some permission issues. Are you running linux machines? \n@rgrandl yeah running that command it worked fine \nI added some output to the command to see what the tool was doing and this seems to be the error 

```
mkdir: cannot create directory ‘/var/folders’: Permission denied
```

Not sure where it is getting `/var/folders` yet need to trace the code a bit more \nThis is the command it is running 

I'm guessing this is a folder on my local machine 

```
/usr/bin/ssh -v ### mkdir -p /var/folders/sq/3sdsh9n14p790p7xwhdlvdzc0000gn/T/915574ab-82d5-47f1-8efa-47f5062f03cf
```
\nHmm, this is interesting. On linux, the temp dir is /tmp. What is your setup and which OS are you running?  It feels like macOS?

It seems like your ssh client doesn't have privileges to create a directory in /var/folders, maybe? Alternatively you can try to change the os.tempDir() to a custom directory where you can do writes over SSH and check if it works for now. 

I have a macOS laptop and I will give it a try as well. To be fair, we tested the SSH deployer only on linux machines.\nAhh so I understand what is happening now

https://github.com/ServiceWeaver/weaver/blob/35727ae307c392d27cadfbf5302d56a3e76977ab/internal/tool/ssh/deploy.go#L143

On this line you call `os.TempDir()` but because I am running this from my laptop (macOS) that call to `os.TempDir()` returns a temp directory path for my local machine not for the remote ssh host that I am connecting too 

Edit: I can create a separate issue for this if you want? \nThat's a good point. Yeah, we didn't try to deploy it using SSH from our laptop on a cluster. Thanks for the finding.  Sure, send us a fix. Thanks for fixing this :). \n@rgrandl I'll write up a new issue and little summary of the problem later today. I did some digging into the issue last night but was late for me (GMT timezone) so ended up not working on a fix. I have an idea for a possible fix but will discuss in more detail a possible solution in the issue later\n@aranw thanks a lot for your help. Sounds good. ",6e284fb7bf877e37,https://github.com/ServiceWeaver/weaver/issues/100,"{'number': 100, 'state': 'closed', 'labels': [], 'created_at': '2023-03-04T19:11:03Z', 'closed_at': '2023-03-06T17:49:27Z', 'comments_count': 16, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/100/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-04. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_98,2023-03-04T15:26:57Z,"Interface contract outside of the struct implementation\n\nHi everyone, thank you for introducing the new way of service implementation.

I'm trying to implement a POC for the service weaver and I stumbled upon this error
`internal/domain/reverser/reverser.go:16:6: weaver.Implements argument contract.Reverser is a type outside the current package.`

The thing is, implementing the contract in a separate package could be a better solution, well at least for the implementation I'm tryna made.

![image](https://user-images.githubusercontent.com/22569688/222914421-bea3e61c-243c-4548-a888-56b908c853d4.png)

I'm just wondering, is there any specific case of this rule that prevented the generator to use the interface contract outside of the implementation package? 

```
// Implementation of the Reverser component.
type reverser struct {
	weaver.Implements[contract.Reverser]
}
```
\n\n--- Comments ---\nThanks for reporting. Yes, we made a conscious decision not to support implementations of out-of-package interfaces, at least for now. @mwhittaker will have more state on this.\nHi @ghazimuharam! Here's the code in `weaver generate` that disallows a struct from implementing a component interface outside its package:

https://github.com/ServiceWeaver/weaver/blob/35727ae307c392d27cadfbf5302d56a3e76977ab/internal/tool/generate/generator.go#L357-L360

As Srdjan said, this was a conscious decision. I don't remember exactly why we made this decision; it might have just been a simplifying assumption for our initial release. Let me think harder about whether there's any disadvantages to allowing a component implementation to be in a separate package from its component interface. If there's none, I can take a stab at relaxing the restriction!\nThank you, @spetrovic77 and @mwhittaker, for responding to my issue. As this appears to be a result of conscious decisions, I understand that I may need to wait for further clarification. However, please do not hesitate to reach out if you require any help from me. In the meantime, I will try to familiarize myself with the entire repository.\nJust to share that I've found the simple workaround to embed the external interface (from another package), to a local interface (same package) that is getting referenced by weaver.Implement. The code generation works fine.

\nWe explored the idea of allowing component interfaces and implementations to be in separate packages in #282 but ultimately decided to disallow it. In #285, we're updating an error message to suggest @jpearll's workaround.",b94122e98a613950,https://github.com/ServiceWeaver/weaver/issues/98,"{'number': 98, 'state': 'closed', 'labels': ['enhancement'], 'created_at': '2023-03-04T15:26:57Z', 'closed_at': '2023-04-21T22:01:32Z', 'comments_count': 5, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/98/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-04. Resolution: acknowledged_not_fixed (state=closed, labels=['enhancement']). Root cause: unclear (code=)"
github_issue,gh_issue_96,2023-03-04T09:05:42Z,"switch logger to golang.org/x/exp/slog\n\nCurrently weaver is using a custom logger; https://github.com/ServiceWeaver/weaver/blob/main/logger.go, https://github.com/ServiceWeaver/weaver/tree/main/runtime/logging   

There's a proposal to bring structured logging to the Go standard library. That proposal looks likely to be accepted; It was marked as; 
```
Based on the discussion above, this proposal seems like a likely accept.
— rsc for the proposal review group
```
2days ago: https://github.com/golang/go/issues/56345#issuecomment-1450760728 

An implementation of that proposal already exists at; https://pkg.go.dev/golang.org/x/exp/slog  

Since weaver is just starting, I think it should switch to `golang.org/x/exp/slog` early on. It does not have to do so right away, we can wait [a few more days](https://github.com/golang/proposal#accepted) to see if the exp/slog proposal is accepted upstream\n\n--- Comments ---\nThanks for reporting.

Our logger API is based on the `slog` api. However, our logger needs to intercept all the logs, in order to store them in the appropriate logs storage (e.g., Google Cloud Logging, local files). So we can't use the slog package directly.\nCould you please provide a bit more detail on why this was closed? Specifically, I think it could help to clarify how `slog` integration is not possible.  From where I sit, the necessity of intercepting all logs does not preclude using `slog`, and I have an internal service library implementation that does exactly this via a common logging interface, while also providing access to creating new handlers through a well-defined interface layer.  What's to prevent ServiceWeaver from adopting a similar approach? If you enumerate the difficulties or concerns, it could serve as a useful starting point for a PR from someone with experience integrating the `slog` package. At the very least, this issue could serve as a guideline for exactly _why_ `slog` can't be used, and could be linked from the documentation to prevent any further issues or PR requests.

Given that `slog` is intended to serve as a stdlib-standard interface to structured logging, would you consider reopening this issue until the proposal lands? Maybe change the issue title to something like ""Investigate integrating the proposed slog package""",ad44132f5ca60d6d,https://github.com/ServiceWeaver/weaver/issues/96,"{'number': 96, 'state': 'closed', 'labels': [], 'created_at': '2023-03-04T09:05:42Z', 'closed_at': '2023-03-05T19:03:38Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/96/reactions', 'total_count': 3, '+1': 3, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-04. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_95,2023-03-04T07:06:12Z,"Add support for Support for GCP Cloud Run\n\nVery interesting approach, thanks for the amazing work.

I have a use case where the application is sometimes deployed:
* on premise - low traffic environment, simple deployments,
* cloud run - for much larger SaaS-type environments

A deployer for could run would be very welcome, any plans for this? \n\n--- Comments ---\nI'm not a project contributor, just a passer-by, but I don't think Cloud Run allows for something like the routing/sharding support in Service Weaver to be implemented easily.\nThank you for your inquiry. This would be a great deployer for sure. We are having some discussions with the Cloud Run team on this. We don't have a timeline, and a concrete plan for an eventual integration yet. 

@spetrovic77 might be able to add more on this. \nWe would love to see community contribution for writing various deployers. Like @szabba mentioned, there are some issues that may be hard to support for Cloud Run, but I think it's fine if routing/sharding isn't supported out of the box.

@crashdump: if you are interested in driving an implementation of a Cloud Run deployer, please let us know. In that case, re-open the issue or create a new one, and we'll try to support you.

Note that we plan to release a guide on writing deployers soon on our blog at https://serviceweaver.dev.",d75e6c493fdfa8de,https://github.com/ServiceWeaver/weaver/issues/95,"{'number': 95, 'state': 'closed', 'labels': [], 'created_at': '2023-03-04T07:06:12Z', 'closed_at': '2023-03-05T19:07:30Z', 'comments_count': 3, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/95/reactions', 'total_count': 3, '+1': 3, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-04. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_94,2023-03-04T02:02:53Z,"Remove CGO dependencies\n\nhttps://github.com/ServiceWeaver/weaver/issues/79 reported an issue building on MacOS, which was resolved by explicitly documenting installation instructions. However, during the discussion, the idea of [removing the sqlite CGO depencency](https://github.com/ServiceWeaver/weaver/issues/79#issuecomment-1453979529) was raised. I would like to revive this discussion as I believe there are many reasons to remove any CGO dependencies in a Go project including:

* Trivial cross compilation
* Higher performance
* Fewer build dependencies
* Fewer build headaches for users (I'm here because I had a distinct CGO build error from the one in #79).

Please replace the CGO sqlite driver with the CGO free one from https://pkg.go.dev/modernc.org/sqlite.\n\n--- Comments ---\n@johanbrandhorst thanks for raising this. 

After #79 has been closed by updating the documentation, I also returned to this issue for the exact same arguments already mentioned above.\nThanks for reporting, see the attached pull request.",0f6cea460103bd0c,https://github.com/ServiceWeaver/weaver/issues/94,"{'number': 94, 'state': 'closed', 'labels': [], 'created_at': '2023-03-04T02:02:53Z', 'closed_at': '2023-03-06T17:38:01Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/94/reactions', 'total_count': 3, '+1': 3, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-04. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_92,2023-03-03T21:08:40Z,"CPU consumption at 100% running hello example\n\nAfter to run the `hello` example with `go run .` the CPU consumption was at 100%

pprof output
```
(pprof) top
Showing nodes accounting for 29.98s, 100% of 29.99s total
Dropped 7 nodes (cum <= 0.15s)
      flat  flat%   sum%        cum   cum%
    15.66s 52.22% 52.22%     29.98s   100%  github.com/ServiceWeaver/weaver.(*weavelet).watchComponentsToStart
     9.71s 32.38% 84.59%     11.14s 37.15%  github.com/ServiceWeaver/weaver/runtime/retry.(*Retry).Continue
     3.18s 10.60% 95.20%      3.18s 10.60%  github.com/ServiceWeaver/weaver.(*singleprocessEnv).GetComponentsToStart
     1.43s  4.77%   100%      1.43s  4.77%  context.(*emptyCtx).Err
         0     0%   100%     29.98s   100%  github.com/ServiceWeaver/weaver.startWork.func1
```\n\n--- Comments ---\nThanks for noticing and fixing!

This is a bug in our code, see the comments on the pull request.",fe288c1f7761ee23,https://github.com/ServiceWeaver/weaver/issues/92,"{'number': 92, 'state': 'closed', 'labels': [], 'created_at': '2023-03-03T21:08:40Z', 'closed_at': '2023-03-04T00:28:35Z', 'comments_count': 1, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/92/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-03. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_90,2023-03-03T20:49:40Z,"Enabling the errcheck linter\n\nCongratulations on the first release! ServiceWeaver looks very interesting and I'm looking for ways to contribute.

I noticed that `errcheck` is disabled with a comment about too many errors. I've found this linter to be useful because unhandled errors can often cause bugs.

Would you be interested in a few small PRs to fix or ignore the current warnings so that the `errcheck` linter can be enabled?

I'll leave some more detail in a comment below about how I'd approach that change.
\n\n--- Comments ---\nInitially I'd want to enable it only for production code (not tests), to limit the number of changes required to get it enabled. Something like this:

```yaml
issues:
  exclude-rules:
    - path: '_test\.go'
      linters: [errcheck]
```

I think a bunch of the unhandled errors are safe to ignore (ex: writing an HTTP response from a handler). Those can be ignored with either:

```go
_, _ = w.Write(...)
// or
w.Write(...) //nolint:errcheck
```

Do you have a preference on one of those styles?

----

There are a few cases where it seems like the error simply needs to be returned:

https://github.com/ServiceWeaver/weaver/blob/2ae2abb650843ff5c6dbc76c9934a715fa98f2d0/runtime/logging/query.go#L370-L371

https://github.com/ServiceWeaver/weaver/blob/2ae2abb650843ff5c6dbc76c9934a715fa98f2d0/internal/tool/ssh/impl/babysitter.go#L103-L104

https://github.com/ServiceWeaver/weaver/blob/2ae2abb650843ff5c6dbc76c9934a715fa98f2d0/internal/net/call/call.go#L283

or logged:

https://github.com/ServiceWeaver/weaver/blob/2ae2abb650843ff5c6dbc76c9934a715fa98f2d0/internal/tool/ssh/deploy.go#L107

https://github.com/ServiceWeaver/weaver/blob/2ae2abb650843ff5c6dbc76c9934a715fa98f2d0/internal/status/dashboard.go#L177

https://github.com/ServiceWeaver/weaver/blob/2ae2abb650843ff5c6dbc76c9934a715fa98f2d0/internal/net/call/call.go#L420

A log here to inform the user that the port is in use would probably help avoid confusion when perfetto isn't able to display the trace.

https://github.com/ServiceWeaver/weaver/blob/2ae2abb650843ff5c6dbc76c9934a715fa98f2d0/runtime/perfetto/db.go#L526

----

The remaining cases of unhandled errors seems to be mostly in these two categories:
1. starting goroutines with a function that returns an error - in a few of these cases the only possible return value is `ctx.Err`. I wonder if the error return value could be removed from the function signature in those cases.
2. sending an RPC response from an RPC handler when the operation is performed in a goroutine. In these cases I expect the error is also safe to ignore because the client receives the error response, and the caller doesn't care about it. \nHi Daniel,

We would love to take you up on your offer to help enable errcheck.

Your suggestion on just focusing on non-test code for now seems spot on.

> _, _ = w.Write(...)
> // or
> w.Write(...) //nolint:errcheck

I think I would prefer the latter since it will be easier to spot and search for. So let's go with the //nolint:errcheck approach.

Thanks for offering to help and your clear write-up of the types of changes that would be needed.
",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/issues/90,"{'number': 90, 'state': 'closed', 'labels': [], 'created_at': '2023-03-03T20:49:40Z', 'closed_at': '2023-03-13T16:46:49Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/90/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-03. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_86,2023-03-03T17:49:42Z,"internal error: couldn't create clientset for cluster ""serviceweaver-config"" in region ""us-central1"": The gcp auth plugin has been removed.\n\nHi,
I'm trying to deploy the hello world sample and getting this error.

My environment is a clean gitpod container with gcloud freshly setup.

Here more logs:
```
Creating cluster serviceweaver-config in location us-central1... Done
internal error: couldn't create clientset for cluster ""serviceweaver-config"" in region ""us-central1"": The gcp auth plugin has been removed.
Please use the ""gke-gcloud-auth-plugin"" kubectl/client-go credential plugin instead.
See https://cloud.google.com/blog/products/containers-kubernetes/kubectl-auth-changes-in-gke for further details
exit status 1
```\n\n--- Comments ---\nThanks for trying to deploy the hello app on GKE @stacklikemind.

This was already reported in https://github.com/ServiceWeaver/weaver-gke/issues/25 and we are taking a look.
\nThanks, I'll close this one then. ",c6af5d2a4a1d989a,https://github.com/ServiceWeaver/weaver/issues/86,"{'number': 86, 'state': 'closed', 'labels': [], 'created_at': '2023-03-03T17:49:42Z', 'closed_at': '2023-03-03T18:40:36Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/86/reactions', 'total_count': 1, '+1': 1, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-03. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_84,2023-03-03T14:18:26Z,"Add support for Nutanix private cloud\n\nI want to start this issue to track  [Nutanix](https://www.nutanix.com/) private cloud environment as supported deployment target for ServiceWeaver.

I work at Nutanix and I am willing to drum-up support for ServiceWeaver within Nutanix and get this implemented.\n\n--- Comments ---\nThat's awesome, Neeraj!

We are going to release a blog post on how to write a deployer soon (next week, I hope), but in the meantime ping us on our [Google Group](https://groups.google.com/g/serviceweaver/) or directly at serviceweaver@google.com if you have any questions.\nHi @n4j, we just dropped the blog post on how to write a deployer: https://serviceweaver.dev/blog/deployers.html. I think it will be super helpful in writing a Nutanix deployer!\nThanks @mwhittaker 🙂.

Also, can you keep this issue open to track and communicate that Nutanix support is being implemented?\nYes, definitely I'll keep it open! Sorry about that.\nThis is not actionable. ",2b41a8490e818002,https://github.com/ServiceWeaver/weaver/issues/84,"{'number': 84, 'state': 'closed', 'labels': ['enhancement'], 'created_at': '2023-03-03T14:18:26Z', 'closed_at': '2024-11-05T23:13:46Z', 'comments_count': 5, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/84/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-03. Resolution: acknowledged_not_fixed (state=closed, labels=['enhancement']). Root cause: unclear (code=)"
github_issue,gh_issue_81,2023-03-02T19:19:14Z,"Doesn't install on windows\n\n```
$ go build ./cmd/weaver/
go: downloading github.com/google/uuid v1.3.0
go: downloading golang.org/x/tools v0.2.0
go: downloading golang.org/x/term v0.0.0-20210927222741-03fcf44c2211
go: downloading google.golang.org/protobuf v1.28.1
go: downloading github.com/google/pprof v0.0.0-20221010195024-131d412537ea
go: downloading go.opentelemetry.io/otel/sdk v1.11.1
go: downloading github.com/fsnotify/fsnotify v1.5.4
go: downloading github.com/google/cel-go v0.12.5
go: downloading google.golang.org/genproto v0.0.0-20221109142239-94d6d90a7d66
go: downloading github.com/BurntSushi/toml v1.2.0
go: downloading go.opentelemetry.io/otel/trace v1.14.0
go: downloading github.com/pkg/browser v0.0.0-20210911075715-681adbf594b8
go: downloading golang.org/x/exp v0.0.0-20230206171751-46f607a40771
go: downloading go.opentelemetry.io/otel v1.14.0
go: downloading go.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.7.0
go: downloading github.com/hashicorp/golang-lru/v2 v2.0.1
go: downloading github.com/mattn/go-sqlite3 v1.14.16
go: downloading golang.org/x/sys v0.1.0
go: downloading golang.org/x/text v0.7.0
go: downloading github.com/antlr/antlr4/runtime/Go/antlr v0.0.0-20220418222510-f25a4f6275ed
go: downloading github.com/stoewer/go-strcase v1.2.0
go: downloading github.com/go-logr/logr v1.2.3
go: downloading github.com/go-logr/stdr v1.2.2
go: downloading golang.org/x/mod v0.6.0
 github.com/ServiceWeaver/weaver/runtime/perfetto
runtime\perfetto\db.go:539:23: undefined: sqlite3.Error
runtime\perfetto\db.go:541:41: undefined: sqlite3.ErrBusy
runtime\perfetto\db.go:541:77: undefined: sqlite3.ErrLocked
```

```
go env
set GO111MODULE=
set GOARCH=amd64
set GOBIN=
set GOCACHE=C:\Users\xxx\AppData\Local\go-build
set GOENV=C:\Users\xxx\AppData\Roaming\go\env
set GOEXE=.exe
set GOEXPERIMENT=
set GOFLAGS=
set GOHOSTARCH=amd64
set GOHOSTOS=windows
set GOINSECURE=
set GOMODCACHE=C:\Users\xxx\go\pkg\mod
set GONOPROXY=
set GONOSUMDB=
set GOOS=windows
set GOPATH=C:\Users\xxx\go
set GOPRIVATE=
set GOPROXY=https://proxy.golang.org,direct
set GOROOT=D:\Go
set GOSUMDB=sum.golang.org
set GOTMPDIR=
set GOTOOLDIR=D:\Go\pkg\tool\windows_amd64
set GOVCS=
set GOVERSION=go1.20.1
set GCCGO=gccgo
set GOAMD64=v1
set AR=ar
set CC=gcc
set CXX=g++
set CGO_ENABLED=0
set GOMOD=D:\Projects\weaver\go.mod
set GOWORK=
set CGO_CFLAGS=-O2 -g
set CGO_CPPFLAGS=
set CGO_CXXFLAGS=-O2 -g
set CGO_FFLAGS=-O2 -g
set CGO_LDFLAGS=-O2 -g
set PKG_CONFIG=pkg-config
set GOGCCFLAGS=-m64 -fno-caret-diagnostics -Qunused-arguments -Wl,--no-gc-sections -fmessage-length=0 -fdebug-prefix-map=C:\Users\xxx\AppData\Local\Temp\go-build2543708436=/tmp/go-build -gno-record-gcc-switches
```

same with `go install` command\n\n--- Comments ---\ninstalling g++ compiler from: https://winlibs.com/ helped
exact package: `GCC 12.2.0 + LLVM/Clang/LLD/LLDB 15.0.7 + MinGW-w64 10.0.0 (UCRT) - release 4`\n```
$ go install github.com/ServiceWeaver/weaver-gke/cmd/weaver-gke-local@latest
# github.com/ServiceWeaver/weaver-gke/internal/local
C:\Users\xxx\go\pkg\mod\github.com\!service!weaver\weaver-gke@v0.1.0\internal\local\tool.go:82:43: unknown field Setpgid in struct literal of type syscall.SysProcAttr
C:\Users\xxx\go\pkg\mod\github.com\!service!weaver\weaver-gke@v0.1.0\internal\local\tool.go:91:48: unknown field Setpgid in struct literal of type syscall.SysProcAttr
C:\Users\xxx\go\pkg\mod\github.com\!service!weaver\weaver-gke@v0.1.0\internal\local\tool.go:115:50: unknown field Setpgid in struct literal of type syscall.SysProcAttr
```\nThanks for reporting, we haven't done our due diligence on Windows. We'll look into fixing this.\nTry set  CGO_ENABLED=1. After set this flag it works on my Windows machine.\n> Try set CGO_ENABLED=1. After set this flag it works on my Windows machine.

This worked for me as well. \n#169 should have fixed this issue. Please reopen if you still encounter any issues deploying on windows. ",802af47d258f66d4,https://github.com/ServiceWeaver/weaver/issues/81,"{'number': 81, 'state': 'closed', 'labels': [], 'created_at': '2023-03-02T19:19:14Z', 'closed_at': '2023-05-05T23:45:41Z', 'comments_count': 6, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/81/reactions', 'total_count': 2, '+1': 2, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-02. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_80,2023-03-02T15:06:02Z,"Will go channel be supported?\n\nHi all, thank you for making this dream framework come true. I have been looking forward to this kind of tool in Go for a long time.

But sadly I noticed that, in the Serializable Types section of [FAQ](https://serviceweaver.dev/docs.html#faq), `chan t` type is not supported.

I am wondering if there are any current plans or ongoing discussions around supporting it. As it is something that I need, I would be also interested in getting involved and contributing to its development.\n\n--- Comments ---\nThanks for your interest. Getting channels to work across the network does sound really interesting, albeit pretty intense to implement.

Could you please describe your use-case in a bit more detail?

\nHi @spetrovic77,

The most obvious use case is what we can have originally with grpc bidirectional streaming. It allows applications to communicate on a long-lived stream and have their own states in memory. This nature has helped me simplify my code for state management many times.

I understand that making channels work across the network is actually far more complex than grpc bidirectional streaming. Maybe supporting something like grpc bidirectional streaming is enough.\nI believe making channels work across network could be far more complex than we think, but I have an idea on it, don't know if it's workable. My idea is that we set up a channel registry center on weave framework, and you declare a make(chan int) on code, the framework scan it and register on the center, and we know in GO, channel can be two-way channel to one-way channel, we then use the channel on our code like <- chan and chan <- int\nThanks for all of your suggestions. We'll discuss this support soon. It looks fairly involved, please reach out to us at serviceweaver@google.com if you think this will unblock some major production usage.\nsure, will send an email to this address and try to contribute code if needed in this project. the idea of this project is great :)\nGreat idea, can not wait this feature with jsonRPC + WS support :).

Maybe it will be better to use something like io.Writer (or even more generic option) than go channel because io.Writer is safer option. With go channel you will need to check for closed state and if you will try to send data to closed channel runtime will be panic.

IMO.\nYou could provide a wrapper around the channels similar to: https://github.com/matryer/vice but this involves maintaining your own queue specific transport implementation e.g. rabbitMQ, kafka, NATs etc. \nAs everyone mentioned, making channels properly work over the network is complex.

There was a real attempt to have ""netchan"" in the stdlib but afaik this didn't land : [video](https://www.youtube.com/watch?v=sln-gJaURzk&t=2010s), [discussion](https://groups.google.com/g/golang-nuts/c/Er3TetntSmg)

My understanding on this is that, while wrapping the network to achieve message passing is doable, it is not currently possible to preserve the semantics of go channels. In a single machine we have good guarantees that a read and a write happen ""at the same time"" (wrt the memory model), but over the network we don't.\nWe've never managed to agree if we should add support for go channels. This work has been deprioritized. ",411b5d327f8000f2,https://github.com/ServiceWeaver/weaver/issues/80,"{'number': 80, 'state': 'closed', 'labels': [], 'created_at': '2023-03-02T15:06:02Z', 'closed_at': '2024-11-05T23:13:02Z', 'comments_count': 10, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/80/reactions', 'total_count': 8, '+1': 8, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-02. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_79,2023-03-02T04:08:11Z,"Missing stdlib.h\n\nFailed to install weaver: Missing stdlib.h

Which I managed to get around by using the following: `export CGO_ENABLED=1; export CC=gcc; go install github.com/ServiceWeaver/weaver/cmd/weaver@latest`. Not sure if it's worth mentioning this somewhere in the docs... Cheers!

```sh
go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

go: downloading github.com/ServiceWeaver/weaver v0.1.1
go: downloading github.com/google/cel-go v0.12.5
go: downloading github.com/pkg/browser v0.0.0-20210911075715-681adbf594b8
go: downloading google.golang.org/genproto v0.0.0-20221109142239-94d6d90a7d66
go: downloading go.opentelemetry.io/otel/trace v1.13.0
go: downloading golang.org/x/exp v0.0.0-20230206171751-46f607a40771
go: downloading go.opentelemetry.io/otel v1.13.0
go: downloading github.com/hashicorp/golang-lru/v2 v2.0.1
go: downloading github.com/mattn/go-sqlite3 v1.14.16
go: downloading go.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.7.0
# github.com/mattn/go-sqlite3
../../../go/pkg/mod/github.com/mattn/go-sqlite3@v1.14.16/backup.go:14:10: fatal error: 'stdlib.h' file not found
#include <stdlib.h>
         ^~~~~~~~~~
1 error generated.

```


Go env:
```
GO111MODULE=""""
GOARCH=""amd64""
GOBIN=""""
GOCACHE=""/Users/[HIDDEN]""
GOENV=""/Users/[HIDDEN]""
GOEXE=""""
GOEXPERIMENT=""""
GOFLAGS=""""
GOHOSTARCH=""amd64""
GOHOSTOS=""darwin""
GOINSECURE=""""
GOMODCACHE=""/Users/[HIDDEN]""
GONOPROXY=""""
GONOSUMDB=""""
GOOS=""darwin""
GOPATH=""/Users/[HIDDEN]""
GOPRIVATE=""""
GOPROXY=""https://proxy.golang.org,direct""
GOROOT=""/usr/local/Cellar/go/1.19.3/libexec""
GOSUMDB=""sum.golang.org""
GOTMPDIR=""""
GOTOOLDIR=""/usr/local/Cellar/go/1.19.3/libexec/pkg/tool/darwin_amd64""
GOVCS=""""
GOVERSION=""go1.19.3""
GCCGO=""gccgo""
GOAMD64=""v1""
AR=""ar""
CC=""gcc""
CXX=""clang++""
CGO_ENABLED=""1""
GOMOD=""[HIDDEN]""
GOWORK=""""
CGO_CFLAGS=""-g -O2""
CGO_CPPFLAGS=""""
CGO_CXXFLAGS=""-g -O2""
CGO_FFLAGS=""-g -O2""
CGO_LDFLAGS=""-g -O2""
PKG_CONFIG=""pkg-config""
GOGCCFLAGS=""-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/f7/pzdxngcx2cl4lm0xk722f3dr0000gr/T/go-build96214606=/tmp/go-build -gno-record-gcc-switches -fno-common""
```\n\n--- Comments ---\nIt would be worthwhile to provide more information about your environment, so that someone can try and reproduce or provide advice.

The output of `go env` might be a good start.\nThanks @slewiskelly, I have updated the description with the output of the `go env`\n@KadoBOT You probably missing xcode Command Line Tools under the MAC, so https://github.com/mattn/go-sqlite3 cannot be successfully installed\n@sumkincpp It wasn't the case for me. I even did a `xcode-select --install` to make sure, and got the same error. What's fixed for me was the input I provided in the description.\nYes, by setting the `export CC=gcc` flag which sets the right C compiler to use for building the binary which also includes the standard libraries. If GCC is installed properly this issue may not arise at all.\nThanks for reporting. May be similar to this issue filed against Golang:
https://github.com/golang/go/issues/39232

Not sure there's anything we can do other than point it out in our installation guide. We may also look at using non-CGO alternatives to sqlite.\nFor the cgo free sqlite driver, have a look at https://pkg.go.dev/modernc.org/sqlite\nOoh, that's awesome. We'll try it out and make the switch.

On Fri, Mar 3, 2023 at 11:02 AM Lucas Bremgartner ***@***.***>
wrote:

> For the cgo free sqlite driver, have a look at
> https://pkg.go.dev/modernc.org/sqlite
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/ServiceWeaver/weaver/issues/79#issuecomment-1453979529>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/ABJSQ6SJB3INGJ4FMM3YFWTW2I525ANCNFSM6AAAAAAVM3VK2Y>
> .
> You are receiving this because you were assigned.Message ID:
> ***@***.***>
>
\n@breml This is not a license I'm familiar with, unfortunately. Go seems to think it's okay, you think therefore it's okay to link to?
https://gitlab.com/cznic/sqlite/-/blob/v1.21.0/LICENSE\nBy a quick check to me, this looks like a [BSD 3-Clause “New” or “Revised” License](https://choosealicense.com/licenses/bsd-3-clause/) or similar.
That being said, I am not a lawer nor a specialist in licensing and I did not perform a word by word comparison.\nWe added a note about this issue in the installation section. Thank you all for checking and the fix.",bcc287acdb38b4ba,https://github.com/ServiceWeaver/weaver/issues/79,"{'number': 79, 'state': 'closed', 'labels': [], 'created_at': '2023-03-02T04:08:11Z', 'closed_at': '2023-03-03T22:34:56Z', 'comments_count': 11, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/79/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,"Temporal: early_adoption based on 2023-03-02. Resolution: acknowledged_not_fixed (state=closed, labels=[]). Root cause: unclear (code=)"
github_issue,gh_issue_48,2023-02-20T22:09:08Z,"Security Policy violation Binary Artifacts\n\n_This issue was automatically created by [Allstar](https://github.com/ossf/allstar/)._

**Security Policy Violation**
Project is out of compliance with Binary Artifacts policy: binaries present in source code

**Rule Description**
Binary Artifacts are an increased security risk in your repository. Binary artifacts cannot be reviewed, allowing the introduction of possibly obsolete or maliciously subverted executables. For more information see the [Security Scorecards Documentation](https://github.com/ossf/scorecard/blob/main/docs/checks.md#binary-artifacts) for Binary Artifacts.

**Remediation Steps**
To remediate, remove the generated executable artifacts from the repository.

**Artifacts Found**

- examples/onlineboutique/online_boutique

**Additional Information**
This policy is drawn from [Security Scorecards](https://github.com/ossf/scorecard/), which is a tool that scores a project's adherence to security best practices. You may wish to run a Scorecards scan directly on this repository for more details.

---

<!-- Edit section #updates --><!-- Current result text hash: 82be8aa6a3065565a8c03243562036b855e7b1d1072dca05c2854e1f2e302966 --><!-- Edit section #updates -->
Allstar has been installed on all Google managed GitHub orgs. Policies are gradually being rolled out and enforced by the GOSST and OSPO teams. Learn more at http://go/allstar

This issue will auto resolve when the policy is in compliance.

Issue created by Allstar. See https://github.com/ossf/allstar/ for more information. For questions specific to the repository, please contact the owner or maintainer.\n\n--- Comments ---\nUpdating issue after ping interval. See its status below.

---

Project is out of compliance with Binary Artifacts policy: binaries present in source code

**Rule Description**
Binary Artifacts are an increased security risk in your repository. Binary artifacts cannot be reviewed, allowing the introduction of possibly obsolete or maliciously subverted executables. For more information see the [Security Scorecards Documentation](https://github.com/ossf/scorecard/blob/main/docs/checks.md#binary-artifacts) for Binary Artifacts.

**Remediation Steps**
To remediate, remove the generated executable artifacts from the repository.

**Artifacts Found**

- examples/onlineboutique/online_boutique

**Additional Information**
This policy is drawn from [Security Scorecards](https://github.com/ossf/scorecard/), which is a tool that scores a project's adherence to security best practices. You may wish to run a Scorecards scan directly on this repository for more details.\nPolicy is now in compliance. Closing issue.",e0f55c5edeeb68c3,https://github.com/ServiceWeaver/weaver/issues/48,"{'number': 48, 'state': 'closed', 'labels': ['allstar'], 'created_at': '2023-02-20T22:09:08Z', 'closed_at': '2023-02-21T22:22:25Z', 'comments_count': 2, 'reactions': {'url': 'https://api.github.com/repos/ServiceWeaver/weaver/issues/48/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'language': 'en'}",pre_launch,acknowledged_not_fixed,unclear,"Temporal: pre_launch based on 2023-02-20. Resolution: acknowledged_not_fixed (state=closed, labels=['allstar']). Root cause: unclear (code=)"
github_pr,gh_pr_813,2025-04-16T22:12:56Z,"Bump golang.org/x/net from 0.25.0 to 0.38.0\n\nBumps [golang.org/x/net](https://github.com/golang/net) from 0.25.0 to 0.38.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/golang/net/commit/e1fcd82abba34df74614020343be8eb1fe85f0d9""><code>e1fcd82</code></a> html: properly handle trailing solidus in unquoted attribute value in foreign...</li>
<li><a href=""https://github.com/golang/net/commit/ebed060e8f30f20235f74808c22125fd86b15edd""><code>ebed060</code></a> internal/http3: fix build of tests with GOEXPERIMENT=nosynctest</li>
<li><a href=""https://github.com/golang/net/commit/1f1fa29e0a46fffe18c43a9da8daa5a0b180dfa9""><code>1f1fa29</code></a> publicsuffix: regenerate table</li>
<li><a href=""https://github.com/golang/net/commit/12150816f701c912a32a376754ab28dd3878833a""><code>1215081</code></a> http2: improve error when server sends HTTP/1</li>
<li><a href=""https://github.com/golang/net/commit/312450e473eae9f9e6173ad895c80bc5ea2f79ad""><code>312450e</code></a> html: ensure &lt;search&gt; tag closes &lt;p&gt; and update tests</li>
<li><a href=""https://github.com/golang/net/commit/09731f9bf919b00b344c763894cd1920b3d96d90""><code>09731f9</code></a> http2: improve handling of lost PING in Server</li>
<li><a href=""https://github.com/golang/net/commit/55989e24b972a90ab99308fdc7ea1fb58a96fef1""><code>55989e2</code></a> http2/h2c: use ResponseController for hijacking connections</li>
<li><a href=""https://github.com/golang/net/commit/2914f46773171f4fa13e276df1135bafef677801""><code>2914f46</code></a> websocket: re-recommend gorilla/websocket</li>
<li><a href=""https://github.com/golang/net/commit/99b3ae0643f9a2f9d820fcbba5f9e4c83b23bd48""><code>99b3ae0</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/net/commit/85d1d54551b68719346cb9fec24b911da4e452a1""><code>85d1d54</code></a> go.mod: update golang.org/x dependencies</li>
<li>Additional commits viewable in <a href=""https://github.com/golang/net/compare/v0.25.0...v0.38.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/net&package-manager=go_modules&previous-version=0.25.0&new-version=0.38.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/813,"{'number': 813, 'state': 'open', 'merged': False, 'created_at': '2025-04-16T22:12:56Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",post_discontinuation,unknown,unclear,"Temporal: post_discontinuation based on 2025-04-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_811,2025-04-14T18:17:55Z,"Bump golang.org/x/crypto from 0.23.0 to 0.35.0\n\nBumps [golang.org/x/crypto](https://github.com/golang/crypto) from 0.23.0 to 0.35.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/golang/crypto/commit/7292932d45d55c7199324ab0027cc86e8198aa22""><code>7292932</code></a> ssh: limit the size of the internal packet queue while waiting for KEX</li>
<li><a href=""https://github.com/golang/crypto/commit/f66f74b0a406b5f6909183531ace593857f1646c""><code>f66f74b</code></a> acme/autocert: check host policy before probing the cache</li>
<li><a href=""https://github.com/golang/crypto/commit/b0784b7bfbe0b2c9a59afc1248ed3cb4b6652e85""><code>b0784b7</code></a> x509roots/fallback: drop obsolete build constraint</li>
<li><a href=""https://github.com/golang/crypto/commit/911360c8a4f464342b9fe7c23632be57fca87b20""><code>911360c</code></a> all: bump golang.org/x/crypto dependencies of asm generators</li>
<li><a href=""https://github.com/golang/crypto/commit/89ff08d67c4d79f9ac619aaf1f7388888798651f""><code>89ff08d</code></a> all: upgrade go directive to at least 1.23.0 [generated]</li>
<li><a href=""https://github.com/golang/crypto/commit/e47973b1c1089f6c67ab89261f7aa067b3d611d2""><code>e47973b</code></a> all: update certs for go1.24</li>
<li><a href=""https://github.com/golang/crypto/commit/9290511cd23ab9813a307b7f2615325e3ca98902""><code>9290511</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/crypto/commit/fa5273e461966728f91f33da62c0cf511a404c2a""><code>fa5273e</code></a> x509roots/fallback: update bundle</li>
<li><a href=""https://github.com/golang/crypto/commit/a8ea4be81f0769fd5857e087083cbb6d3cb9f196""><code>a8ea4be</code></a> ssh: add ServerConfig.PreAuthConnCallback, ServerPreAuthConn (banner) interface</li>
<li><a href=""https://github.com/golang/crypto/commit/71d3a4cfdb0360795ce5f2d7041e01823fd22eb6""><code>71d3a4c</code></a> acme: support challenges that require the ACME client to send a non-empty JSO...</li>
<li>Additional commits viewable in <a href=""https://github.com/golang/crypto/compare/v0.23.0...v0.35.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/crypto&package-manager=go_modules&previous-version=0.23.0&new-version=0.35.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/811,"{'number': 811, 'state': 'open', 'merged': False, 'created_at': '2025-04-14T18:17:55Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",post_discontinuation,unknown,unclear,"Temporal: post_discontinuation based on 2025-04-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_810,2025-03-18T00:06:22Z,"Bump github.com/containerd/containerd from 1.7.11 to 1.7.27\n\nBumps [github.com/containerd/containerd](https://github.com/containerd/containerd) from 1.7.11 to 1.7.27.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/containerd/containerd/releases"">github.com/containerd/containerd's releases</a>.</em></p>
<blockquote>
<h2>containerd 1.7.27</h2>
<p>Welcome to the v1.7.27 release of containerd!</p>
<p>The twenty-seventh patch release for containerd 1.7 contains various fixes
and updates.</p>
<h3>Highlights</h3>
<ul>
<li>Fix integer overflow in User ID handling (<a href=""https://github.com/containerd/containerd/security/advisories/GHSA-265r-hfxg-fhmg"">GHSA-265r-hfxg-fhmg</a>)</li>
<li>Update image type checks to avoid unnecessary logs for attestations (<a href=""https://redirect.github.com/containerd/containerd/pull/11538"">#11538</a>)</li>
</ul>
<p>Please try out the release binaries and report any issues at
<a href=""https://github.com/containerd/containerd/issues"">https://github.com/containerd/containerd/issues</a>.</p>
<h3>Contributors</h3>
<ul>
<li>Jin Dong</li>
<li>Akhil Mohan</li>
<li>Derek McGowan</li>
<li>Maksym Pavlenko</li>
<li>Paweł Gronowski</li>
<li>Phil Estes</li>
<li>Akihiro Suda</li>
<li>Craig Ingram</li>
<li>Krisztian Litkey</li>
<li>Samuel Karp</li>
</ul>
<h3>Changes</h3>
<!-- raw HTML omitted -->
<ul>
<li><a href=""https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da""><code>05044ec0a</code></a> Merge commit from fork</li>
<li><a href=""https://github.com/containerd/containerd/commit/11504c3fc5f45634f2d93d57743a998194430b82""><code>11504c3fc</code></a> validate uid/gid</li>
<li>Prepare release notes for v1.7.27 (<a href=""https://redirect.github.com/containerd/containerd/pull/11540"">#11540</a>)
<ul>
<li><a href=""https://github.com/containerd/containerd/commit/1be04be6c307a7f67423574ca1b9744e57377753""><code>1be04be6c</code></a> Prepare release notes for v1.7.27</li>
</ul>
</li>
<li>Update image type checks to avoid unnecessary logs for attestations (<a href=""https://redirect.github.com/containerd/containerd/pull/11538"">#11538</a>)
<ul>
<li><a href=""https://github.com/containerd/containerd/commit/82b5c43fed40d1f32e88215a3f0acbaf8cd9af10""><code>82b5c43fe</code></a> core/remotes: Handle attestations in MakeRefKey</li>
<li><a href=""https://github.com/containerd/containerd/commit/2c670e79bf19bc7716c8b9f1f82c700ad8233af3""><code>2c670e79b</code></a> core/images: Ignore attestations when traversing children</li>
</ul>
</li>
<li>update build to go1.23.7, test go1.24.1 (<a href=""https://redirect.github.com/containerd/containerd/pull/11515"">#11515</a>)
<ul>
<li><a href=""https://github.com/containerd/containerd/commit/a39863c9fd52abb50895a4b6f653cf501a2e3388""><code>a39863c9f</code></a> update build to go1.23.7, test go1.24.1</li>
</ul>
</li>
<li>Remove hashicorp/go-multierror dependency and fix CI (<a href=""https://redirect.github.com/containerd/containerd/pull/11499"">#11499</a>)
<ul>
<li><a href=""https://github.com/containerd/containerd/commit/49537b3a75bdcd982e7e26855779b346bb363a54""><code>49537b3a7</code></a> e2e: use the shim bundled with containerd artifact</li>
<li><a href=""https://github.com/containerd/containerd/commit/fe490b76fd78cc1461f20aab89951be5f88fc454""><code>fe490b76f</code></a> Bump up github.com/intel/goresctrl to 0.5.0</li>
<li><a href=""https://github.com/containerd/containerd/commit/13fc9d3132fc4c77f6533551049d2d865d4e4b45""><code>13fc9d313</code></a> update containerd/project-checks to 1.2.1</li>
<li><a href=""https://github.com/containerd/containerd/commit/585699c94f68649a89b0af46d675d6e998d67ccd""><code>585699c94</code></a> Remove unnecessary joinError unwrap</li>
<li><a href=""https://github.com/containerd/containerd/commit/4b9df59be202a011c4f65604bbeab75eeb85ab46""><code>4b9df59be</code></a> Remove hashicorp/go-multierror</li>
</ul>
</li>
<li>go.{mod,sum}: bump CDI deps to v0.8.1. (<a href=""https://redirect.github.com/containerd/containerd/pull/11422"">#11422</a>)
<ul>
<li><a href=""https://github.com/containerd/containerd/commit/5ba28f8dc1d007059ed3eb1a7b55025e72abd525""><code>5ba28f8dc</code></a> go.{mod,sum}: bump CDI deps to v0.8.1, re-vendor.</li>
</ul>
</li>
<li>CI: arm64-8core-32gb -&gt; ubuntu-24.04-arm (<a href=""https://redirect.github.com/containerd/containerd/pull/11437"">#11437</a>)
<ul>
<li><a href=""https://github.com/containerd/containerd/commit/85f10bd9221f35ef1c2b8ec2d67520f461aa51a0""><code>85f10bd92</code></a> CI: arm64-8core-32gb -&gt; ubuntu-24.04-arm</li>
</ul>
</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da""><code>05044ec</code></a> Merge commit from fork</li>
<li><a href=""https://github.com/containerd/containerd/commit/0b7f2a55f71f04a3655e9576ab22377c3e45f32d""><code>0b7f2a5</code></a> Merge pull request <a href=""https://redirect.github.com/containerd/containerd/issues/11540"">#11540</a> from dmcgowan/prepare-1.7.27</li>
<li><a href=""https://github.com/containerd/containerd/commit/574a30406e06045a602f8fab59c2e0e725de6e24""><code>574a304</code></a> Merge pull request <a href=""https://redirect.github.com/containerd/containerd/issues/11538"">#11538</a> from dmcgowan/backport-11327</li>
<li><a href=""https://github.com/containerd/containerd/commit/1be04be6c307a7f67423574ca1b9744e57377753""><code>1be04be</code></a> Prepare release notes for v1.7.27</li>
<li><a href=""https://github.com/containerd/containerd/commit/82b5c43fed40d1f32e88215a3f0acbaf8cd9af10""><code>82b5c43</code></a> core/remotes: Handle attestations in MakeRefKey</li>
<li><a href=""https://github.com/containerd/containerd/commit/2c670e79bf19bc7716c8b9f1f82c700ad8233af3""><code>2c670e7</code></a> core/images: Ignore attestations when traversing children</li>
<li><a href=""https://github.com/containerd/containerd/commit/11504c3fc5f45634f2d93d57743a998194430b82""><code>11504c3</code></a> validate uid/gid</li>
<li><a href=""https://github.com/containerd/containerd/commit/576178b68be9a90ae0b6cf4e88775a128728eeea""><code>576178b</code></a> Merge pull request <a href=""https://redirect.github.com/containerd/containerd/issues/11515"">#11515</a> from akhilerm/1.7-updatego1.24.1</li>
<li><a href=""https://github.com/containerd/containerd/commit/a39863c9fd52abb50895a4b6f653cf501a2e3388""><code>a39863c</code></a> update build to go1.23.7, test go1.24.1</li>
<li><a href=""https://github.com/containerd/containerd/commit/8946aa0233d679e9bb3d6d7f9d89ba39a4819b74""><code>8946aa0</code></a> Merge pull request <a href=""https://redirect.github.com/containerd/containerd/issues/11499"">#11499</a> from djdongjin/1-7-remove-hashi-multierror</li>
<li>Additional commits viewable in <a href=""https://github.com/containerd/containerd/compare/v1.7.11...v1.7.27"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=github.com/containerd/containerd&package-manager=go_modules&previous-version=1.7.11&new-version=1.7.27)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/810,"{'number': 810, 'state': 'open', 'merged': False, 'created_at': '2025-03-18T00:06:22Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",post_discontinuation,unknown,unclear,"Temporal: post_discontinuation based on 2025-03-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_809,2025-03-13T00:49:30Z,"Bump golang.org/x/net from 0.25.0 to 0.36.0\n\nBumps [golang.org/x/net](https://github.com/golang/net) from 0.25.0 to 0.36.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/golang/net/commit/85d1d54551b68719346cb9fec24b911da4e452a1""><code>85d1d54</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/net/commit/cde1dda944dcf6350753df966bb5bda87a544842""><code>cde1dda</code></a> proxy, http/httpproxy: do not mismatch IPv6 zone ids against hosts</li>
<li><a href=""https://github.com/golang/net/commit/fe7f0391aa994a401c82d829183c1efab7a64df4""><code>fe7f039</code></a> publicsuffix: spruce up code gen and speed up PublicSuffix</li>
<li><a href=""https://github.com/golang/net/commit/459513d1f8abff01b4854c93ff0bff7e87985a0a""><code>459513d</code></a> internal/http3: move more common stream processing to genericConn</li>
<li><a href=""https://github.com/golang/net/commit/aad0180cad195ab7bcd14347e7ab51bece53f61d""><code>aad0180</code></a> http2: fix flakiness from t.Log when GOOS=js</li>
<li><a href=""https://github.com/golang/net/commit/b73e5746f64471c22097f07593643a743e7cfb0f""><code>b73e574</code></a> http2: don't log expected errors from writing invalid trailers</li>
<li><a href=""https://github.com/golang/net/commit/5f45c776a9c4d415cbe67d6c22c06fd704f8c9f1""><code>5f45c77</code></a> internal/http3: make read-data tests usable for server handlers</li>
<li><a href=""https://github.com/golang/net/commit/43c2540165a4d1bc9a81e06a86eb1e22ece64145""><code>43c2540</code></a> http2, internal/httpcommon: reject userinfo in :authority</li>
<li><a href=""https://github.com/golang/net/commit/1d78a085008d9fedfe3f303591058325f99727d7""><code>1d78a08</code></a> http2, internal/httpcommon: factor out server header logic for h2/h3</li>
<li><a href=""https://github.com/golang/net/commit/0d7dc54a591c12b4bd03bcd745024178d03d9218""><code>0d7dc54</code></a> quic: add Conn.ConnectionState</li>
<li>Additional commits viewable in <a href=""https://github.com/golang/net/compare/v0.25.0...v0.36.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/net&package-manager=go_modules&previous-version=0.25.0&new-version=0.36.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/809,"{'number': 809, 'state': 'closed', 'merged': False, 'created_at': '2025-03-13T00:49:30Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",post_discontinuation,unknown,unclear,"Temporal: post_discontinuation based on 2025-03-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_808,2025-01-29T20:21:49Z,"Bump golang.org/x/net from 0.25.0 to 0.33.0\n\nBumps [golang.org/x/net](https://github.com/golang/net) from 0.25.0 to 0.33.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/golang/net/commit/dfc720dfe0cfc125116068c20efcdcb5e4eab464""><code>dfc720d</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/net/commit/8e66b04771e35c4e4125e8c60334b34e2423effb""><code>8e66b04</code></a> html: use strings.EqualFold instead of lowering ourselves</li>
<li><a href=""https://github.com/golang/net/commit/b935f7b5d723c82894e1a1fd936a94dd2d1eae46""><code>b935f7b</code></a> html: avoid endless loop on error token</li>
<li><a href=""https://github.com/golang/net/commit/9af49ef148d7d8b3e4cbbd9cc0cd37f2a520a4a3""><code>9af49ef</code></a> route: remove unused sizeof* consts</li>
<li><a href=""https://github.com/golang/net/commit/6705db9a4df8f2cf16aed83e773e7a0213788b7a""><code>6705db9</code></a> quic: clean up crypto streams when dropping packet protection keys</li>
<li><a href=""https://github.com/golang/net/commit/4ef7588d2b3f83775099797baac43c34e2e23200""><code>4ef7588</code></a> quic: handle ACK frame in packet which drops number space</li>
<li><a href=""https://github.com/golang/net/commit/552d8ac903a11a9fde71a88732f5b58b6b394178""><code>552d8ac</code></a> Revert &quot;route: change from syscall to x/sys/unix&quot;</li>
<li><a href=""https://github.com/golang/net/commit/13a7c0108bd38aad013797cdb95e6bfca0bbcec6""><code>13a7c01</code></a> Revert &quot;route: remove unused sizeof* consts on freebsd&quot;</li>
<li><a href=""https://github.com/golang/net/commit/285e1cf6650f407805ea8af9255624961b768479""><code>285e1cf</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/net/commit/d0a1049b7e05d3d6f62570a8381a22301a97ae73""><code>d0a1049</code></a> route: remove unused sizeof* consts on freebsd</li>
<li>Additional commits viewable in <a href=""https://github.com/golang/net/compare/v0.25.0...v0.33.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/net&package-manager=go_modules&previous-version=0.25.0&new-version=0.33.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/808,"{'number': 808, 'state': 'closed', 'merged': False, 'created_at': '2025-01-29T20:21:49Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",post_discontinuation,unknown,unclear,"Temporal: post_discontinuation based on 2025-01-29. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_806,2024-12-12T00:10:18Z,"Bump golang.org/x/crypto from 0.23.0 to 0.31.0\n\nBumps [golang.org/x/crypto](https://github.com/golang/crypto) from 0.23.0 to 0.31.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/golang/crypto/commit/b4f1988a35dee11ec3e05d6bf3e90b695fbd8909""><code>b4f1988</code></a> ssh: make the public key cache a 1-entry FIFO cache</li>
<li><a href=""https://github.com/golang/crypto/commit/7042ebcbe097f305ba3a93f9a22b4befa4b83d29""><code>7042ebc</code></a> openpgp/clearsign: just use rand.Reader in tests</li>
<li><a href=""https://github.com/golang/crypto/commit/3e90321ac7bcee3d924ed63ed3ad97be2079cb56""><code>3e90321</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/crypto/commit/8c4e668694ccbaa1be4785da7e7a40f2ef93152b""><code>8c4e668</code></a> x509roots/fallback: update bundle</li>
<li><a href=""https://github.com/golang/crypto/commit/6018723c74059e3b91c84268b212c2f6cdab1f64""><code>6018723</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/crypto/commit/71ed71b4faf97caafd1863fed003e9ac311f10ee""><code>71ed71b</code></a> README: don't recommend go get</li>
<li><a href=""https://github.com/golang/crypto/commit/750a45fe5e473d5afa193e9088f3d135e64eca26""><code>750a45f</code></a> sha3: add MarshalBinary, AppendBinary, and UnmarshalBinary</li>
<li><a href=""https://github.com/golang/crypto/commit/36b172546bd03a74c79e109ec84c599b672ea9e4""><code>36b1725</code></a> sha3: avoid trailing permutation</li>
<li><a href=""https://github.com/golang/crypto/commit/80ea76eb17c0c52f5d5d04e833d6aeb6b062d81d""><code>80ea76e</code></a> sha3: fix padding for long cSHAKE parameters</li>
<li><a href=""https://github.com/golang/crypto/commit/c17aa50fbd32393e5d52fa65ca51cbfff0a75aea""><code>c17aa50</code></a> sha3: avoid buffer copy</li>
<li>Additional commits viewable in <a href=""https://github.com/golang/crypto/compare/v0.23.0...v0.31.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/crypto&package-manager=go_modules&previous-version=0.23.0&new-version=0.31.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/806,"{'number': 806, 'state': 'closed', 'merged': False, 'created_at': '2024-12-12T00:10:18Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-12-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_805,2024-11-08T18:27:08Z,Fixed style turndown\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/805,"{'number': 805, 'state': 'closed', 'merged': False, 'created_at': '2024-11-08T18:27:08Z', 'merged_at': '2024-11-08T18:29:36Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-11-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_804,2024-11-08T18:09:29Z,Updated style for the turndown message\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/804,"{'number': 804, 'state': 'closed', 'merged': False, 'created_at': '2024-11-08T18:09:29Z', 'merged_at': '2024-11-08T18:16:46Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-11-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_803,2024-11-05T21:22:24Z,Turndown message\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/803,"{'number': 803, 'state': 'closed', 'merged': False, 'created_at': '2024-11-05T21:22:24Z', 'merged_at': '2024-11-07T17:18:56Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-11-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_801,2024-10-18T02:26:53Z,"Fix: Superfluous response.WriteHeader call in otelhttp\n\nThis PR updates the OpenTelemetry packages to address the `http: superfluous response.WriteHeader call` error originating from `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp/internal/request.(*RespWriterWrapper).writeHeader`.

This issue is resolved in the updated OpenTelemetry version, as confirmed by the corresponding pull request in the OpenTelemetry repository: https://github.com/open-telemetry/opentelemetry-go-contrib/pull/6055.

This update ensures accurate HTTP response handling and eliminates the error message.",6722988900ed0ccb,https://github.com/ServiceWeaver/weaver/pull/801,"{'number': 801, 'state': 'open', 'merged': False, 'created_at': '2024-10-18T02:26:53Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-10-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_798,2024-09-06T16:14:48Z,Add documentation on how to propagate context information\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/798,"{'number': 798, 'state': 'closed', 'merged': False, 'created_at': '2024-09-06T16:14:48Z', 'merged_at': '2024-09-06T18:21:12Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-09-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_796,2024-09-04T17:58:25Z,"Add build tags support\n\n`go build` allows the user to specify build tags. These tags enable the user to discard files based on various tags when they build the application binary.

`weaver generate` which is a wrapper around `go build` doesn't allow the user to specify build tags.

This PR adds built tags support for the `weaver generate` command.

The syntax of passing build tags to the `weaver generate` command is similar to how build tags are specified when using `go build`.

E.g.,

weaver generate -tags good,prod
weaver generate --tags=good",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/796,"{'number': 796, 'state': 'closed', 'merged': False, 'created_at': '2024-09-04T17:58:25Z', 'merged_at': '2024-09-10T20:59:58Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-09-04. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_795,2024-09-03T19:53:32Z,"Bump github.com/opencontainers/runc from 1.1.12 to 1.1.14\n\nBumps [github.com/opencontainers/runc](https://github.com/opencontainers/runc) from 1.1.12 to 1.1.14.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/opencontainers/runc/releases"">github.com/opencontainers/runc's releases</a>.</em></p>
<blockquote>
<h2>runc v1.1.14 -- &quot;年を取っていいことは、驚かなくなることね。&quot;</h2>
<p>This is the fourteenth patch release in the 1.1.z release branch of
runc. It includes a fix for a low severity security issue
(CVE-2024-45310) as well as some minor build-related fixes (including Go
1.23 support).</p>
<ul>
<li>Fix <a href=""https://github.com/opencontainers/runc/security/advisories/GHSA-jfvp-7x6p-h2pv"">CVE-2024-45310</a>, a low-severity attack that allowed
maliciously configured containers to create empty files and directories on
the host.</li>
<li>Add support for Go 1.23. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4360"">#4360</a>, <a href=""https://redirect.github.com/opencontainers/runc/issues/4372"">#4372</a>)</li>
<li>Revert &quot;allow overriding VERSION value in Makefile&quot; and add EXTRA_VERSION.
(<a href=""https://redirect.github.com/opencontainers/runc/issues/4370"">#4370</a>, <a href=""https://redirect.github.com/opencontainers/runc/issues/4382"">#4382</a>)</li>
<li>rootfs: consolidate mountpoint creation logic. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4359"">#4359</a>)</li>
</ul>
<h3>Static Linking Notices</h3>
<p>The <code>runc</code> binary distributed with this release are <em>statically linked</em> with
the following <a href=""https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html"">GNU LGPL-2.1</a> licensed libraries, with <code>runc</code> acting
as a &quot;work that uses the Library&quot;:</p>
<ul>
<li><a href=""https://github.com/seccomp/libseccomp"">libseccomp</a></li>
</ul>
<p>The versions of these libraries were not modified from their upstream versions,
but in order to comply with the LGPL-2.1 (§6(a)), we have attached the
complete source code for those libraries which (when combined with the attached
runc source code) may be used to exercise your rights under the LGPL-2.1.</p>
<p>However we strongly suggest that you make use of your distribution's packages
or download them from the authoritative upstream sources, especially since
these libraries are related to the security of your containers.</p>
<!-- raw HTML omitted -->
<p>Thanks to all of the contributors who made this release possible:</p>
<ul>
<li>Akihiro Suda <a href=""mailto:akihiro.suda.cz@hco.ntt.co.jp"">akihiro.suda.cz@hco.ntt.co.jp</a></li>
<li>Aleksa Sarai <a href=""mailto:cyphar@cyphar.com"">cyphar@cyphar.com</a></li>
<li>Kir Kolyshkin <a href=""mailto:kolyshkin@gmail.com"">kolyshkin@gmail.com</a></li>
<li>Rodrigo Campos <a href=""mailto:rodrigoca@microsoft.com"">rodrigoca@microsoft.com</a></li>
<li>Sebastiaan van Stijn <a href=""mailto:thaJeztah@users.noreply.github.com"">thaJeztah@users.noreply.github.com</a></li>
<li>lifubang <a href=""mailto:lifubang@acmcoder.com"">lifubang@acmcoder.com</a></li>
</ul>
<p>Signed-off-by: Aleksa Sarai <a href=""mailto:cyphar@cyphar.com"">cyphar@cyphar.com</a></p>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/opencontainers/runc/blob/main/CHANGELOG.md"">github.com/opencontainers/runc's changelog</a>.</em></p>
<blockquote>
<h2>[1.1.14] - 2024-09-03</h2>
<blockquote>
<p>年を取っていいことは、驚かなくなることね。</p>
</blockquote>
<h3>Security</h3>
<ul>
<li>Fix <a href=""https://github.com/opencontainers/runc/security/advisories/GHSA-jfvp-7x6p-h2pv"">CVE-2024-45310</a>, a low-severity attack that allowed
maliciously configured containers to create empty files and directories on
the host.</li>
</ul>
<h3>Added</h3>
<ul>
<li>Add support for Go 1.23. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4360"">#4360</a>, <a href=""https://redirect.github.com/opencontainers/runc/issues/4372"">#4372</a>)</li>
</ul>
<h3>Fixed</h3>
<ul>
<li>Revert &quot;allow overriding VERSION value in Makefile&quot; and add <code>EXTRA_VERSION</code>.
(<a href=""https://redirect.github.com/opencontainers/runc/issues/4370"">#4370</a>, <a href=""https://redirect.github.com/opencontainers/runc/issues/4382"">#4382</a>)</li>
<li>rootfs: consolidate mountpoint creation logic. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4359"">#4359</a>)</li>
</ul>
<h2>[1.1.13] - 2024-06-13</h2>
<blockquote>
<p>There is no certainty in the world. This is the only certainty I have.</p>
</blockquote>
<h3>Important Notes</h3>
<ul>
<li>If building with Go 1.22.x, make sure to use 1.22.4 or a later version.
(see <a href=""https://redirect.github.com/opencontainers/runc/issues/4233"">#4233</a> for more details)</li>
</ul>
<h3>Fixed</h3>
<ul>
<li>Support go 1.22.4+. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4313"">#4313</a>)</li>
<li>runc list: fix race with runc delete. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4231"">#4231</a>)</li>
<li>Fix set nofile rlimit error. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4277"">#4277</a>, <a href=""https://redirect.github.com/opencontainers/runc/issues/4299"">#4299</a>)</li>
<li>libct/cg/fs: fix setting rt_period vs rt_runtime. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4284"">#4284</a>)</li>
<li>Fix a debug msg for user ns in nsexec. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4315"">#4315</a>)</li>
<li>script/*: fix gpg usage wrt keyboxd. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4316"">#4316</a>)</li>
<li>CI fixes and misc backports. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4241"">#4241</a>)</li>
<li>Fix codespell warnings. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4300"">#4300</a>)</li>
</ul>
<h3>Changed</h3>
<ul>
<li>Silence security false positives from golang/net. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4244"">#4244</a>)</li>
<li>libcontainer: allow containers to make apps think fips is enabled/disabled for testing. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4257"">#4257</a>)</li>
<li>allow overriding VERSION value in Makefile. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4270"">#4270</a>)</li>
<li>Vagrantfile.fedora: bump Fedora to 39. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4261"">#4261</a>)</li>
<li>ci/cirrus: rm centos stream 8. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4305"">#4305</a>, <a href=""https://redirect.github.com/opencontainers/runc/issues/4308"">#4308</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/opencontainers/runc/commit/2c9f5602f0ba3d9da1c2596322dfc4e156844890""><code>2c9f560</code></a> VERSION: release 1.1.14</li>
<li><a href=""https://github.com/opencontainers/runc/commit/a86c3d88370ab5d2accfd64488c2da105f540f1c""><code>a86c3d8</code></a> Merge commit from fork</li>
<li><a href=""https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf""><code>f0b652e</code></a> [1.1] rootfs: try to scope MkdirAll to stay inside the rootfs</li>
<li><a href=""https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e""><code>8781993</code></a> [1.1] rootfs: consolidate mountpoint creation logic</li>
<li><a href=""https://github.com/opencontainers/runc/commit/6419fbabfbd6317f806748abb18c23e1369b7073""><code>6419fba</code></a> Merge pull request <a href=""https://redirect.github.com/opencontainers/runc/issues/4382"">#4382</a> from rata/Makefile-override-fixes</li>
<li><a href=""https://github.com/opencontainers/runc/commit/0514204d6fcca144d54b6db32a8112c135fca0b7""><code>0514204</code></a> Makefile: Add EXTRA_VERSION</li>
<li><a href=""https://github.com/opencontainers/runc/commit/18cdc3476f911b0905d46a6680130c5133b33354""><code>18cdc34</code></a> Revert &quot;allow overriding VERSION value in Makefile&quot;</li>
<li><a href=""https://github.com/opencontainers/runc/commit/f3f71a9347f0fbb6122a89f8f54a129c4cd8e278""><code>f3f71a9</code></a> Merge pull request <a href=""https://redirect.github.com/opencontainers/runc/issues/4372"">#4372</a> from kolyshkin/1.1-go123</li>
<li><a href=""https://github.com/opencontainers/runc/commit/7f75aec407e8df28ca0a3a47d3913681e334a93b""><code>7f75aec</code></a> [1.1] Add Go 1.23, drop 1.21</li>
<li><a href=""https://github.com/opencontainers/runc/commit/931f46304b3d1996a4bbae43f72e885b50a7b2b0""><code>931f463</code></a> Merge pull request <a href=""https://redirect.github.com/opencontainers/runc/issues/4361"">#4361</a> from austinvazquez/backport-protobuf-updates-to-1.1</li>
<li>Additional commits viewable in <a href=""https://github.com/opencontainers/runc/compare/v1.1.12...v1.1.14"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=github.com/opencontainers/runc&package-manager=go_modules&previous-version=1.1.12&new-version=1.1.14)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

You can trigger a rebase of this PR by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>

> **Note**
> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.
",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/795,"{'number': 795, 'state': 'closed', 'merged': False, 'created_at': '2024-09-03T19:53:32Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-09-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_794,2024-08-21T17:48:18Z,"Fix traffic graph\n\nAfter we introduced system components (weavelet control and deployment control), the traffic graph doesn't display anything in the weaver multi dashboard.

This is because when we display the graph, we look at the components of the application and then we try to match them to the traffic between them. However, the edges show traffic for components that are missing from the status (e.g., the system components). Hence, when we display the graph there is no 1:1 mapping between components and the traffic between them.

This PR fixes this issue by not displaying traffic for system components (in fact the user shouldn't care about that). Maybe a better fix would be to do this in the javascript itself, but we can do that in the future if needed.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/794,"{'number': 794, 'state': 'closed', 'merged': False, 'created_at': '2024-08-21T17:48:18Z', 'merged_at': '2024-08-23T18:12:34Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-08-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_789,2024-08-01T17:18:48Z,"Bump github.com/docker/docker from 24.0.9+incompatible to 25.0.6+incompatible\n\nBumps [github.com/docker/docker](https://github.com/docker/docker) from 24.0.9+incompatible to 25.0.6+incompatible.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/docker/docker/releases"">github.com/docker/docker's releases</a>.</em></p>
<blockquote>
<h2>v25.0.6</h2>
<h2>25.0.6</h2>
<p>For a full list of pull requests and changes in this release, refer to the relevant GitHub milestones:</p>
<ul>
<li><a href=""https://github.com/docker/cli/issues?q=is%3Aclosed+milestone%3A25.0.6"">docker/cli, 25.0.6 milestone</a></li>
<li><a href=""https://github.com/moby/moby/issues?q=is%3Aclosed+milestone%3A25.0.6"">moby/moby, 25.0.6 milestone</a></li>
<li>Deprecated and removed features, see <a href=""https://github.com/docker/cli/blob/v25.0.6/docs/deprecated.md"">Deprecated Features</a>.</li>
<li>Changes to the Engine API, see <a href=""https://github.com/moby/moby/blob/v25.0.6/docs/api/version-history.md"">API version history</a>.</li>
</ul>
<h3>Security</h3>
<p>This release contains a fix for <a href=""https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-41110"">CVE-2024-41110</a> / <a href=""https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq"">GHSA-v23v-6jw2-98fq</a> that impacted setups using <a href=""https://docs.docker.com/engine/extend/plugins_authorization/"">authorization plugins (AuthZ)</a> for access control.</p>
<h3>Bug fixes and enhancements</h3>
<ul>
<li>[25.0] remove erroneous <code>platform</code> from image <code>config</code> OCI descriptor in <code>docker save</code> output. <a href=""https://redirect.github.com/moby/moby/pull/47695"">moby/moby#47695</a></li>
<li>[25.0 backport] Fix a nil dereference when getting image history for images having layers without the <code>Created</code> value set. <a href=""https://redirect.github.com/moby/moby/pull/47759"">moby/moby#47759</a></li>
<li>[25.0 backport] apparmor: Allow confined runc to kill containers. <a href=""https://redirect.github.com/moby/moby/pull/47830"">moby/moby#47830</a></li>
<li>[25.0 backport] Fix an issue where rapidly promoting a Swarm node after another node was demoted could cause the promoted node to fail its promotion. <a href=""https://redirect.github.com/moby/moby/pull/47869"">moby/moby#47869</a></li>
<li>[25.0 backport] don't depend on containerd platform.Parse to return a typed error. <a href=""https://redirect.github.com/moby/moby/pull/47890"">moby/moby#47890</a></li>
<li>[25.0 backport] builder/mobyexporter: Add missing nil check <a href=""https://redirect.github.com/moby/moby/pull/47987"">moby/moby#47987</a></li>
</ul>
<h3>Packaging updates</h3>
<ul>
<li>Update AWS SDK Go v2 to v1.24.1 for AWS CloudWatch logging driver. <a href=""https://redirect.github.com/moby/moby/pull/47724"">moby/moby#47724</a></li>
<li>Update Go runtime to 1.21.12, which contains security fixes for <a href=""https://github.com/advisories/GHSA-hw49-2p59-3mhj"">CVE-2024-24791</a> <a href=""https://redirect.github.com/moby/moby/pull/48146"">moby/moby#48146</a></li>
<li>Update Containerd (static binaries only) to <a href=""https://github.com/containerd/containerd/releases/tag/v1.7.20"">v1.7.20</a>. <a href=""https://redirect.github.com/moby/moby/pull/48199"">moby/moby#48199</a></li>
</ul>
<p><strong>Full Changelog</strong>: <a href=""https://github.com/moby/moby/compare/v25.0.5...v25.0.6"">https://github.com/moby/moby/compare/v25.0.5...v25.0.6</a></p>
<h2>v25.0.5</h2>
<h2>25.0.5</h2>
<p>For a full list of pull requests and changes in this release, refer to the relevant GitHub milestones:</p>
<ul>
<li><a href=""https://github.com/docker/cli/issues?q=is%3Aclosed+milestone%3A25.0.5"">docker/cli, 25.0.5 milestone</a></li>
<li><a href=""https://github.com/moby/moby/issues?q=is%3Aclosed+milestone%3A25.0.5"">moby/moby, 25.0.5 milestone</a></li>
<li>Deprecated and removed features, see <a href=""https://github.com/docker/cli/blob/v25.0.5/docs/deprecated.md"">Deprecated Features</a>.</li>
<li>Changes to the Engine API, see <a href=""https://github.com/moby/moby/blob/v25.0.5/docs/api/version-history.md"">API version history</a>.</li>
</ul>
<h3>Security</h3>
<p>This release contains a security fix for <a href=""https://github.com/moby/moby/security/advisories/GHSA-mq39-4gv4-mvpx"">CVE-2024-29018</a>, a potential data exfiltration from 'internal' networks via authoritative DNS servers.</p>
<h3>Bug fixes and enhancements</h3>
<ul>
<li>
<p><a href=""https://github.com/moby/moby/security/advisories/GHSA-mq39-4gv4-mvpx"">CVE-2024-29018</a>: Do not forward requests to external DNS servers for a container that is only connected to an 'internal' network. Previously, requests were forwarded if the host's DNS server was running on a loopback address, like systemd's 127.0.0.53. <a href=""https://redirect.github.com/moby/moby/pull/47589"">moby/moby#47589</a></p>
</li>
<li>
<p>plugin: fix mounting /etc/hosts when running in UserNS. <a href=""https://redirect.github.com/moby/moby/pull/47588"">moby/moby#47588</a></p>
</li>
<li>
<p>rootless: fix <code>open /etc/docker/plugins: permission denied</code>. <a href=""https://redirect.github.com/moby/moby/pull/47587"">moby/moby#47587</a></p>
</li>
<li>
<p>Fix multiple parallel <code>docker build</code> runs leaking disk space. <a href=""https://redirect.github.com/moby/moby/pull/47527"">moby/moby#47527</a></p>
</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/moby/moby/commit/b08a51fe16eed67de3861c03b363ba403643b12e""><code>b08a51f</code></a> Merge pull request <a href=""https://redirect.github.com/docker/docker/issues/48231"">#48231</a> from austinvazquez/backport-vendor-otel-v0.46.1-to-...</li>
<li><a href=""https://github.com/moby/moby/commit/d151b0f87f9673f206b477c90db25956e1704ba5""><code>d151b0f</code></a> vendor: OTEL v0.46.1 / v1.21.0</li>
<li><a href=""https://github.com/moby/moby/commit/c6ba9a5124603357bfc4a64971cbb9708180f06e""><code>c6ba9a5</code></a> Merge pull request <a href=""https://redirect.github.com/docker/docker/issues/48225"">#48225</a> from austinvazquez/backport-workflow-artifact-reten...</li>
<li><a href=""https://github.com/moby/moby/commit/4673a3ca2c37ae30270a29c281ccd9477107dcee""><code>4673a3c</code></a> Merge pull request <a href=""https://redirect.github.com/docker/docker/issues/48227"">#48227</a> from austinvazquez/backport-backport-branch-check-t...</li>
<li><a href=""https://github.com/moby/moby/commit/30f89081028ce6fb1b49a71c02c156dacbe9aa62""><code>30f8908</code></a> github/ci: Check if backport is opened against the expected branch</li>
<li><a href=""https://github.com/moby/moby/commit/7454d6a2e672b0b977aaa14463c9aeb53acd06af""><code>7454d6a</code></a> ci: update workflow artifacts retention</li>
<li><a href=""https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919""><code>65cc597</code></a> Merge commit from fork</li>
<li><a href=""https://github.com/moby/moby/commit/b722836927669b414569c42f096869cd800b59a6""><code>b722836</code></a> Merge pull request <a href=""https://redirect.github.com/docker/docker/issues/48199"">#48199</a> from austinvazquez/update-containerd-binary-to-1.7.20</li>
<li><a href=""https://github.com/moby/moby/commit/e8ecb9c76d97579ebbf3f9d3ef770d08ac303809""><code>e8ecb9c</code></a> update containerd binary to v1.7.20</li>
<li><a href=""https://github.com/moby/moby/commit/e6cae1f2373d4ff37499570e67f23b2cebb7a043""><code>e6cae1f</code></a> update containerd binary to v1.7.19</li>
<li>Additional commits viewable in <a href=""https://github.com/docker/docker/compare/v24.0.9...v25.0.6"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=github.com/docker/docker&package-manager=go_modules&previous-version=24.0.9+incompatible&new-version=25.0.6+incompatible)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/789,"{'number': 789, 'state': 'closed', 'merged': False, 'created_at': '2024-08-01T17:18:48Z', 'merged_at': '2024-11-05T19:26:58Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-08-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_783,2024-07-17T20:51:44Z,"Add context propagation support\n\nIn the current implementation, weaver doesn't allow the user to propagate context information. We recommend users to define a struct that encapsulates the metadata information and add it as an argument to the method. However, more and more users are asking for an option to propagate metadata information using the context. This request comes especially from users that are using gRPC to communicate between their services, and gRPC provides a way to propagate metadata information using the context.

This PR implements a similar approach to gRPC [1] to propagate metadata information. We allow users to create a context where they can pass metadata as a `map[string][]string`.

E.g.,
```main.go
...
ctx := context.Background()
meta := metadata.New(map[string][]string{""name"":{""foo"", ""bar""}})
ctx = metadata.NewContext(ctx, meta)

dst.Get().Update(ctx, ....)
```

```destination.go
...
func( d *destination) Update(ctx, ...) (error) {
  meta := metadata.FromContext(ctx)
  vals := meta.Get(""name"")

  // Can call another component method with an updated context
  meta.Set(""account"", ""x"", ""y"")
  ctx = metadata.NewContext(ctx, meta)
  acct.Get().UpdateAccount(ctx, ...)
}
```

The user APIs are as follows:
```api.go
// New creates a Metadata object that has operations
// to manipulate the metadata (e.g., Get, Set, Append, Delete.
func New(m map[string][]string) Metadata

// NewContext creates a new context that contains metadata meta, with
// parent context ctx.
func NewContext(ctx context.Context, meta Metadata) context.Context

// FromContext returns the metadata from the context. If the context
// doesn't have any metata, it returns an empty metadata.
func FromContext(ctx context.Context) Metadata
```

Note that similar to the gRPC metadata, we make sure the metadata keys are lowercased, because the user can create metadata w/o using our New() metadata constructor, hence they can set the keys however they want.

[1] https://pkg.go.dev/google.golang.org/grpc/metadata",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/783,"{'number': 783, 'state': 'closed', 'merged': False, 'created_at': '2024-07-17T20:51:44Z', 'merged_at': '2024-08-07T23:54:33Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-07-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_782,2024-07-12T18:00:55Z,Update weaver kube documentation\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/782,"{'number': 782, 'state': 'closed', 'merged': False, 'created_at': '2024-07-12T18:00:55Z', 'merged_at': '2024-07-12T18:12:06Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-07-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_781,2024-07-11T19:41:39Z,"Remove NonNegativeBuckets\n\nNonNegativeBuckets were used for our generated metrics. However, it is in the public metrics package, and users can rely on it to define their histograms.

However, NonNegativeBuckets has a huge number of buckets which lead to large data for the metrics. The users have complained that our buckets are too fine-grained and the cost to export the metrics is quite high.

This PR removes the NonNegativeBuckets and forces the user to define their own buckets for their histograms.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/781,"{'number': 781, 'state': 'closed', 'merged': False, 'created_at': '2024-07-11T19:41:39Z', 'merged_at': '2024-07-11T19:48:20Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-07-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_780,2024-07-10T16:33:15Z,"Reduce number of buckets for auto-generated metrics\n\nFor the auto-generated histogram metrics, we use a large number of buckets. The largest bucket captures values up to 50 quintillion.

However, having a large number of buckets results in a significant size for exported metrics, even if they carry 0 data (as most buckets will have 0 values). This leads to: (1) higher costs for the user (e.g., Google Cloud monitoring charges you based on the volume of metrics exported), and (2) increased system load due to handling large metrics data.

This PR reduces the number of buckets to capture values up to 5 billion (5e9),
which seems reasonable in practice. E.g., auto-generated metrics using these buckets:
1) http_request_latency_micros - even if this is 10 minutes, the value
   is still 6e7
2) http_request_bytes_received - http request size of more than 5 GB seem
   rare
3) http_request_bytes_returned - http response size of more than 5 GB
   seem rare
4) serviceweaver_method_latency_micros - component method execution of
   more than 1.3 hours seem rare
5) serviceweaver_method_bytes_request - request size of more than 5 GB
   seem rare
6) serviceweaver_method_bytes_reply - response size of more than 5 GB
   seem rare",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/780,"{'number': 780, 'state': 'closed', 'merged': False, 'created_at': '2024-07-10T16:33:15Z', 'merged_at': '2024-07-11T19:27:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",decline,unknown,unclear,"Temporal: decline based on 2024-07-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_778,2024-06-26T19:35:11Z,"Bump golang.org/x/image from 0.10.0 to 0.18.0\n\nBumps [golang.org/x/image](https://github.com/golang/image) from 0.10.0 to 0.18.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/golang/image/commit/3bbf4a659e56fde394e7214ddd17673223aca672""><code>3bbf4a6</code></a> tiff: Validate palette indices when parsing palette-color images</li>
<li><a href=""https://github.com/golang/image/commit/6c5fa462eb87ac98bad9b09ea3b041dd770fa611""><code>6c5fa46</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/image/commit/55c4ab6bd625a2e8433671ec9f9b6c46daddf2cf""><code>55c4ab6</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/image/commit/0057a939a541e6068d04ccf947c61a708378101d""><code>0057a93</code></a> tiff: fix function name in comment</li>
<li><a href=""https://github.com/golang/image/commit/9e190ae4a3c5edc736fd99ba38be1c9d08ea5320""><code>9e190ae</code></a> webp: disallow multiple VP8X chunks</li>
<li><a href=""https://github.com/golang/image/commit/445ab0e75e6df9b6a4d3d5437bda2a7cac74eb72""><code>445ab0e</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/image/commit/240a51ac9f088c1c81cad2cf80a37b99c52abcde""><code>240a51a</code></a> font/sfnt: support early version 0 OS/2 tables</li>
<li><a href=""https://github.com/golang/image/commit/c20bbc37136f3a0b463478dd8e699c51139af48c""><code>c20bbc3</code></a> draw: simplify some calls to fmt.Fprintf</li>
<li><a href=""https://github.com/golang/image/commit/491771c681427e82b9843267b24b32cf56743e83""><code>491771c</code></a> draw: merge draw_go117.go into draw.go</li>
<li><a href=""https://github.com/golang/image/commit/4aa0222fac539f4a04a4378b75b70ad6e1820ecb""><code>4aa0222</code></a> go.mod: update go directive to 1.18</li>
<li>Additional commits viewable in <a href=""https://github.com/golang/image/compare/v0.10.0...v0.18.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/image&package-manager=go_modules&previous-version=0.10.0&new-version=0.18.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

You can trigger a rebase of this PR by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>

> **Note**
> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.
",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/778,"{'number': 778, 'state': 'closed', 'merged': False, 'created_at': '2024-06-26T19:35:11Z', 'merged_at': '2024-11-05T19:29:11Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-06-26. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_777,2024-06-25T23:30:47Z,"Manage grpc services with Service Weaver\n\nPrototype implementation for supporting grpc services.

1) the programming API
2) single/multi deployer implementation

Note that this is a testing branch and it's experimental.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/777,"{'number': 777, 'state': 'closed', 'merged': False, 'created_at': '2024-06-25T23:30:47Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-06-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_775,2024-06-20T21:41:56Z,Update doc to reflect the latest Kube changes\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/775,"{'number': 775, 'state': 'closed', 'merged': False, 'created_at': '2024-06-20T21:41:56Z', 'merged_at': '2024-06-20T21:52:07Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-06-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_772,2024-06-07T20:18:57Z,"feat(#556): added check circular dependencies\n\nAdded validation to ensure that dependencies do not form circular dependencies. 
An error is raised if such a condition is detected.

ISSUE: #556 
Repository reference to simulate it: https://github.com/renanbastos93/weaver-issue-556
",f9861ccf310dcee8,https://github.com/ServiceWeaver/weaver/pull/772,"{'number': 772, 'state': 'closed', 'merged': False, 'created_at': '2024-06-07T20:18:57Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-06-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_771,2024-06-04T20:25:19Z,Update doc with latest gke updates\n\nAdd documentation on how to configure telemetry for the GKE deployer.,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/771,"{'number': 771, 'state': 'closed', 'merged': False, 'created_at': '2024-06-04T20:25:19Z', 'merged_at': '2024-06-04T20:30:43Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-06-04. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_770,2024-06-03T21:35:05Z,"runtime, envelope: add support for `cgroup` for `child` processes.\n\n* Allow envelope to accept cgroup manager which gives users opportunity to
constraint process created by weavelets, which is really helpful in case
of `multi` and `single` deployment where user would want to limit `cpu`,
`memory` usage or other resource usage.

* multi: create and provide cgroup manager",f058c3156395b999,https://github.com/ServiceWeaver/weaver/pull/770,"{'number': 770, 'state': 'closed', 'merged': False, 'created_at': '2024-06-03T21:35:05Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-06-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_767,2024-05-29T04:09:37Z,"status: map weavelet id to pids for `multi`, `single` and `ssh` deployment.\n\nAs of now weaver logs shows the weavelet id but not `pids` and `weaver multi status` shows the respective `pid` but its hard to map weavelet id from the logs to the running process, following commit adds weavelet id with the pids of the components so its easier to debug.

![weavelet_id](https://github.com/ServiceWeaver/weaver/assets/9384699/e459a511-ad5c-4e1e-9ea8-3147e1201e70)
",f058c3156395b999,https://github.com/ServiceWeaver/weaver/pull/767,"{'number': 767, 'state': 'closed', 'merged': False, 'created_at': '2024-05-29T04:09:37Z', 'merged_at': '2024-05-30T17:42:42Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-05-29. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_766,2024-05-28T21:02:14Z,"Add shutdown method per component\n\nIn the current implementation, we provide the user the ability to initialize things by implementing an `Init` method. However, they don't have the ability to do a clean shutdown easily.

The user filled multiple github issues (#275 and #765) asking for a `Shutdown` method.

This PR adds a `Shutdown` method to each component. Note that there is no guarantee that this method can run - e.g., the app receives a SIGKILL because the machine suddenly crashes. However, a `Shutdown` method can enable the user to achieve graceful shutdown in normal scenarios.

In tests, if someone wants to test the `Shutdown` method, they can get a pointer to the implementation of the component and explicitly call the `Shutdown` method.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/766,"{'number': 766, 'state': 'closed', 'merged': False, 'created_at': '2024-05-28T21:02:14Z', 'merged_at': '2024-05-30T16:33:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-05-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_761,2024-05-09T21:24:56Z,"Check the ready status of component before it becomes reachable.\n\nThis fixes an situation where the component takes a while to initialize: previously, we were declaring the component as activated/healthy even during the pending init, resulting in subsequent method calls failing.

Thanks to rgrandl@ for debugging the issue.

Other changes:
  * Don't add a component to the routing info until it has been initialized. This fixes the health-checking situation where one component replica becomes healthy, but we subsequently send method calls to other replicas which fail.
  * Fix go vet in a couple of places.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/761,"{'number': 761, 'state': 'closed', 'merged': False, 'created_at': '2024-05-09T21:24:56Z', 'merged_at': '2024-05-09T21:36:42Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-05-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_760,2024-05-08T03:14:10Z,"update: github.com/lightstep/varopt to v1.4.0\n\nI often run `get -u ./...` which updates this package all the time, but it has a breaking change introducing generics. quite straightforward to fix, so, it seems better to update it.

it would remove 1 cast. :smile: ",e7f71ad5e7317a65,https://github.com/ServiceWeaver/weaver/pull/760,"{'number': 760, 'state': 'closed', 'merged': False, 'created_at': '2024-05-08T03:14:10Z', 'merged_at': '2024-05-30T17:25:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-05-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_759,2024-05-06T22:19:55Z,"Add generated label to autogenerated metrics\n\nService Weaver users complain that we're exporting too many metrics, hence the cloud bill is high. This is mainly because we export a bunch of metrics that are either autogenerated or created within our system components.

This PR adds a new label to each of these metrics, s.t. the deployer can decide to filter them out, before exporting the metrics for consumption.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/759,"{'number': 759, 'state': 'closed', 'merged': False, 'created_at': '2024-05-06T22:19:55Z', 'merged_at': '2024-05-06T23:15:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-05-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_758,2024-05-04T16:29:16Z,"feat: removing the fixed tracing sampler (parent based, always on)\n\nRemoving the FIXED sampler, would still use the ParentBased(Always On) by default, but without it we can now use OTEL environment variables to choose other options.

more info: https://opentelemetry.io/docs/languages/sdk-configuration/general/#otel_traces_sampler",e7f71ad5e7317a65,https://github.com/ServiceWeaver/weaver/pull/758,"{'number': 758, 'state': 'closed', 'merged': False, 'created_at': '2024-05-04T16:29:16Z', 'merged_at': '2024-05-06T18:09:17Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-05-04. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_754,2024-04-19T12:19:42Z,"Bump golang.org/x/net from 0.17.0 to 0.23.0\n\nBumps [golang.org/x/net](https://github.com/golang/net) from 0.17.0 to 0.23.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/golang/net/commit/c48da131589f122489348be5dfbcb6457640046f""><code>c48da13</code></a> http2: fix TestServerContinuationFlood flakes</li>
<li><a href=""https://github.com/golang/net/commit/762b58d1cf6e0779780decad89c6c1523386638d""><code>762b58d</code></a> http2: fix tipos in comment</li>
<li><a href=""https://github.com/golang/net/commit/ba872109ef2dc8f1da778651bd1fd3792d0e4587""><code>ba87210</code></a> http2: close connections when receiving too many headers</li>
<li><a href=""https://github.com/golang/net/commit/ebc8168ac8ac742194df729305175940790c55a2""><code>ebc8168</code></a> all: fix some typos</li>
<li><a href=""https://github.com/golang/net/commit/3678185f8a652e52864c44049a9ea96b7bcc066a""><code>3678185</code></a> http2: make TestCanonicalHeaderCacheGrowth faster</li>
<li><a href=""https://github.com/golang/net/commit/448c44f9287b6745f958d74aa2a17ec7761c2f13""><code>448c44f</code></a> http2: remove clientTester</li>
<li><a href=""https://github.com/golang/net/commit/c7877ac4213b2f859831366f5a35b353e0dc9f66""><code>c7877ac</code></a> http2: convert the remaining clientTester tests to testClientConn</li>
<li><a href=""https://github.com/golang/net/commit/d8870b0bf2f2426fc8d19a9332f652da5c25418f""><code>d8870b0</code></a> http2: use synthetic time in TestIdleConnTimeout</li>
<li><a href=""https://github.com/golang/net/commit/d73acffdc9493532acb85777105bb4a351eea702""><code>d73acff</code></a> http2: only set up deadline when Server.IdleTimeout is positive</li>
<li><a href=""https://github.com/golang/net/commit/89f602b7bbf237abe0467031a18b42fc742ced08""><code>89f602b</code></a> http2: validate client/outgoing trailers</li>
<li>Additional commits viewable in <a href=""https://github.com/golang/net/compare/v0.17.0...v0.23.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/net&package-manager=go_modules&previous-version=0.17.0&new-version=0.23.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

You can trigger a rebase of this PR by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>

> **Note**
> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/754,"{'number': 754, 'state': 'closed', 'merged': False, 'created_at': '2024-04-19T12:19:42Z', 'merged_at': '2024-05-30T17:34:51Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-04-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_753,2024-04-09T22:00:31Z,Fix examples/docs with new listener config\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/753,"{'number': 753, 'state': 'closed', 'merged': False, 'created_at': '2024-04-09T22:00:31Z', 'merged_at': '2024-04-10T21:01:27Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-04-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_752,2024-04-08T22:25:02Z,Clarify what are valid names for listeners on GKE\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/752,"{'number': 752, 'state': 'closed', 'merged': False, 'created_at': '2024-04-08T22:25:02Z', 'merged_at': '2024-04-08T22:38:33Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-04-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_748,2024-04-03T19:02:15Z,docs: fix lint issue in index.html\n\n,b73fa8d08f4a882a,https://github.com/ServiceWeaver/weaver/pull/748,"{'number': 748, 'state': 'closed', 'merged': False, 'created_at': '2024-04-03T19:02:15Z', 'merged_at': '2024-04-09T22:52:11Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-04-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_747,2024-03-25T21:05:37Z,"Update doc for the GKE config section\n\nUpdate the documentation for the GKE deployer to mention that the user can configure the minimum number of replicas for each component, and that they can specify the base image for the app container.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/747,"{'number': 747, 'state': 'closed', 'merged': False, 'created_at': '2024-03-25T21:05:37Z', 'merged_at': '2024-03-25T22:09:30Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-03-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_745,2024-03-20T17:31:04Z,"Bump github.com/docker/docker from 24.0.7+incompatible to 24.0.9+incompatible\n\nBumps [github.com/docker/docker](https://github.com/docker/docker) from 24.0.7+incompatible to 24.0.9+incompatible.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/docker/docker/releases"">github.com/docker/docker's releases</a>.</em></p>
<blockquote>
<h2>v24.0.9</h2>
<h2>24.0.9</h2>
<p>For a full list of pull requests and changes in this release, refer to the relevant GitHub milestones:</p>
<ul>
<li><a href=""https://github.com/docker/cli/issues?q=is%3Aclosed+milestone%3A24.0.9"">docker/cli, 24.0.9 milestone</a></li>
<li><a href=""https://github.com/moby/moby/issues?q=is%3Aclosed+milestone%3A24.0.9"">moby/moby, 24.0.9 milestone</a></li>
</ul>
<h2>Security</h2>
<p>This release contains security fixes for the following CVEs affecting Docker Engine and its components.</p>
<table>
<thead>
<tr>
<th>CVE</th>
<th>Component</th>
<th>Fix version</th>
<th>Severity</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href=""https://scout.docker.com/v/CVE-2024-21626"">CVE-2024-21626</a></td>
<td>runc</td>
<td>1.1.12</td>
<td>High, CVSS 8.6</td>
</tr>
<tr>
<td><a href=""https://scout.docker.com/v/CVE-2024-24557"">CVE-2024-24557</a></td>
<td>Docker Engine</td>
<td>24.0.9</td>
<td>Medium, CVSS 6.9</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Important</strong> ⚠️</p>
<p>Note that this release of Docker Engine doesn't include fixes for the following known vulnerabilities in BuildKit:</p>
<ul>
<li><a href=""https://scout.docker.com/v/CVE-2024-23651"">CVE-2024-23651</a></li>
<li><a href=""https://scout.docker.com/v/CVE-2024-23652"">CVE-2024-23652</a></li>
<li><a href=""https://scout.docker.com/v/CVE-2024-23653"">CVE-2024-23653</a></li>
<li><a href=""https://scout.docker.com/v/CVE-2024-23650"">CVE-2024-23650</a></li>
</ul>
<p>To address these vulnerabilities, upgrade to <a href=""https://github.com/docker/docker/blob/HEAD/25.0.md#2502"">Docker Engine v25.0.2</a>.</p>
</blockquote>
<p>For more information about the security issues addressed in this release, and the unaddressed vulnerabilities in BuildKit, refer to the
<a href=""https://www.docker.com/blog/docker-security-advisory-multiple-vulnerabilities-in-runc-buildkit-and-moby/"">blog post</a>. For details about each vulnerability, see the relevant security advisory:</p>
<ul>
<li><a href=""https://github.com/opencontainers/runc/security/advisories/GHSA-xr7r-f8xq-vfvv"">CVE-2024-21626</a></li>
<li><a href=""https://github.com/moby/moby/security/advisories/GHSA-xw73-rw38-6vjc"">CVE-2024-24557</a></li>
</ul>
<h3>Packaging updates</h3>
<ul>
<li>Upgrade runc to <a href=""https://github.com/opencontainers/runc/releases/tag/v1.1.12"">v1.1.12</a>. <a href=""https://redirect.github.com/moby/moby/pull/47269"">moby/moby#47269</a></li>
<li>Upgrade containerd to <a href=""https://github.com/containerd/containerd/releases/tag/v1.7.13"">v1.7.13</a> (static binaries only). <a href=""https://redirect.github.com/moby/moby/pull/47280"">moby/moby#47280</a></li>
</ul>
<h2>v24.0.8</h2>
<h2>24.0.8</h2>
<p>For a full list of pull requests and changes in this release, refer to the relevant GitHub milestones:</p>
<ul>
<li><a href=""https://github.com/docker/cli/issues?q=is%3Aclosed+milestone%3A24.0.8"">docker/cli, 24.0.8 milestone</a></li>
<li><a href=""https://github.com/moby/moby/issues?q=is%3Aclosed+milestone%3A24.0.8"">moby/moby, 24.0.8 milestone</a></li>
</ul>
<h3>Bug fixes and enhancements</h3>
<ul>
<li>Live restore: Containers with auto remove (<code>docker run --rm</code>) are no longer forcibly removed on engine restart. <a href=""https://redirect.github.com/moby/moby/pull/46869"">moby/moby#46857</a></li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/moby/moby/commit/fca702de7f71362c8d103073c7e4a1d0a467fadd""><code>fca702d</code></a> Merge pull request from GHSA-xw73-rw38-6vjc</li>
<li><a href=""https://github.com/moby/moby/commit/f78a7726d747847e443a5a5a4b4ad8ab31d87d78""><code>f78a772</code></a> Merge pull request <a href=""https://redirect.github.com/docker/docker/issues/47281"">#47281</a> from thaJeztah/24.0_backport_bump_containerd_binary...</li>
<li><a href=""https://github.com/moby/moby/commit/61afffeeb3d4264db7a697ca8bd3d25824bee182""><code>61afffe</code></a> Merge pull request <a href=""https://redirect.github.com/docker/docker/issues/47270"">#47270</a> from thaJeztah/24.0_backport_bump_runc_binary_1.1.12</li>
<li><a href=""https://github.com/moby/moby/commit/b38e74c4e095d584e21576e9cc43a355446e5b71""><code>b38e74c</code></a> Merge pull request <a href=""https://redirect.github.com/docker/docker/issues/47276"">#47276</a> from thaJeztah/24.0_backport_bump_runc_1.1.12</li>
<li><a href=""https://github.com/moby/moby/commit/dac56638adccd215bae6cc23146f29e4697e1e98""><code>dac5663</code></a> update containerd binary to v1.7.13</li>
<li><a href=""https://github.com/moby/moby/commit/20e1af361628a31afd1af58d25cd6ea4e495669f""><code>20e1af3</code></a> vendor: github.com/opencontainers/runc v1.1.12</li>
<li><a href=""https://github.com/moby/moby/commit/858919d39968c687de3afb0a0a3a212d60ef2a99""><code>858919d</code></a> update runc binary to v1.1.12</li>
<li><a href=""https://github.com/moby/moby/commit/141ad39e38a9a44b7487933d74815863c2c588e6""><code>141ad39</code></a> Merge pull request <a href=""https://redirect.github.com/docker/docker/issues/47266"">#47266</a> from vvoland/ci-fix-makeps1-templatefail-24</li>
<li><a href=""https://github.com/moby/moby/commit/db968c672bcd6eeed09a0ad35cac843a5ffe7e48""><code>db968c6</code></a> hack/make.ps1: Fix go list pattern</li>
<li><a href=""https://github.com/moby/moby/commit/61c51fbb5aeb648eb5f97704b8c75be3ccf1c9a0""><code>61c51fb</code></a> Merge pull request <a href=""https://redirect.github.com/docker/docker/issues/47221"">#47221</a> from vvoland/pkg-pools-close-noop-24</li>
<li>Additional commits viewable in <a href=""https://github.com/docker/docker/compare/v24.0.7...v24.0.9"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=github.com/docker/docker&package-manager=go_modules&previous-version=24.0.7+incompatible&new-version=24.0.9+incompatible)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

You can trigger a rebase of this PR by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>

> **Note**
> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/745,"{'number': 745, 'state': 'closed', 'merged': False, 'created_at': '2024-03-20T17:31:04Z', 'merged_at': '2024-05-30T17:35:25Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-03-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_744,2024-03-15T22:53:13Z,"Fix config doc for GKE deployer\n\nThe documentation is obsolete. If you want to deploy an app in a different Google Cloud Project and/or using a different Google Cloud account, the way to do it is to pass this information using flags. The docs state that this should be specified in the config.

Also, updated the doc to mention that the user should specify at least one region where to rollout the application.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/744,"{'number': 744, 'state': 'closed', 'merged': False, 'created_at': '2024-03-15T22:53:13Z', 'merged_at': '2024-03-15T22:59:24Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-03-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_743,2024-03-14T22:10:23Z,"Bump github.com/jackc/pgx/v5 from 5.4.3 to 5.5.4\n\nBumps [github.com/jackc/pgx/v5](https://github.com/jackc/pgx) from 5.4.3 to 5.5.4.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/jackc/pgx/blob/master/CHANGELOG.md"">github.com/jackc/pgx/v5's changelog</a>.</em></p>
<blockquote>
<h1>5.5.4 (March 4, 2024)</h1>
<p>Fix CVE-2024-27304</p>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer
overflow in the calculated message size can cause the one large message to be sent as multiple messages under the
attacker's control.</p>
<p>Thanks to Paul Gerste for reporting this issue.</p>
<ul>
<li>Fix behavior of CollectRows to return empty slice if Rows are empty (Felix)</li>
<li>Fix simple protocol encoding of json.RawMessage</li>
<li>Fix *Pipeline.getResults should close pipeline on error</li>
<li>Fix panic in TryFindUnderlyingTypeScanPlan (David Kurman)</li>
<li>Fix deallocation of invalidated cached statements in a transaction</li>
<li>Handle invalid sslkey file</li>
<li>Fix scan float4 into sql.Scanner</li>
<li>Fix pgtype.Bits not making copy of data from read buffer. This would cause the data to be corrupted by future reads.</li>
</ul>
<h1>5.5.3 (February 3, 2024)</h1>
<ul>
<li>Fix: prepared statement already exists</li>
<li>Improve CopyFrom auto-conversion of text-ish values</li>
<li>Add ltree type support (Florent Viel)</li>
<li>Make some properties of Batch and QueuedQuery public (Pavlo Golub)</li>
<li>Add AppendRows function (Edoardo Spadolini)</li>
<li>Optimize convert UUID [16]byte to string (Kirill Malikov)</li>
<li>Fix: LargeObject Read and Write of more than ~1GB at a time (Mitar)</li>
</ul>
<h1>5.5.2 (January 13, 2024)</h1>
<ul>
<li>Allow NamedArgs to start with underscore</li>
<li>pgproto3: Maximum message body length support (jeremy.spriet)</li>
<li>Upgrade golang.org/x/crypto to v0.17.0</li>
<li>Add snake_case support to RowToStructByName (Tikhon Fedulov)</li>
<li>Fix: update description cache after exec prepare (James Hartig)</li>
<li>Fix: pipeline checks if it is closed (James Hartig and Ryan Fowler)</li>
<li>Fix: normalize timeout / context errors during TLS startup (Samuel Stauffer)</li>
<li>Add OnPgError for easier centralized error handling (James Hartig)</li>
</ul>
<h1>5.5.1 (December 9, 2023)</h1>
<ul>
<li>Add CopyFromFunc helper function. (robford)</li>
<li>Add PgConn.Deallocate method that uses PostgreSQL protocol Close message.</li>
<li>pgx uses new PgConn.Deallocate method. This allows deallocating statements to work in a failed transaction. This fixes a case where the prepared statement map could become invalid.</li>
<li>Fix: Prefer driver.Valuer over json.Marshaler for json fields. (Jacopo)</li>
<li>Fix: simple protocol SQL sanitizer previously panicked if an invalid $0 placeholder was used. This now returns an error instead. (maksymnevajdev)</li>
<li>Add pgtype.Numeric.ScanScientific (Eshton Robateau)</li>
</ul>
<h1>5.5.0 (November 4, 2023)</h1>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/jackc/pgx/commit/da6f2c98f2664b215b40b1606551fdfcc7f3ea5c""><code>da6f2c9</code></a> Update changelog</li>
<li><a href=""https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8""><code>c543134</code></a> SQL sanitizer wraps arguments in parentheses</li>
<li><a href=""https://github.com/jackc/pgx/commit/20344dfae83e672eff73a03324398543a1d87f43""><code>20344df</code></a> Check for overflow on uint16 sizes in pgproto3</li>
<li><a href=""https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4""><code>adbb38f</code></a> Do not allow protocol messages larger than ~1GB</li>
<li><a href=""https://github.com/jackc/pgx/commit/c1b0a01ca75ac9eb3a7dbc1396f583ab5dbf9557""><code>c1b0a01</code></a> Fix behavior of CollectRows to return empty slice if Rows are empty</li>
<li><a href=""https://github.com/jackc/pgx/commit/88dfc22ae4aa031783cda90841d5358edd85ff2c""><code>88dfc22</code></a> Fix simple protocol encoding of json.RawMessage</li>
<li><a href=""https://github.com/jackc/pgx/commit/2e84dccaf57b4fa803149884f2149dfa9e923593""><code>2e84dcc</code></a> *Pipeline.getResults should close pipeline on error</li>
<li><a href=""https://github.com/jackc/pgx/commit/d149d3fe5c50d1d98bd6265d3c928519ba4b3f4b""><code>d149d3f</code></a> Fix panic in TryFindUnderlyingTypeScanPlan</li>
<li><a href=""https://github.com/jackc/pgx/commit/046f497efb4e92caa9575a0e9c351e4906af14c6""><code>046f497</code></a> deallocateInvalidatedCachedStatements now runs in transactions</li>
<li><a href=""https://github.com/jackc/pgx/commit/8896bd697781ed4aee392daa90b90cde142319fe""><code>8896bd6</code></a> Handle invalid sslkey file</li>
<li>Additional commits viewable in <a href=""https://github.com/jackc/pgx/compare/v5.4.3...v5.5.4"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=github.com/jackc/pgx/v5&package-manager=go_modules&previous-version=5.4.3&new-version=5.5.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/743,"{'number': 743, 'state': 'closed', 'merged': False, 'created_at': '2024-03-14T22:10:23Z', 'merged_at': '2024-03-18T20:27:54Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-03-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_742,2024-03-13T22:57:52Z,"Bump google.golang.org/protobuf from 1.31.0 to 1.33.0 in /website/blog/metric_labels/weaver\n\nBumps google.golang.org/protobuf from 1.31.0 to 1.33.0.


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=google.golang.org/protobuf&package-manager=go_modules&previous-version=1.31.0&new-version=1.33.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/742,"{'number': 742, 'state': 'closed', 'merged': False, 'created_at': '2024-03-13T22:57:52Z', 'merged_at': '2024-03-18T20:22:51Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-03-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_741,2024-03-13T22:57:33Z,"Bump google.golang.org/protobuf from 1.31.0 to 1.33.0\n\nBumps google.golang.org/protobuf from 1.31.0 to 1.33.0.


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=google.golang.org/protobuf&package-manager=go_modules&previous-version=1.31.0&new-version=1.33.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/741,"{'number': 741, 'state': 'closed', 'merged': False, 'created_at': '2024-03-13T22:57:33Z', 'merged_at': '2024-03-18T20:22:34Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-03-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_740,2024-03-13T22:38:43Z,"Bump google.golang.org/protobuf from 1.30.0 to 1.33.0 in /website/blog/metric_labels/prometheus\n\nBumps google.golang.org/protobuf from 1.30.0 to 1.33.0.


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=google.golang.org/protobuf&package-manager=go_modules&previous-version=1.30.0&new-version=1.33.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/740,"{'number': 740, 'state': 'closed', 'merged': False, 'created_at': '2024-03-13T22:38:43Z', 'merged_at': '2024-03-18T20:22:06Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-03-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_738,2024-03-07T18:29:18Z,"Update doc regarding how to set the project/account for GKE.\n\nThe documentation is obsolete. If you want to deploy an app in a different Google Cloud Project and/or using a different Google Cloud account, the way to do it is to pass this information using flags. The docs state that this should be specified in the config.

Also, updated the doc to mention that the user should specify at least one region where to rollout the application.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/738,"{'number': 738, 'state': 'closed', 'merged': False, 'created_at': '2024-03-07T18:29:18Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-03-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_736,2024-02-29T00:48:09Z,Update the release version inside the weaver code.\n\n,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/736,"{'number': 736, 'state': 'closed', 'merged': False, 'created_at': '2024-02-29T00:48:09Z', 'merged_at': '2024-02-29T01:04:21Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-02-29. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_731,2024-02-16T21:55:52Z,Added news entry for new testing blog.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/731,"{'number': 731, 'state': 'closed', 'merged': False, 'created_at': '2024-02-16T21:55:52Z', 'merged_at': '2024-02-16T23:26:20Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-02-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_730,2024-02-16T21:36:56Z,Added documentation to the sim package.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/730,"{'number': 730, 'state': 'closed', 'merged': False, 'created_at': '2024-02-16T21:36:56Z', 'merged_at': '2024-02-16T21:43:14Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-02-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_728,2024-02-15T18:35:25Z,"Bump github.com/opencontainers/runc from 1.1.5 to 1.1.12\n\nBumps [github.com/opencontainers/runc](https://github.com/opencontainers/runc) from 1.1.5 to 1.1.12.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/opencontainers/runc/releases"">github.com/opencontainers/runc's releases</a>.</em></p>
<blockquote>
<h2>runc 1.1.12 -- &quot;Now you're thinking with Portals™!&quot;</h2>
<p>This is the twelfth patch release in the 1.1.z release branch of runc.
It fixes a high-severity container breakout vulnerability involving
leaked file descriptors, and users are strongly encouraged to update as
soon as possible.</p>
<ul>
<li>
<p>Fix <a href=""https://github.com/opencontainers/runc/security/advisories/GHSA-xr7r-f8xq-vfvv"">CVE-2024-21626</a>, a container breakout attack that took advantage of
a file descriptor that was leaked internally within runc (but never
leaked to the container process).</p>
<p>In addition to fixing the leak, several strict hardening measures were
added to ensure that future internal leaks could not be used to break
out in this manner again.</p>
<p>Based on our research, while no other container runtime had a similar
leak, none had any of the hardening steps we've introduced (and some
runtimes would not check for any file descriptors that a calling
process may have leaked to them, allowing for container breakouts due
to basic user error).</p>
</li>
</ul>
<h3>Static Linking Notices</h3>
<p>The <code>runc</code> binary distributed with this release are <em>statically linked</em> with
the following <a href=""https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html"">GNU LGPL-2.1</a> licensed libraries, with <code>runc</code> acting
as a &quot;work that uses the Library&quot;:</p>
<ul>
<li><a href=""https://github.com/seccomp/libseccomp"">libseccomp</a></li>
</ul>
<p>The versions of these libraries were not modified from their upstream versions,
but in order to comply with the LGPL-2.1 (§6(a)), we have attached the
complete source code for those libraries which (when combined with the attached
runc source code) may be used to exercise your rights under the LGPL-2.1.</p>
<p>However we strongly suggest that you make use of your distribution's packages
or download them from the authoritative upstream sources, especially since
these libraries are related to the security of your containers.</p>
<!-- raw HTML omitted -->
<p>Thanks to all of the contributors who made this release possible:</p>
<ul>
<li>Aleksa Sarai <a href=""mailto:cyphar@cyphar.com"">cyphar@cyphar.com</a></li>
<li>hang.jiang <a href=""mailto:hang.jiang@daocloud.io"">hang.jiang@daocloud.io</a></li>
<li>lfbzhm <a href=""mailto:lifubang@acmcoder.com"">lifubang@acmcoder.com</a></li>
</ul>
<p>Signed-off-by: Aleksa Sarai <a href=""mailto:cyphar@cyphar.com"">cyphar@cyphar.com</a></p>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/opencontainers/runc/blob/v1.1.12/CHANGELOG.md"">github.com/opencontainers/runc's changelog</a>.</em></p>
<blockquote>
<h2>[1.1.12] - 2024-01-31</h2>
<blockquote>
<p>Now you're thinking with Portals™!</p>
</blockquote>
<h3>Security</h3>
<ul>
<li>Fix <a href=""https://github.com/opencontainers/runc/security/advisories/GHSA-xr7r-f8xq-vfvv"">CVE-2024-21626</a>, a container breakout attack that took
advantage of a file descriptor that was leaked internally within runc (but
never leaked to the container process). In addition to fixing the leak,
several strict hardening measures were added to ensure that future internal
leaks could not be used to break out in this manner again. Based on our
research, while no other container runtime had a similar leak, none had any
of the hardening steps we've introduced (and some runtimes would not check
for any file descriptors that a calling process may have leaked to them,
allowing for container breakouts due to basic user error).</li>
</ul>
<h2>[1.1.11] - 2024-01-01</h2>
<blockquote>
<p>Happy New Year!</p>
</blockquote>
<h3>Fixed</h3>
<ul>
<li>Fix several issues with userns path handling. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4122"">#4122</a>, <a href=""https://redirect.github.com/opencontainers/runc/issues/4124"">#4124</a>, <a href=""https://redirect.github.com/opencontainers/runc/issues/4134"">#4134</a>, <a href=""https://redirect.github.com/opencontainers/runc/issues/4144"">#4144</a>)</li>
</ul>
<h3>Changed</h3>
<ul>
<li>Support memory.peak and memory.swap.peak in cgroups v2.
Add <code>swapOnlyUsage</code> in <code>MemoryStats</code>. This field reports swap-only usage.
For cgroupv1, <code>Usage</code> and <code>Failcnt</code> are set by subtracting memory usage
from memory+swap usage. For cgroupv2, <code>Usage</code>, <code>Limit</code>, and <code>MaxUsage</code>
are set. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4000"">#4000</a>, <a href=""https://redirect.github.com/opencontainers/runc/issues/4010"">#4010</a>, <a href=""https://redirect.github.com/opencontainers/runc/issues/4131"">#4131</a>)</li>
<li>build(deps): bump github.com/cyphar/filepath-securejoin. (<a href=""https://redirect.github.com/opencontainers/runc/issues/4140"">#4140</a>)</li>
</ul>
<h2>[1.1.10] - 2023-10-31</h2>
<blockquote>
<p>Śruba, przykręcona we śnie, nie zmieni sytuacji, jaka panuje na jawie.</p>
</blockquote>
<h3>Added</h3>
<ul>
<li>Support for <code>hugetlb.&lt;pagesize&gt;.rsvd</code> limiting and accounting. Fixes the
issue of postres failing when hugepage limits are set. (<a href=""https://redirect.github.com/opencontainers/runc/issues/3859"">#3859</a>, <a href=""https://redirect.github.com/opencontainers/runc/issues/4077"">#4077</a>)</li>
</ul>
<h3>Fixed</h3>
<ul>
<li>Fixed permissions of a newly created directories to not depend on the value
of umask in tmpcopyup feature implementation. (<a href=""https://redirect.github.com/opencontainers/runc/issues/3991"">#3991</a>, <a href=""https://redirect.github.com/opencontainers/runc/issues/4060"">#4060</a>)</li>
<li>libcontainer: cgroup v1 GetStats now ignores missing <code>kmem.limit_in_bytes</code>
(fixes the compatibility with Linux kernel 6.1+). (<a href=""https://redirect.github.com/opencontainers/runc/issues/4028"">#4028</a>)</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/opencontainers/runc/commit/51d5e94601ceffbbd85688df1c928ecccbfa4685""><code>51d5e94</code></a> VERSION: release 1.1.12</li>
<li><a href=""https://github.com/opencontainers/runc/commit/2a4ed3e75b9e80d93d1836a9c4c1ebfa2b78870e""><code>2a4ed3e</code></a> merge 1.1-ghsa-xr7r-f8xq-vfvv into release-1.1</li>
<li><a href=""https://github.com/opencontainers/runc/commit/e9665f4d606b64bf9c4652ab2510da368bfbd951""><code>e9665f4</code></a> init: don't special-case logrus fds</li>
<li><a href=""https://github.com/opencontainers/runc/commit/683ad2ff3b01fb142ece7a8b3829de17150cf688""><code>683ad2f</code></a> libcontainer: mark all non-stdio fds O_CLOEXEC before spawning init</li>
<li><a href=""https://github.com/opencontainers/runc/commit/b6633f48a8c970433737b9be5bfe4f25d58a5aa7""><code>b6633f4</code></a> cgroup: plug leaks of /sys/fs/cgroup handle</li>
<li><a href=""https://github.com/opencontainers/runc/commit/284ba3057e428f8d6c7afcc3b0ac752e525957df""><code>284ba30</code></a> init: close internal fds before execve</li>
<li><a href=""https://github.com/opencontainers/runc/commit/fbe3eed1e568a376f371d2ced1b4ac16b7d7adde""><code>fbe3eed</code></a> setns init: do explicit lookup of execve argument early</li>
<li><a href=""https://github.com/opencontainers/runc/commit/0994249a5ec4e363bfcf9af58a87a722e9a3a31b""><code>0994249</code></a> init: verify after chdir that cwd is inside the container</li>
<li><a href=""https://github.com/opencontainers/runc/commit/506552a88bd3455e80a9b3829568e94ec0160309""><code>506552a</code></a> Fix File to Close</li>
<li><a href=""https://github.com/opencontainers/runc/commit/099ff69336840fecf3fc0ab13aab4c3aded640c3""><code>099ff69</code></a> merge <a href=""https://redirect.github.com/opencontainers/runc/issues/4177"">#4177</a> into opencontainers/runc:release-1.1</li>
<li>Additional commits viewable in <a href=""https://github.com/opencontainers/runc/compare/v1.1.5...v1.1.12"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=github.com/opencontainers/runc&package-manager=go_modules&previous-version=1.1.5&new-version=1.1.12)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/728,"{'number': 728, 'state': 'closed', 'merged': False, 'created_at': '2024-02-15T18:35:25Z', 'merged_at': '2024-02-16T17:47:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-02-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_727,2024-02-14T23:01:44Z,"Bumped various dependencies.\n\nThis CL bumps various dependencies suggested by @dependabot in pull requests #668, #669, #671, #688, and #693.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/727,"{'number': 727, 'state': 'closed', 'merged': False, 'created_at': '2024-02-14T23:01:44Z', 'merged_at': '2024-02-16T17:36:10Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-02-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_726,2024-02-14T22:59:51Z,"Expose the deployment identifier to the application.\n\nThis was a feature requested by one of our users so that they can distinct between multiple deployments of the same application.

As far as the user is concerned, the string is an opaque identifier they can use to compare different deployments.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/726,"{'number': 726, 'state': 'closed', 'merged': False, 'created_at': '2024-02-14T22:59:51Z', 'merged_at': '2024-02-15T18:34:37Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-02-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_723,2024-02-07T23:09:15Z,Add blog post on improving cloud efficiency\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/723,"{'number': 723, 'state': 'closed', 'merged': False, 'created_at': '2024-02-07T23:09:15Z', 'merged_at': '2024-02-08T18:37:19Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-02-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_722,2024-02-05T23:56:16Z,Add instructions on how to run apps on CloudRun\n\nRunning a Service Weaver application on Cloud Run (as a single container) is straightforward. Added instructions on how to do that on the Service Weaver website based on Michael's example.,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/722,"{'number': 722, 'state': 'closed', 'merged': False, 'created_at': '2024-02-05T23:56:16Z', 'merged_at': '2024-02-06T16:42:53Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-02-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_720,2024-02-02T22:56:07Z,Added blog post on testing.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/720,"{'number': 720, 'state': 'closed', 'merged': False, 'created_at': '2024-02-02T22:56:07Z', 'merged_at': '2024-02-16T21:36:12Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-02-02. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_719,2024-01-31T18:44:40Z,"Added bank account demo of simulation testing.\n\nThis PR includes an example of how to test Service Weaver applications using the `sim` package. The example involves a bank that incorrectly implements withdrawals. Specifically, the withdrawal operation

1. reads a user's bank account balance to determine if there are sufficient funds for the withdrawal and then
2. performs the actual withdrawal.

However, steps (1) and (2) are not performed atomically. This lack of atomicity allows two withdrawals to race, producing a bank account with a negative balance.

For example, consider a bank account with an initial balance of $100 and two operations both racing to withdraw $100. The following execution is possible.

- Withdraw 1 sees a balance of $100.
- Withdraw 2 sees a balance of $100.
- Withdraw 2 withdraws, leaving a balance of $0.
- Withdraw 1 withdraws, leaving a balance of -$100.

Use the following commands to run the simulation:

```
$ cd sim/internal/bank
$ go test -v
=== RUN   TestBank
    simulator.go:288: Simulating workload *bank_test.BankWorkload for 10s.
    simulator.go:478: Executing 1 graveyard entries.
    simulator.go:315: Error found after 2 ops across 1 executions in 0s (3,064.14 execs/s, 6,128.28 ops/s).
    simulator.go:326: Failing input written to testdata/sim/TestBank/279283c821e2ac09.json.
    bank_test.go:105: sequenceDiagram
            participant op1 as Op 1
            participant op2 as Op 2
            participant github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0 as bank.Bank 0
            participant github.com/ServiceWeaver/weaver/sim/internal/bank/Store0 as bank.Store 0
            note right of op1: [1:1] Withdraw(alice, 63)
            op1->>github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0: [1:2] bank.Bank.Withdraw(alice, 63)
            github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Store0: [1:3] bank.Store.Get(alice)
            github.com/ServiceWeaver/weaver/sim/internal/bank/Store0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0: [1:3] return 100, <nil>
            note right of op2: [2:5] Withdraw(alice, 76)
            op2->>github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0: [2:6] bank.Bank.Withdraw(alice, 76)
            github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Store0: [2:7] bank.Store.Get(alice)
            github.com/ServiceWeaver/weaver/sim/internal/bank/Store0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0: [2:7] return 100, <nil>
            github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Store0: [2:8] bank.Store.Add(alice, -76)
            github.com/ServiceWeaver/weaver/sim/internal/bank/Store0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0: [2:8] return 24, <nil>
            github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0->>op2: [2:6] return 24, <nil>
            note right of op2: [2:5] return <nil>
            github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Store0: [1:4] bank.Store.Add(alice, -63)
            github.com/ServiceWeaver/weaver/sim/internal/bank/Store0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0: [1:4] return -39, <nil>
            github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0->>op1: [1:2] return -39, <nil>
            note right of op1: [1:1] return user alice has negative balance -39

--- PASS: TestBank (0.00s)
PASS
ok      github.com/ServiceWeaver/weaver/sim/internal/bank       0.021s
```

The test prints out the folloing Mermaid diagram:

```mermaid
sequenceDiagram
            participant op1 as Op 1
            participant op2 as Op 2
            participant github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0 as bank.Bank 0
            participant github.com/ServiceWeaver/weaver/sim/internal/bank/Store0 as bank.Store 0
            note right of op1: [1:1] Withdraw(alice, 63)
            op1->>github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0: [1:2] bank.Bank.Withdraw(alice, 63)
            github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Store0: [1:3] bank.Store.Get(alice)
            github.com/ServiceWeaver/weaver/sim/internal/bank/Store0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0: [1:3] return 100, <nil>
            note right of op2: [2:5] Withdraw(alice, 76)
            op2->>github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0: [2:6] bank.Bank.Withdraw(alice, 76)
            github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Store0: [2:7] bank.Store.Get(alice)
            github.com/ServiceWeaver/weaver/sim/internal/bank/Store0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0: [2:7] return 100, <nil>
            github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Store0: [2:8] bank.Store.Add(alice, -76)
            github.com/ServiceWeaver/weaver/sim/internal/bank/Store0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0: [2:8] return 24, <nil>
            github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0->>op2: [2:6] return 24, <nil>
            note right of op2: [2:5] return <nil>
            github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Store0: [1:4] bank.Store.Add(alice, -63)
            github.com/ServiceWeaver/weaver/sim/internal/bank/Store0->>github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0: [1:4] return -39, <nil>
            github.com/ServiceWeaver/weaver/sim/internal/bank/Bank0->>op1: [1:2] return -39, <nil>
            note right of op1: [1:1] return user alice has negative balance -39
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/719,"{'number': 719, 'state': 'closed', 'merged': False, 'created_at': '2024-01-31T18:44:40Z', 'merged_at': '2024-02-16T18:06:22Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-31. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_718,2024-01-31T18:43:36Z,"Exported the `sim` package.\n\nThis PR moves the `sim` package out of `internal/` into the root of the weaver repository, exporting it for public use.

We may want to merge the `sim` package into the `weavertest` package. Or, we could keep `sim` as a standalone package, maybe renaming it to `weaversim`. I'm deferring either of these decisions for now.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/718,"{'number': 718, 'state': 'closed', 'merged': False, 'created_at': '2024-01-31T18:43:36Z', 'merged_at': '2024-02-16T17:58:34Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-31. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_717,2024-01-16T23:26:21Z,Add reddit and hacker news links to news.\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/717,"{'number': 717, 'state': 'closed', 'merged': False, 'created_at': '2024-01-16T23:26:21Z', 'merged_at': '2024-01-16T23:30:45Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_715,2024-01-12T21:24:42Z,"Update deployer documentation.\n\nPatch up some stale information.

Drop Appendix that describes the defunct pipe protocol.

Drop copies of Envelope and EnvelopeHandler types; instead rely on live links to the documentation of these types.

Drop stale links from the table of links at the end.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/715,"{'number': 715, 'state': 'closed', 'merged': False, 'created_at': '2024-01-12T21:24:42Z', 'merged_at': '2024-01-12T21:28:44Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_714,2024-01-12T19:27:50Z,"Move bulky data from EnvelopeInfo to InitWeaveletRequest.\n\nEnvelopeInfo is sent in an environment variable, so it should not be too big. Some fields in it (Sections in particular) have unbounded length, so they are moved to InitWeaveletRequest.

NewRemoteWeavelet now waits for InitWeavelet() before returning. This ensures that all information the weavelet needs is available after NewRemoteWeavelet returns.

Renamed EnvelopeInfo to WeaveletArgs.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/714,"{'number': 714, 'state': 'closed', 'merged': False, 'created_at': '2024-01-12T19:27:50Z', 'merged_at': '2024-01-12T20:43:26Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_713,2024-01-12T18:42:21Z,"Rename WeaveletInfo to InitWeaveletReply.\n\nFix a TODO by renaming WeaveletInfo to InitWeaveletReply. This makes the type name consistent with the types of other method return value types.

Reintroduce a version verification check that was mistakenly dropped in an earlier change.

Envelope API provides just the weavelet properties that make sense for a deployer author to worry about (like DialAddr) instead of the entire InitWeaveletReply proto, which may contain internal details.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/713,"{'number': 713, 'state': 'closed', 'merged': False, 'created_at': '2024-01-12T18:42:21Z', 'merged_at': '2024-01-12T18:48:16Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_712,2024-01-12T15:29:15Z,"Remove envelope<->weavelet pipes.\n\nInitialization info sent by the envelope to the weavelet is now sent in an environment variable.

Initialization info sent by the weavelet to the envelope is now sent as the response to a control.WeaveletControl.InitWeavelet() call. This call is made by NewEnvelope() as an initial hand-shake right after creating the weavelet.

Deleted all the envelope/weavlet connection management code.

Deleted low-level tests that were testing details of the connection management protocol.

Dropped unnecessary code that carried a Bootstrap object in a context. We had switched away from our use of a Bootstrap context value a long time ago.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/712,"{'number': 712, 'state': 'closed', 'merged': False, 'created_at': '2024-01-12T15:29:15Z', 'merged_at': '2024-01-12T18:14:34Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_711,2024-01-11T19:46:38Z,"Make tests use NewEnvelope instead of NewEnvelopeConn.\n\nIntroduce a new Child interface that NewEnvelope uses to run the weavelet. Typically this is a real process, but tests that want to run the weavelet in-process can supply a custom implementation.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/711,"{'number': 711, 'state': 'closed', 'merged': False, 'created_at': '2024-01-11T19:46:38Z', 'merged_at': '2024-01-11T22:56:17Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_710,2024-01-10T16:29:32Z,"Remove HandleLogEntry, the old log delivery method.\n\nAn earlier change transitioned to using LogBatch() for sending log entries from the weavelet to the envelope. Remove the old HandleLogEntry method that is no longer used.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/710,"{'number': 710, 'state': 'closed', 'merged': False, 'created_at': '2024-01-10T16:29:32Z', 'merged_at': '2024-01-10T16:56:40Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_709,2024-01-10T00:27:11Z,"Move trace span propagation from pipe to component method.\n\nMove a low-level trace test to traceio directory.

End-to-end span propagation under the multi deployer was verified by temporarily changing example/examples_test to issue a large sequence of HTTP requests and checking that some of these requests showed up in the multi trace database.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/709,"{'number': 709, 'state': 'closed', 'merged': False, 'created_at': '2024-01-10T00:27:11Z', 'merged_at': '2024-01-10T16:12:12Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_708,2024-01-09T21:22:12Z,Switch certificate RPCs from pipe to component calls\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/708,"{'number': 708, 'state': 'closed', 'merged': False, 'created_at': '2024-01-09T21:22:12Z', 'merged_at': '2024-01-09T23:11:48Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_707,2024-01-09T19:30:19Z,"Fix MTLS handling.\n\nWe were using the wrong component name when setting up group data structures for MTLS (because of Go's funny loop variable capture semantics). Fixed this.

Added a test that uses multi deployer with MTLS.

Increased timeout for the test from 4s to 10s.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/707,"{'number': 707, 'state': 'closed', 'merged': False, 'created_at': '2024-01-09T19:30:19Z', 'merged_at': '2024-01-09T20:54:35Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_706,2024-01-09T18:29:38Z,Move listener RPCs from pipe to deployer component.\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/706,"{'number': 706, 'state': 'closed', 'merged': False, 'created_at': '2024-01-09T18:29:38Z', 'merged_at': '2024-01-09T18:41:51Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_705,2024-01-08T23:36:50Z,"Move ActivateComponents RPC from pipe to component method call.\n\nContinuing the work to remove pipe-based RPCs, the ActivateComponents call to the deployer is now a component method call.

Also made NewEnvelope() responsible for serving calls to the deployer component. (Callers that are directly using NewEnvelopeConn() still have to manage such calls themselves.)",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/705,"{'number': 705, 'state': 'closed', 'merged': False, 'created_at': '2024-01-08T23:36:50Z', 'merged_at': '2024-01-09T18:04:43Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_704,2024-01-08T18:00:41Z,"Rename control components.\n\n1. Rename the control.Controller component to control.WeaverControl (to distinguish it from the DeployerControl component). Consistently rename corresponding types in other packages.
2. Introduce a control.DeployerControl component that will hold methods implemented by deployers. Remove the logger component and move LogBatch into control.DeployerControl.
3. Do not make the multi deployer provide a full component implementation (by using ""weaver generate""). Instead, just export its override under the non-overridden component name.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/704,"{'number': 704, 'state': 'closed', 'merged': False, 'created_at': '2024-01-08T18:00:41Z', 'merged_at': '2024-01-08T18:19:06Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_702,2024-01-03T18:46:31Z,Move GetMetrics from a pipe RPC to a controller component method.\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/702,"{'number': 702, 'state': 'closed', 'merged': False, 'created_at': '2024-01-03T18:46:31Z', 'merged_at': '2024-01-03T19:08:57Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_701,2024-01-03T17:29:48Z,Move GetMetrics from a pipe RPC to a controller component method.\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/701,"{'number': 701, 'state': 'closed', 'merged': False, 'created_at': '2024-01-03T17:29:48Z', 'merged_at': '2024-01-03T17:57:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_700,2024-01-02T18:56:19Z,Fix typo in controller.\n\n...,6a363381c5596ca8,https://github.com/ServiceWeaver/weaver/pull/700,"{'number': 700, 'state': 'closed', 'merged': False, 'created_at': '2024-01-02T18:56:19Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-02. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_699,2024-01-02T16:41:55Z,Move GetHealth from a pipe RPC to a controller component method.\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/699,"{'number': 699, 'state': 'closed', 'merged': False, 'created_at': '2024-01-02T16:41:55Z', 'merged_at': '2024-01-02T18:16:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-02. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_698,2024-01-02T04:46:28Z,Fix typo in controller.\n\n,6a363381c5596ca8,https://github.com/ServiceWeaver/weaver/pull/698,"{'number': 698, 'state': 'closed', 'merged': False, 'created_at': '2024-01-02T04:46:28Z', 'merged_at': '2024-01-02T17:35:19Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2024-01-02. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_696,2023-12-21T15:10:57Z,Use propagated context when a component is initialized\n\nMore details on #695.,32205b0053c46c59,https://github.com/ServiceWeaver/weaver/pull/696,"{'number': 696, 'state': 'closed', 'merged': False, 'created_at': '2023-12-21T15:10:57Z', 'merged_at': '2024-01-02T17:34:44Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-12-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_693,2023-12-19T21:21:08Z,"Bump github.com/containerd/containerd from 1.7.6 to 1.7.11\n\nBumps [github.com/containerd/containerd](https://github.com/containerd/containerd) from 1.7.6 to 1.7.11.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/containerd/containerd/releases"">github.com/containerd/containerd's releases</a>.</em></p>
<blockquote>
<h2>containerd 1.7.11</h2>
<p>Welcome to the v1.7.11 release of containerd!</p>
<p>The eleventh patch release for containerd 1.7 contains various fixes and updates including
one security issue.</p>
<h3>Notable Updates</h3>
<ul>
<li><strong>Fix Windows default path overwrite issue</strong> (<a href=""https://redirect.github.com/containerd/containerd/pull/9440"">#9440</a>)</li>
<li><strong>Update push to always inherit distribution sources from parent</strong> (<a href=""https://redirect.github.com/containerd/containerd/pull/9452"">#9452</a>)</li>
<li><strong>Update shim to use net dial for gRPC shim sockets</strong> (<a href=""https://redirect.github.com/containerd/containerd/pull/9458"">#9458</a>)</li>
<li><strong>Fix otel version incompatibility</strong> (<a href=""https://redirect.github.com/containerd/containerd/pull/9483"">#9483</a>)</li>
<li><strong>Fix Windows snapshotter blocking snapshot GC on remove failure</strong> (<a href=""https://redirect.github.com/containerd/containerd/pull/9482"">#9482</a>)</li>
<li><strong>Mask <code>/sys/devices/virtual/powercap</code> path in runtime spec and deny in default apparmor profile</strong> (<a href=""https://github.com/containerd/containerd/security/advisories/GHSA-7ww5-4wqc-m92c"">GHSA-7ww5-4wqc-m92c</a>)</li>
</ul>
<h3>Deprecation Warnings</h3>
<ul>
<li><strong>Emit deprecation warning for AUFS snapshotter</strong> (<a href=""https://redirect.github.com/containerd/containerd/pull/9436"">#9436</a>)</li>
<li><strong>Emit deprecation warning for v1 runtime</strong> (<a href=""https://redirect.github.com/containerd/containerd/pull/9450"">#9450</a>)</li>
<li><strong>Emit deprecation warning for deprecated CRI configs</strong> (<a href=""https://redirect.github.com/containerd/containerd/pull/9469"">#9469</a>)</li>
<li><strong>Emit deprecation warning for CRI v1alpha1 usage</strong> (<a href=""https://redirect.github.com/containerd/containerd/pull/9479"">#9479</a>)</li>
<li><strong>Emit deprecation warning for CRIU config in CRI</strong> (<a href=""https://redirect.github.com/containerd/containerd/pull/9481"">#9481</a>)</li>
</ul>
<p>See the changelog for complete list of changes</p>
<p>Please try out the release binaries and report any issues at
<a href=""https://github.com/containerd/containerd/issues"">https://github.com/containerd/containerd/issues</a>.</p>
<h3>Contributors</h3>
<ul>
<li>Samuel Karp</li>
<li>Derek McGowan</li>
<li>Phil Estes</li>
<li>Bjorn Neergaard</li>
<li>Danny Canter</li>
<li>Sebastiaan van Stijn</li>
<li>ruiwen-zhao</li>
<li>Akihiro Suda</li>
<li>Amit Barve</li>
<li>Charity Kathure</li>
<li>Maksym Pavlenko</li>
<li>Milas Bowman</li>
<li>Paweł Gronowski</li>
<li>Wei Fu</li>
</ul>
<h3>Changes</h3>
<!-- raw HTML omitted -->
<ul>
<li>[release/1.7] Prepare release notes for v1.7.11 (<a href=""https://redirect.github.com/containerd/containerd/pull/9491"">#9491</a>)</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/containerd/containerd/commit/64b8a811b07ba6288238eefc14d898ee0b5b99ba""><code>64b8a81</code></a> Merge pull request <a href=""https://redirect.github.com/containerd/containerd/issues/9491"">#9491</a> from dmcgowan/prepare-1.7.11</li>
<li><a href=""https://github.com/containerd/containerd/commit/ea5a4778aa63b3bee0225ec368d4cd2af7dcd238""><code>ea5a477</code></a> Merge pull request <a href=""https://redirect.github.com/containerd/containerd/issues/9352"">#9352</a> from thaJeztah/1.7_update_golang_1.20.11</li>
<li><a href=""https://github.com/containerd/containerd/commit/67d356cb3095f3e8f8ad7d36f9a733fea1e7e28c""><code>67d356c</code></a> Merge pull request from GHSA-7ww5-4wqc-m92c</li>
<li><a href=""https://github.com/containerd/containerd/commit/dfae68bc3e614a091d0a468c9026da370e3de0d9""><code>dfae68b</code></a> Prepare release notes for v1.7.11</li>
<li><a href=""https://github.com/containerd/containerd/commit/de6d8a8fc60851adbfc1d7c9567799357f288e5c""><code>de6d8a8</code></a> Merge pull request <a href=""https://redirect.github.com/containerd/containerd/issues/9482"">#9482</a> from ambarve/sn_cleanup_1.7</li>
<li><a href=""https://github.com/containerd/containerd/commit/ed7c6895bd3b33ccc7cfbc8cbd43f6a31333328a""><code>ed7c689</code></a> Don't block snapshot garbage collection on Remove failures</li>
<li><a href=""https://github.com/containerd/containerd/commit/467de562c108d074d81dd81d42150f98a6608eae""><code>467de56</code></a> Merge pull request <a href=""https://redirect.github.com/containerd/containerd/issues/9481"">#9481</a> from ruiwen-zhao/cri-u</li>
<li><a href=""https://github.com/containerd/containerd/commit/d94f8ffeb057a89dd363fa220b24454cf88f0780""><code>d94f8ff</code></a> Merge pull request <a href=""https://redirect.github.com/containerd/containerd/issues/9483"">#9483</a> from dmcgowan/backport-1.7-fix-otel-http</li>
<li><a href=""https://github.com/containerd/containerd/commit/1fdefdd2242fcf704a11f1d6b5149e056ce98ed3""><code>1fdefdd</code></a> Add warning for CRIU config usage</li>
<li><a href=""https://github.com/containerd/containerd/commit/8e0689938a47e582ebefc5709b405fce3badd835""><code>8e06899</code></a> Merge pull request <a href=""https://redirect.github.com/containerd/containerd/issues/9479"">#9479</a> from ruiwen-zhao/cri-api-warning</li>
<li>Additional commits viewable in <a href=""https://github.com/containerd/containerd/compare/v1.7.6...v1.7.11"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=github.com/containerd/containerd&package-manager=go_modules&previous-version=1.7.6&new-version=1.7.11)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

You can trigger a rebase of this PR by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>

> **Note**
> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/693,"{'number': 693, 'state': 'closed', 'merged': False, 'created_at': '2023-12-19T21:21:08Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-12-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_692,2023-12-19T20:53:17Z,Add SSH documentation to the website.\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/692,"{'number': 692, 'state': 'closed', 'merged': False, 'created_at': '2023-12-19T20:53:17Z', 'merged_at': '2023-12-19T21:14:38Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-12-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_691,2023-12-19T18:24:03Z,"Make profile collection a component method.\n\nAlso, stop tracking whether or not CPU profiling is already on explicitly; let the Go runtime do it.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/691,"{'number': 691, 'state': 'closed', 'merged': False, 'created_at': '2023-12-19T18:24:03Z', 'merged_at': '2023-12-19T20:56:14Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-12-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_689,2023-12-19T00:11:41Z,Move UpdateRoutingInfo RPC from pipe to Controller component.\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/689,"{'number': 689, 'state': 'closed', 'merged': False, 'created_at': '2023-12-19T00:11:41Z', 'merged_at': '2023-12-19T16:26:08Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-12-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_688,2023-12-18T23:39:32Z,"Bump golang.org/x/crypto from 0.14.0 to 0.17.0\n\nBumps [golang.org/x/crypto](https://github.com/golang/crypto) from 0.14.0 to 0.17.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/golang/crypto/commit/9d2ee975ef9fe627bf0a6f01c1f69e8ef1d4f05d""><code>9d2ee97</code></a> ssh: implement strict KEX protocol changes</li>
<li><a href=""https://github.com/golang/crypto/commit/4e5a26183ecb4f9a0f85c8f8dbe7982885435436""><code>4e5a261</code></a> ssh: close net.Conn on all NewServerConn errors</li>
<li><a href=""https://github.com/golang/crypto/commit/152cdb1503ebc13bc0fbb68f92ee189ebf9e3d00""><code>152cdb1</code></a> x509roots/fallback: update bundle</li>
<li><a href=""https://github.com/golang/crypto/commit/fdfe1f8531a1adcc300c8eba98cb372044826d62""><code>fdfe1f8</code></a> ssh: defer channel window adjustment</li>
<li><a href=""https://github.com/golang/crypto/commit/b8ffc16e10063067bac0e15c6d7f7995937503ce""><code>b8ffc16</code></a> blake2b: drop Go 1.6, Go 1.8 compatibility</li>
<li><a href=""https://github.com/golang/crypto/commit/7e6fbd82c804e1760feb603fe21caecb0af0a124""><code>7e6fbd8</code></a> ssh: wrap errors from client handshake</li>
<li><a href=""https://github.com/golang/crypto/commit/bda2f3f5cfce3f27039acccd823693f6d67c2a74""><code>bda2f3f</code></a> argon2: avoid clobbering BP</li>
<li><a href=""https://github.com/golang/crypto/commit/325b735346247f48971d2b37d24dd180a35f391f""><code>325b735</code></a> ssh/test: skip TestSSHCLIAuth on Windows</li>
<li><a href=""https://github.com/golang/crypto/commit/1eadac50a566dfaa1b603ca15e8ad3cbd1c77b20""><code>1eadac5</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/crypto/commit/b2d7c26edb17864f117d8b0ee73c1843bcc6090f""><code>b2d7c26</code></a> ssh: add (*Client).DialContext method</li>
<li>Additional commits viewable in <a href=""https://github.com/golang/crypto/compare/v0.14.0...v0.17.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/crypto&package-manager=go_modules&previous-version=0.14.0&new-version=0.17.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

You can trigger a rebase of this PR by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>

> **Note**
> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/688,"{'number': 688, 'state': 'closed', 'merged': False, 'created_at': '2023-12-18T23:39:32Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-12-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_687,2023-12-18T23:38:56Z,"Drop UpdateComponentsRPC.\n\nAn earlier changed switched to using a controller component method call to update the set of components served by a weavelet. This change finishes that by dropping the UpdateComponentsRPC from the pipe protocol.

The weavertest multi deployer code had to be refactored a little bit to give it access to the controller component (either local for components hosted in the main process, or remote for components hosted in other processes).

Also dropped the GetHealth method from the controller component since it is currently not used. (The only user of GetHealth is an out of tree deployer that has not yet been switched to using the controller component.)",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/687,"{'number': 687, 'state': 'closed', 'merged': False, 'created_at': '2023-12-18T23:38:56Z', 'merged_at': '2023-12-18T23:51:02Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-12-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_686,2023-12-14T22:19:32Z,"Use component method calls for some of the envelope->weavelet calls.\n\nPreviously, all envelope initiated communicaton to the weavelet was carried over a pair of pipes. This change switches some of that communication to be based on component method calls. In particular, the signal to start components is now carried by a method call (UpdateComponents) to a component hosted by the weavelet.

Main changes
------------

1. Introduce a controller component that is hosted by every remoteweavelet.
2. The envelope picks the name of a Unix domain socket and passes it to the weavelet it creates.
3. The envelope creates a stub pointing at this socket and makes calls to it to control the weavelet. (Currently only UpdateComponents is handled this way.)
4. remoteweavelet creates a controller implementation to handle method calls received over this Unix domain socket.

Other changes
-------------

1. envelope.NewEnvelope() now takes an Options struct as an argument. This struct can contain an optional Logger and an optional Tracer. The supplied Logger and Tracer are used for calls made to the controller component.
2. envelope.NewEnvelope() creates a temporary directory and allocates a Unix domain socket inside the directory. It also arranges to remove the directory when cleaning up (by catching termination signals for examples).
3. The socket name is passed in the EnvelopeInfo proto sent to the weavelet.
4. RemoteWeavelet creates a controller component and listens for calls to it on the supplied socket.
5. Added deployers.NewUnixSocketPath(), which allocates a new socket name inside a supplied directory.
6. weavertest multi deployer manages its own socket creation when it bypasses envelope.NewEnvelope().
7. website/blog/deployers/deployers_test.go kills child processes using SIGTERM instead of SIGKILL. This allows the child process a chance to clean up its temporary directories.
8. deployers_test.go logs the stderr and stdout lines it receives instead of dropping them on the floor. This can be very helpful when things aren't working as expected.
9. The deployer examples in the blog import the weaver package so they have access to the controller component registration.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/686,"{'number': 686, 'state': 'closed', 'merged': False, 'created_at': '2023-12-14T22:19:32Z', 'merged_at': '2023-12-15T15:34:09Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-12-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_685,2023-12-13T23:24:04Z,Move client stub creation to internal/net/call so it can be used with…\n\n…out a weavelet,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/685,"{'number': 685, 'state': 'closed', 'merged': False, 'created_at': '2023-12-13T23:24:04Z', 'merged_at': '2023-12-13T23:28:32Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-12-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_684,2023-11-25T12:06:02Z,Update docs.md to mention encrypted secure conn via mTLS\n\nAllow users to easily find information related to encrypted and secure connection between components.,3e827fa871466f40,https://github.com/ServiceWeaver/weaver/pull/684,"{'number': 684, 'state': 'closed', 'merged': False, 'created_at': '2023-11-25T12:06:02Z', 'merged_at': '2023-11-27T17:14:20Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-11-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_682,2023-11-15T20:59:33Z,"Otel tracer: update service name to the app name\n\nIn the current implementation, we create a global trace provider where the service name is the weavelet id. However, this is meaningless and confusing especially if you use Jaeger where the services to select traces for are based on the weavelet ids.

With this PR, the user sees only one service, which is the app name, and all the traces associated with it.

In an ideal scenarion, we may want to export a tracing service for each colocation group. However, this is not easy, given that we have a global trace provider that has to set attributed for the service name. We may revisit this in a future PR.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/682,"{'number': 682, 'state': 'closed', 'merged': False, 'created_at': '2023-11-15T20:59:33Z', 'merged_at': '2023-11-15T23:45:48Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-11-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_680,2023-11-14T22:35:29Z,Update tracing info exported by weavelet\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/680,"{'number': 680, 'state': 'closed', 'merged': False, 'created_at': '2023-11-14T22:35:29Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-11-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_677,2023-11-13T00:50:55Z,"Add goreleaser to publish signed binaries\n\nHi team,

I just wanted to introduce goreleaser as it simplifies the publishing, distribution and signing of assets.
You can see an example here: https://github.com/anchore/grype/releases/tag/v0.73.1

The next step would be to provide a container with weaver in it as it could be used as a base image for container instead of a [vanilla container like ubuntu](https://github.com/ServiceWeaver/weaver-kube/blob/main/internal/impl/docker.go#L140)

Happy to discuss this further as **this PR probably won't work on the first try**. Those things are a bit hard to get right without testing them first.

Let me know your thoughts.",584e76142b0af2d8,https://github.com/ServiceWeaver/weaver/pull/677,"{'number': 677, 'state': 'closed', 'merged': False, 'created_at': '2023-11-13T00:50:55Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-11-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_676,2023-11-09T01:17:35Z,Small updates to the website docs to reflect kube\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/676,"{'number': 676, 'state': 'closed', 'merged': False, 'created_at': '2023-11-09T01:17:35Z', 'merged_at': '2023-11-09T01:26:32Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-11-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_675,2023-11-09T01:00:08Z,Add blog post on Service Weaver Kubernetes deployers\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/675,"{'number': 675, 'state': 'closed', 'merged': False, 'created_at': '2023-11-09T01:00:08Z', 'merged_at': '2023-11-09T20:59:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-11-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_674,2023-11-08T01:57:12Z,Add KUBE documentation to the website\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/674,"{'number': 674, 'state': 'closed', 'merged': False, 'created_at': '2023-11-08T01:57:12Z', 'merged_at': '2023-11-08T20:54:11Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-11-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_673,2023-11-06T21:57:42Z,Update instructions in examples how to run with kube\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/673,"{'number': 673, 'state': 'closed', 'merged': False, 'created_at': '2023-11-06T21:57:42Z', 'merged_at': '2023-11-06T22:55:10Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-11-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_671,2023-11-02T21:33:36Z,"Bump golang.org/x/image from 0.5.0 to 0.10.0\n\nBumps [golang.org/x/image](https://github.com/golang/image) from 0.5.0 to 0.10.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/golang/image/commit/cb227cd2c919b27c6206fe0c1041a8bcc677949d""><code>cb227cd</code></a> tiff: limit work when decoding malicious images</li>
<li><a href=""https://github.com/golang/image/commit/a5392f068b20c5126e356d1987f3eb74fffe1af2""><code>a5392f0</code></a> bmp: support to decode 8-bit format with up to 256 color palette</li>
<li><a href=""https://github.com/golang/image/commit/f9550b04a5344792f1e5e5f9fbe8f5e87423f19e""><code>f9550b0</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/image/commit/81c166c49c1d18a6e9a5f659b646eb300013ccd0""><code>81c166c</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/image/commit/ed5dba0ea28f9438e4dac0320f7d9bb2fddd9737""><code>ed5dba0</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/image/commit/08ca817286cef4a50486ff2dc212ec148ff956ae""><code>08ca817</code></a> font: have Glyph return !ok for U+FFFD substitute</li>
<li><a href=""https://github.com/golang/image/commit/b6ac75bc5918c3a0a2200faa20aedebc76d5b349""><code>b6ac75b</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/image/commit/1b7441254c9a43adda43ffcf12d7add0f1df0191""><code>1b74412</code></a> font/sfnt: set type for all NameID constants</li>
<li><a href=""https://github.com/golang/image/commit/f632f7f87ca2653b091bcaab6d048f5799b841c9""><code>f632f7f</code></a> tiff, tiff/lzw, vector: use single space in comments</li>
<li>See full diff in <a href=""https://github.com/golang/image/compare/v0.5.0...v0.10.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/image&package-manager=go_modules&previous-version=0.5.0&new-version=0.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

You can trigger a rebase of this PR by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>

> **Note**
> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/671,"{'number': 671, 'state': 'closed', 'merged': False, 'created_at': '2023-11-02T21:33:36Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-11-02. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_669,2023-10-30T15:49:19Z,"Bump github.com/docker/docker from 24.0.6+incompatible to 24.0.7+incompatible\n\nBumps [github.com/docker/docker](https://github.com/docker/docker) from 24.0.6+incompatible to 24.0.7+incompatible.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/docker/docker/releases"">github.com/docker/docker's releases</a>.</em></p>
<blockquote>
<h2>v24.0.7</h2>
<h2>24.0.7</h2>
<p>For a full list of pull requests and changes in this release, refer to the relevant GitHub milestones:</p>
<ul>
<li><a href=""https://github.com/docker/cli/issues?q=is%3Aclosed+milestone%3A24.0.7"">docker/cli, 24.0.7 milestone</a></li>
<li><a href=""https://github.com/moby/moby/issues?q=is%3Aclosed+milestone%3A24.0.7"">moby/moby, 24.0.7 milestone</a></li>
</ul>
<h3>Bug fixes and enhancements</h3>
<ul>
<li>Write overlay2 layer metadata atomically. <a href=""https://redirect.github.com/moby/moby/pull/46703"">moby/moby#46703</a></li>
<li>Fix &quot;Rootful-in-Rootless&quot; Docker-in-Docker on systemd version 250 and later. <a href=""https://redirect.github.com/moby/moby/pull/46626"">moby/moby#46626</a></li>
<li>Fix <code>dockerd-rootless-setuptools.sh</code> when username contains a backslash. <a href=""https://redirect.github.com/moby/moby/pull/46407"">moby/moby#46407</a></li>
<li>Fix a bug that would prevent network sandboxes to be fully deleted when stopping containers with no network attachments and when <code>dockerd --bridge=none</code> is used. <a href=""https://redirect.github.com/moby/moby/pull/46702"">moby/moby#46702</a></li>
<li>Fix a bug where cancelling an API request could interrupt container restart. <a href=""https://redirect.github.com/moby/moby/pull/46697"">moby/moby#46697</a></li>
<li>Fix an issue where containers would fail to start when providing <code>--ip-range</code> with a range larger than the subnet. <a href=""https://redirect.github.com/docker/for-mac/issues/6870"">docker/for-mac#6870</a></li>
<li>Fix data corruption with zstd output. <a href=""https://redirect.github.com/moby/moby/pull/46709"">moby/moby#46709</a></li>
<li>Fix the conditions under which the container's MAC address is applied. <a href=""https://redirect.github.com/moby/moby/pull/46478"">moby/moby#46478</a></li>
<li>Improve the performance of the stats collector. <a href=""https://redirect.github.com/moby/moby/pull/46448"">moby/moby#46448</a></li>
<li>Fix an issue with source policy rules ending up in the wrong order. <a href=""https://redirect.github.com/moby/moby/pull/46441"">moby/moby#46441</a></li>
</ul>
<h3>Packaging updates</h3>
<ul>
<li>Add support for Fedora 39 and Ubuntu 23.10. <a href=""https://redirect.github.com/docker/docker-ce-packaging/pull/940"">docker/docker-ce-packaging#940</a>, <a href=""https://redirect.github.com/docker/docker-ce-packaging/pull/955"">docker/docker-ce-packaging#955</a></li>
<li>Fix <code>docker.socket</code> not getting disabled when uninstalling the <code>docker-ce</code> RPM package. <a href=""https://redirect.github.com/docker/docker-ce-packaging/pull/852"">docker/docker-ce-packaging#852</a></li>
<li>Upgrade Go to <code>go1.20.10</code>. <a href=""https://redirect.github.com/docker/docker-ce-packaging/pull/951"">docker/docker-ce-packaging#951</a></li>
<li>Upgrade containerd to <code>v1.7.6</code> (static binaries only). <a href=""https://redirect.github.com/moby/moby/pull/46103"">moby/moby#46103</a></li>
<li>Upgrade the <code>containerd.io</code> package to <a href=""https://github.com/containerd/containerd/releases/tag/v1.6.24""><code>v1.6.24</code></a>.</li>
</ul>
<h3>Security</h3>
<ul>
<li>Deny containers access to <code>/sys/devices/virtual/powercap</code> by default. This change hardens against <a href=""https://scout.docker.com/v/CVE-2020-8694"">CVE-2020-8694</a>, <a href=""https://scout.docker.com/v/CVE-2020-8695"">CVE-2020-8695</a>, and <a href=""https://scout.docker.com/v/CVE-2020-12912"">CVE-2020-12912</a>, and an attack known as <a href=""https://platypusattack.com/"">the PLATYPUS attack</a>. For more details, see <a href=""https://github.com/moby/moby/security/advisories/GHSA-jq35-85cj-fj4p"">advisory</a>, <a href=""https://github.com/moby/moby/commit/c9ccbfad11a60e703e91b6cca4f48927828c7e35"">commit</a>.</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/moby/moby/commit/311b9ff0aa93aa55880e1e5f8871c4fb69583426""><code>311b9ff</code></a> Merge pull request <a href=""https://redirect.github.com/docker/docker/issues/46697"">#46697</a> from thaJeztah/24.0_backport_restart_nocancel</li>
<li><a href=""https://github.com/moby/moby/commit/af608045eef0b87f31a24d21fb7af80de76134aa""><code>af60804</code></a> Merge pull request from GHSA-jq35-85cj-fj4p</li>
<li><a href=""https://github.com/moby/moby/commit/3cf363e1ee33fe00dbedfdb7d6caf299990d5568""><code>3cf363e</code></a> Merge pull request <a href=""https://redirect.github.com/docker/docker/issues/46709"">#46709</a> from thaJeztah/24.0_backport_bump_compress</li>
<li><a href=""https://github.com/moby/moby/commit/05d7386665793b7f8398eb80b4e85adff5486035""><code>05d7386</code></a> daemon: daemon.containerRestart: don't cancel restart on context cancel</li>
<li><a href=""https://github.com/moby/moby/commit/649c9440f28c7334ee5c9f17889448a81dcc8729""><code>649c944</code></a> Merge pull request <a href=""https://redirect.github.com/docker/docker/issues/46703"">#46703</a> from thaJeztah/24.0_backport_atomic-layer-data-write</li>
<li><a href=""https://github.com/moby/moby/commit/9b20b1a5fe0919a79cc15f6a3f331f2cdae0a37a""><code>9b20b1a</code></a> Merge pull request <a href=""https://redirect.github.com/docker/docker/issues/46702"">#46702</a> from thaJeztah/24.0_backport_releaseNetwork_Network...</li>
<li><a href=""https://github.com/moby/moby/commit/dd37b0b960ec4d3da0ca2efe78fa47484d4c6380""><code>dd37b0b</code></a> vendor: github.com/klauspost/compress v1.17.2</li>
<li><a href=""https://github.com/moby/moby/commit/7058c0d24da8ac9267e52224b6a3beaa24ce5e9f""><code>7058c0d</code></a> vendor: github.com/klauspost/compress v1.16.5</li>
<li><a href=""https://github.com/moby/moby/commit/57bd38858262922b86ceea37770536ff535fa2af""><code>57bd388</code></a> daemon: overlay2: Write layer metadata atomically</li>
<li><a href=""https://github.com/moby/moby/commit/05d95fd5038a8a56ff69294a3bdd33b2d2769ba3""><code>05d95fd</code></a> daemon: release sandbox even when NetworkDisabled</li>
<li>Additional commits viewable in <a href=""https://github.com/docker/docker/compare/v24.0.6...v24.0.7"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=github.com/docker/docker&package-manager=go_modules&previous-version=24.0.6+incompatible&new-version=24.0.7+incompatible)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

You can trigger a rebase of this PR by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>

> **Note**
> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/669,"{'number': 669, 'state': 'closed', 'merged': False, 'created_at': '2023-10-30T15:49:19Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_668,2023-10-25T21:42:36Z,"Bump google.golang.org/grpc from 1.57.0 to 1.57.1\n\nBumps [google.golang.org/grpc](https://github.com/grpc/grpc-go) from 1.57.0 to 1.57.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/grpc/grpc-go/releases"">google.golang.org/grpc's releases</a>.</em></p>
<blockquote>
<h2>Release 1.57.1</h2>
<h1>Security</h1>
<ul>
<li>
<p>server: prohibit more than MaxConcurrentStreams handlers from running at once (CVE-2023-44487)</p>
<p>In addition to this change, applications should ensure they do not leave running tasks behind related to the RPC before returning from method handlers, or should enforce appropriate limits on any such work.</p>
</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/grpc/grpc-go/commit/d9c4eab5e1086d726510c775819fd042498f6d92""><code>d9c4eab</code></a> Change version to 1.57.1 (<a href=""https://redirect.github.com/grpc/grpc-go/issues/6712"">#6712</a>)</li>
<li><a href=""https://github.com/grpc/grpc-go/commit/6a1400d526dfe16aafc960c882507dcdcf3b0f61""><code>6a1400d</code></a> server: prohibit more than MaxConcurrentStreams handlers from running at once...</li>
<li><a href=""https://github.com/grpc/grpc-go/commit/7511ddf04b1ba74195e69d50ab175de18c414015""><code>7511ddf</code></a> Change version to 1.57.1-dev (<a href=""https://redirect.github.com/grpc/grpc-go/issues/6449"">#6449</a>)</li>
<li>See full diff in <a href=""https://github.com/grpc/grpc-go/compare/v1.57.0...v1.57.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=google.golang.org/grpc&package-manager=go_modules&previous-version=1.57.0&new-version=1.57.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

You can trigger a rebase of this PR by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>

> **Note**
> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/668,"{'number': 668, 'state': 'closed', 'merged': False, 'created_at': '2023-10-25T21:42:36Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_667,2023-10-21T00:22:09Z,"Colocation groups config\n\nRight now we specify the components that should run together in a colocation group. For all the others we run them in their own groups. However, given that the group is the unit of deployment, we'll have to add configuration knobs that make sense per colocation group.

This PR provides some options to set per colocation group knobs in the config.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/667,"{'number': 667, 'state': 'closed', 'merged': False, 'created_at': '2023-10-21T00:22:09Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_666,2023-10-19T16:11:11Z,"Fixed panicking packages.Load call.\n\n`weaver generate`'s initial call to `packages.Load` started to panic. I'm not entirely sure why, but upgrading the `golang.org/x/tools` module fixed the problem.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/666,"{'number': 666, 'state': 'closed', 'merged': False, 'created_at': '2023-10-19T16:11:11Z', 'merged_at': '2023-10-19T16:28:01Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_665,2023-10-19T00:35:02Z,"Add optional names for colocation groups\n\nWe've discussed in the past to enable the user to specify group names. Right now we compute automatically the group names as the name of the first component in each group.

This PR enables the user to specify group names (optionally). This is becoming more and more important given that we allow the user to configure various knobs in the deployer, and many knobs make sense for a particular colocation group. E.g., secrets/config maps make sense for colocation group. Maybe we will allow people to configure resource requirements per colocation group at some point, etc.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/665,"{'number': 665, 'state': 'closed', 'merged': False, 'created_at': '2023-10-19T00:35:02Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_661,2023-10-16T14:17:10Z,"Bump go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp from 0.42.0 to 0.44.0\n\nBumps [go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp](https://github.com/open-telemetry/opentelemetry-go-contrib) from 0.42.0 to 0.44.0.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/releases"">go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp's releases</a>.</em></p>
<blockquote>
<h2>Release v1.20.0/v0.45.0/v0.14.0</h2>
<h3>Added</h3>
<ul>
<li>Set the description for the <code>rpc.server.duration</code> metric in <code>go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4302"">#4302</a>)</li>
<li>Add <code>NewServerHandler</code> and <code>NewClientHandler</code> that return a <code>grpc.StatsHandler</code> used for gRPC instrumentation in <code>go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/3002"">#3002</a>)</li>
<li>Add new Prometheus bridge module in <code>go.opentelemetry.io/contrib/bridges/prometheus</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4227"">#4227</a>)</li>
</ul>
<h3>Changed</h3>
<ul>
<li>Upgrade dependencies of OpenTelemetry Go to use the new <a href=""https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.19.0""><code>v1.19.0</code>/<code>v0.42.0</code>/<code>v0.0.7</code> release</a>.</li>
<li>Use <code>grpc.StatsHandler</code> for gRPC instrumentation in <code>go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc/example</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4325"">#4325</a>)</li>
</ul>
<h2>New Contributors</h2>
<ul>
<li><a href=""https://github.com/puckpuck""><code>@​puckpuck</code></a> made their first contribution in <a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/pull/4302"">open-telemetry/opentelemetry-go-contrib#4302</a></li>
</ul>
<p><strong>Full Changelog</strong>: <a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/compare/v1.19.0...v1.20.0"">https://github.com/open-telemetry/opentelemetry-go-contrib/compare/v1.19.0...v1.20.0</a></p>
<h2>Release v1.19.0/v0.44.0/v0.13.0</h2>
<h3>Added</h3>
<ul>
<li>Add <code>gcp.gce.instance.name</code> and <code>gcp.gce.instance.hostname</code> resource attributes to <code>go.opentelemetry.io/contrib/detectors/gcp</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4263"">#4263</a>)</li>
</ul>
<h3>Changed</h3>
<ul>
<li>The semantic conventions used by <code>go.opentelemetry.io/contrib/detectors/aws/ec2</code> have been upgraded to v1.21.0. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4265"">#4265</a>)</li>
<li>The semantic conventions used by <code>go.opentelemetry.io/contrib/detectors/aws/ecs</code> have been upgraded to v1.21.0. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4265"">#4265</a>)</li>
<li>The semantic conventions used by <code>go.opentelemetry.io/contrib/detectors/aws/eks</code> have been upgraded to v1.21.0. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4265"">#4265</a>)</li>
<li>The semantic conventions used by <code>go.opentelemetry.io/contrib/detectors/aws/lambda</code> have been upgraded to v1.21.0. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4265"">#4265</a>)</li>
<li>The semantic conventions used by <code>go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-lambda-go/otellambda</code> have been upgraded to v1.21.0. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4265"">#4265</a>)
<ul>
<li>The <code>faas.execution</code> attribute is now <code>faas.invocation_id</code>.</li>
<li>The <code>faas.id</code> attribute is now <code>aws.lambda.invoked_arn</code>.</li>
</ul>
</li>
<li>The semantic conventions used by <code>go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws</code> have been upgraded to v1.21.0. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4265"">#4265</a>)</li>
<li>The <code>http.request.method</code> attribute will only allow known HTTP methods from the metrics generated by <code>go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4277"">#4277</a>)</li>
</ul>
<h3>Removed</h3>
<ul>
<li>The high cardinality attributes <code>net.sock.peer.addr</code>, <code>net.sock.peer.port</code>, <code>http.user_agent</code>, <code>enduser.id</code>, and <code>http.client_ip</code> were removed from the metrics generated by <code>go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4277"">#4277</a>)</li>
<li>The deprecated <code>go.opentelemetry.io/contrib/instrumentation/github.com/astaxie/beego/otelbeego</code> module is removed. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4295"">#4295</a>)</li>
<li>The deprecated <code>go.opentelemetry.io/contrib/instrumentation/github.com/go-kit/kit/otelkit</code> module is removed. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4295"">#4295</a>)</li>
<li>The deprecated <code>go.opentelemetry.io/contrib/instrumentation/github.com/Shopify/sarama/otelsarama</code> module is removed. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4295"">#4295</a>)</li>
<li>The deprecated <code>go.opentelemetry.io/contrib/instrumentation/github.com/bradfitz/gomemcache/memcache/otelmemcache</code> module is removed. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4295"">#4295</a>)</li>
<li>The deprecated <code>go.opentelemetry.io/contrib/instrumentation/github.com/gocql/gocql/otelgocql</code> module is removed. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4295"">#4295</a>)</li>
</ul>
<h2>New Contributors</h2>
<ul>
<li><a href=""https://github.com/utsushiiro""><code>@​utsushiiro</code></a> made their first contribution in <a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/pull/4260"">open-telemetry/opentelemetry-go-contrib#4260</a></li>
<li><a href=""https://github.com/RangelReale""><code>@​RangelReale</code></a> made their first contribution in <a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/pull/4230"">open-telemetry/opentelemetry-go-contrib#4230</a></li>
</ul>
<p><strong>Full Changelog</strong>: <a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/compare/v1.18.0...v1.19.0"">https://github.com/open-telemetry/opentelemetry-go-contrib/compare/v1.18.0...v1.19.0</a></p>
<h2>Release v1.18.0/v0.43.0/v0.12.0</h2>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/blob/main/CHANGELOG.md"">go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp's changelog</a>.</em></p>
<blockquote>
<h2>[1.19.0/0.44.0/0.13.0] - 2023-09-12</h2>
<h3>Added</h3>
<ul>
<li>Add <code>gcp.gce.instance.name</code> and <code>gcp.gce.instance.hostname</code> resource attributes to <code>go.opentelemetry.io/contrib/detectors/gcp</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4263"">#4263</a>)</li>
</ul>
<h3>Changed</h3>
<ul>
<li>The semantic conventions used by <code>go.opentelemetry.io/contrib/detectors/aws/ec2</code> have been upgraded to v1.21.0. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4265"">#4265</a>)</li>
<li>The semantic conventions used by <code>go.opentelemetry.io/contrib/detectors/aws/ecs</code> have been upgraded to v1.21.0. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4265"">#4265</a>)</li>
<li>The semantic conventions used by <code>go.opentelemetry.io/contrib/detectors/aws/eks</code> have been upgraded to v1.21.0. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4265"">#4265</a>)</li>
<li>The semantic conventions used by <code>go.opentelemetry.io/contrib/detectors/aws/lambda</code> have been upgraded to v1.21.0. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4265"">#4265</a>)</li>
<li>The semantic conventions used by <code>go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-lambda-go/otellambda</code> have been upgraded to v1.21.0. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4265"">#4265</a>)
<ul>
<li>The <code>faas.execution</code> attribute is now <code>faas.invocation_id</code>.</li>
<li>The <code>faas.id</code> attribute is now <code>aws.lambda.invoked_arn</code>.</li>
</ul>
</li>
<li>The semantic conventions used by <code>go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws</code> have been upgraded to v1.21.0. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4265"">#4265</a>)</li>
<li>The <code>http.request.method</code> attribute will only allow known HTTP methods from the metrics generated by <code>go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4277"">#4277</a>)</li>
</ul>
<h3>Removed</h3>
<ul>
<li>The high cardinality attributes <code>net.sock.peer.addr</code>, <code>net.sock.peer.port</code>, <code>http.user_agent</code>, <code>enduser.id</code>, and <code>http.client_ip</code> were removed from the metrics generated by <code>go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4277"">#4277</a>)</li>
<li>The deprecated <code>go.opentelemetry.io/contrib/instrumentation/github.com/astaxie/beego/otelbeego</code> module is removed. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4295"">#4295</a>)</li>
<li>The deprecated <code>go.opentelemetry.io/contrib/instrumentation/github.com/go-kit/kit/otelkit</code> module is removed. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4295"">#4295</a>)</li>
<li>The deprecated <code>go.opentelemetry.io/contrib/instrumentation/github.com/Shopify/sarama/otelsarama</code> module is removed. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4295"">#4295</a>)</li>
<li>The deprecated <code>go.opentelemetry.io/contrib/instrumentation/github.com/bradfitz/gomemcache/memcache/otelmemcache</code> module is removed. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4295"">#4295</a>)</li>
<li>The deprecated <code>go.opentelemetry.io/contrib/instrumentation/github.com/gocql/gocql/otelgocql</code> module is removed. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4295"">#4295</a>)</li>
</ul>
<h2>[1.18.0/0.43.0/0.12.0] - 2023-08-28</h2>
<h3>Added</h3>
<ul>
<li>Add <code>NewMiddleware</code> function in <code>go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/2964"">#2964</a>)</li>
<li>The <code>go.opentelemetry.io/contrib/exporters/autoexport</code> package to provide configuration of trace exporters with useful defaults and environment variable support. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/2753"">#2753</a>, <a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4100"">#4100</a>, <a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4130"">#4130</a>, <a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4132"">#4132</a>, <a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4134"">#4134</a>)</li>
<li><code>WithRouteTag</code> in <code>go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp</code> adds HTTP route attribute to metrics. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/615"">#615</a>)</li>
<li>Add <code>WithSpanOptions</code> option in <code>go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/3768"">#3768</a>)</li>
<li>Add testing support for Go 1.21. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4233"">#4233</a>)</li>
<li>Add <code>WithFilter</code> option to <code>go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4230"">#4230</a>)</li>
</ul>
<h3>Changed</h3>
<ul>
<li>Change interceptors in <code>go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc</code> to disable <code>SENT</code>/<code>RECEIVED</code> events.
Use <code>WithMessageEvents()</code> to turn back on. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/3964"">#3964</a>)</li>
</ul>
<h3>Changed</h3>
<ul>
<li><code>go.opentelemetry.io/contrib/detectors/gcp</code>: Detect <code>faas.instance</code> instead of <code>faas.id</code>, since <code>faas.id</code> is being removed. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4198"">#4198</a>)</li>
</ul>
<h3>Fixed</h3>
<ul>
<li>AWS XRay Remote Sampling to cap <code>quotaBalance</code> to 1x quota in <code>go.opentelemetry.io/contrib/samplers/aws/xray</code>. (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/3651"">#3651</a>, <a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/3652"">#3652</a>)</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/commit/fdfa6e3abf03caa6a1d3267913e01526d97eab8a""><code>fdfa6e3</code></a> Release v1.19.0/v0.44.0/v0.13.0 (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4299"">#4299</a>)</li>
<li><a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/commit/aea75409c71c7c8f5d052692101efb83c4bc70b3""><code>aea7540</code></a> build(deps): bump github.com/aws/aws-sdk-go in /detectors/aws/ec2 (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4297"">#4297</a>)</li>
<li><a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/commit/7e88614696505c07b3760dfb44900211d964bbb3""><code>7e88614</code></a> Remove otelbeego, otelkit, otelsarama, otelmemcache, otelgocql (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4295"">#4295</a>)</li>
<li><a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/commit/14f153ea4a171cf884f44e22fcd360805cfce1e5""><code>14f153e</code></a> build(deps): bump actions/checkout from 3 to 4 (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4291"">#4291</a>)</li>
<li><a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/commit/01c596d0e85e2bdc7cd1118c4d9ce96d8bc74209""><code>01c596d</code></a> dependabot updates Mon Sep 11 05:08:50 UTC 2023 (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4294"">#4294</a>)</li>
<li><a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/commit/50ca48f8017e04bcf9149a5435e7f8f96f9e83c9""><code>50ca48f</code></a> Remove high cardanility metrics from otelhttp (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4277"">#4277</a>)</li>
<li><a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/commit/b6fc62f4da6f50864e04b800d5ef3326efe76617""><code>b6fc62f</code></a> Update go versions used in workflow (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4278"">#4278</a>)</li>
<li><a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/commit/7a8f53c61142607be68515339785f3db1a9e8310""><code>7a8f53c</code></a> Add new gcp host attributes (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4263"">#4263</a>)</li>
<li><a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/commit/aab5f49a93341323e85fa1c07fd03b4e322e980d""><code>aab5f49</code></a> [mux] Add request filters like otelhttp (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4230"">#4230</a>)</li>
<li><a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/commit/3ad5a2c545431824f851c62be1c9253a59427c07""><code>3ad5a2c</code></a> Deprecate otelmemcache, otelgocql (<a href=""https://redirect.github.com/open-telemetry/opentelemetry-go-contrib/issues/4164"">#4164</a>)</li>
<li>Additional commits viewable in <a href=""https://github.com/open-telemetry/opentelemetry-go-contrib/compare/zpages/v0.42.0...zpages/v0.44.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp&package-manager=go_modules&previous-version=0.42.0&new-version=0.44.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/661,"{'number': 661, 'state': 'closed', 'merged': False, 'created_at': '2023-10-16T14:17:10Z', 'merged_at': '2023-10-16T16:11:30Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_659,2023-10-13T18:45:14Z,Ensure timer is stopped properly.\n\n,6a363381c5596ca8,https://github.com/ServiceWeaver/weaver/pull/659,"{'number': 659, 'state': 'closed', 'merged': False, 'created_at': '2023-10-13T18:45:14Z', 'merged_at': '2023-10-16T16:12:58Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_657,2023-10-11T23:02:04Z,"Bump golang.org/x/net from 0.12.0 to 0.17.0\n\nBumps [golang.org/x/net](https://github.com/golang/net) from 0.12.0 to 0.17.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/golang/net/commit/b225e7ca6dde1ef5a5ae5ce922861bda011cfabd""><code>b225e7c</code></a> http2: limit maximum handler goroutines to MaxConcurrentStreams</li>
<li><a href=""https://github.com/golang/net/commit/88194ad8ab44a02ea952c169883c3f57db6cf9f4""><code>88194ad</code></a> go.mod: update golang.org/x dependencies</li>
<li><a href=""https://github.com/golang/net/commit/2b60a61f1e4cf3a5ecded0bd7e77ea168289e6de""><code>2b60a61</code></a> quic: fix several bugs in flow control accounting</li>
<li><a href=""https://github.com/golang/net/commit/73d82efb96cacc0c378bc150b56675fc191894b9""><code>73d82ef</code></a> quic: handle DATA_BLOCKED frames</li>
<li><a href=""https://github.com/golang/net/commit/5d5a036a503f8accd748f7453c0162115187be13""><code>5d5a036</code></a> quic: handle streams moving from the data queue to the meta queue</li>
<li><a href=""https://github.com/golang/net/commit/350aad2603e57013fafb1a9e2089a382fe67dc80""><code>350aad2</code></a> quic: correctly extend peer's flow control window after MAX_DATA</li>
<li><a href=""https://github.com/golang/net/commit/21814e71db756f39b69fb1a3e06350fa555a79b1""><code>21814e7</code></a> quic: validate connection id transport parameters</li>
<li><a href=""https://github.com/golang/net/commit/a600b3518eed7a9a4e24380b4b249cb986d9b64d""><code>a600b35</code></a> quic: avoid redundant MAX_DATA updates</li>
<li><a href=""https://github.com/golang/net/commit/ea633599b58dc6a50d33c7f5438edfaa8bc313df""><code>ea63359</code></a> http2: check stream body is present on read timeout</li>
<li><a href=""https://github.com/golang/net/commit/ddd8598e5694aa5e966e44573a53e895f6fa5eb2""><code>ddd8598</code></a> quic: version negotiation</li>
<li>Additional commits viewable in <a href=""https://github.com/golang/net/compare/v0.12.0...v0.17.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/net&package-manager=go_modules&previous-version=0.12.0&new-version=0.17.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/657,"{'number': 657, 'state': 'closed', 'merged': False, 'created_at': '2023-10-11T23:02:04Z', 'merged_at': '2023-10-16T16:22:52Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_656,2023-10-11T05:56:30Z,"Update GORM import to use `gorm.io/gorm` in bankofanthos.\n\n1. Change `github.com/jinzhu/gorm` (GORM v1, [which is no longer maintained in 2016.04](https://gorm.io/docs/changelog.html)) to `gorm.io/gorm` (GORM v2).
2. Optimized some of the formatted placeholder outputs.",d520c6e562c5d6f7,https://github.com/ServiceWeaver/weaver/pull/656,"{'number': 656, 'state': 'closed', 'merged': False, 'created_at': '2023-10-11T05:56:30Z', 'merged_at': '2023-10-16T16:56:16Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_655,2023-10-10T15:53:58Z,Fix comment for retry.BeginWithOptions\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/655,"{'number': 655, 'state': 'closed', 'merged': False, 'created_at': '2023-10-10T15:53:58Z', 'merged_at': '2023-10-10T18:01:24Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_653,2023-10-06T18:14:50Z,Remove usages of runtime.Deployment in weaver\n\nWe use runtime.Deployment in very few places. This PR get rid of protos.Deployment usages in the weaver repo.,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/653,"{'number': 653, 'state': 'closed', 'merged': False, 'created_at': '2023-10-06T18:14:50Z', 'merged_at': '2023-10-06T19:33:18Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_652,2023-10-06T16:56:42Z,[DOCS] Minor edits to to tutorial for clarity\n\nClarifies commands that the user needs to run in the step by step tutorial.,f835bdae79523b31,https://github.com/ServiceWeaver/weaver/pull/652,"{'number': 652, 'state': 'closed', 'merged': False, 'created_at': '2023-10-06T16:56:42Z', 'merged_at': '2023-10-06T19:25:20Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_651,2023-10-05T17:49:08Z,"Added low-level mechanism to run weaver apps.\n\nThis PR introduces a new low-level mechanism, `run.Run`, to run a weavelet when the topology of the application (e.g., the address of every listener and component) is static and predetermined.

To draw an analogy, git distinguishes between [plumbing and porcelain][git]. Plumbing commands are complicated low-level commands. Porcelain commands are simple, high-level commands that are built on top of plumbing commands. Most users use porcelain commands most (or all) of the time, but plumbing commands exist to make more complex git operations possible (though not necessarily convenient).

For Service Weaver, `weaver single`, `weaver multi`, `weaver ssh`, `weaver kube`, and `weaver gke` are porcelain commands. We don't offer any plumbing commands, besides writing a deployer completely from scratch. This PR aims to introduce a generally useful plumbing command.

## Motivation

Here's our vision for how this PR will be useful. The details are not final, but I want to share something concrete to motivate the PR. We'll add a user-facing plumbing command on top of the `run` package, let's say `weaver run`. `weaver run` will take a topology file describing the topology of the application, say `topo.toml`:

```toml
deployment_id = ""v1""
topology = {
    ""Main"": [""localhost:9000""],
    ""Odd"": [""localhost:9001""],
    ""Even"": [""localhost:9002""],
}
groups = [
    {
        name: ""main"",
        components: [""Main""],
        listeners: {""collatz"": ""localhost:8000""},
        address: ""localhost:9000"",
    },
    {
        name: ""odd"",
        components: [""Odd""],
        address: ""localhost:9001"",
    },
    {
        name: ""even"",
        components: [""Even""],
        address: ""localhost:9002"",
    },
]
```

Then, you can run an application manually like this:

```shell
$ weaver run weaver.toml topo.toml odd  # run ""odd"" group
$ weaver run weaver.toml topo.toml even # run ""even"" group
$ weaver run weaver.toml topo.toml main # run ""main"" group
```

This command will be generally useful, but our motivating use case is to enable people to run Service Weaver applications on Kubernetes with a level of control not possible with `weaver kube`.

[git]: https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/651,"{'number': 651, 'state': 'closed', 'merged': False, 'created_at': '2023-10-05T17:49:08Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_650,2023-10-04T19:58:30Z,Remove Seattle / Austin workshops\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/650,"{'number': 650, 'state': 'closed', 'merged': False, 'created_at': '2023-10-04T19:58:30Z', 'merged_at': '2023-10-04T20:55:36Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-04. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_648,2023-10-02T21:34:54Z,update workshops registration links \n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/648,"{'number': 648, 'state': 'closed', 'merged': False, 'created_at': '2023-10-02T21:34:54Z', 'merged_at': '2023-10-02T21:39:41Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-02. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_647,2023-10-01T17:35:01Z,"Controlling application logging verbosity\n\nThis PR introduces the ability to set the application logging verbosity by a configurable value, like in the example bellow:
```
[serviceweaver]
log_level = debug
...
```
",32205b0053c46c59,https://github.com/ServiceWeaver/weaver/pull/647,"{'number': 647, 'state': 'closed', 'merged': False, 'created_at': '2023-10-01T17:35:01Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-10-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_646,2023-09-28T21:43:07Z,"Move Local GKE under the GKE deployer\n\nLocal GKE is a version of the GKE deployer that allows you to emulate running applications in GKE, but on the local machine.

Local GKE is useful:
* for the Service Weaver team to quickly iterate over the GKE deployer (e.g., debugging, new functionalities)
* for a user that wants to use the GKE deployer but wants to see how it works when running on the local machine.

Given that the local GKE deployer makes sense only in correlation with the GKE deployer, it makes more sense to add it under the GKE deployer in our documentation instead of a standalone deployer.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/646,"{'number': 646, 'state': 'closed', 'merged': False, 'created_at': '2023-09-28T21:43:07Z', 'merged_at': '2023-09-28T23:58:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_645,2023-09-27T20:32:04Z,"Added instructions to run chat app on Kubernetes.\n\nThis PR adds instructions on how to run the chat app on a Kubernetes cluster using the `weaver kube` deployer. The main challenge is running MySQL in the Kubernetes cluster. It is quite a bit more involved than running MySQL locally using Docker. You have to write about 100 lines of Kubernetes YAML, which isn't rocket science, but it also isn't the most pleasant experience.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/645,"{'number': 645, 'state': 'closed', 'merged': False, 'created_at': '2023-09-27T20:32:04Z', 'merged_at': '2023-09-28T22:25:17Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_644,2023-09-27T18:19:42Z,"Avoid 'weaver multi' zombie main components.\n\nRecall that when you run `weaver multi deploy`, you start a `weaver multi deploy` process that runs a bunch of remote weavelets in subprocesses. The weavelets communicate with the `weaver multi deploy` process over a set of pipes. Here's an example of what `top` shows when deploying the collatz app:

```
-bash
 └─ cmd/weaver/weaver multi deploy weaver.toml
    ├─ examples/collatz/collatz
    ├─ examples/collatz/collatz
    ├─ examples/collatz/collatz
    ├─ examples/collatz/collatz
    ├─ examples/collatz/collatz
    └─ examples/collatz/collatz
```

If you `kill` the `weaver multi deploy` process, it doesn't kill the child weavelet processes, at least not directly. However, killing the `weaver multi deploy` process closes the pipes to the weavelets. This should cause the weavelet processes to exit.

This was working correctly for all weavelets not running the main component. weavelets running the main component blocked on the user provided lambda. If this lambda did something like run an HTTP server, then the process wouldn't exit, even if the underlying weavelet was broken. This led to a bunch of zombie processes lingering around forever.

This PR fixes the bug by exiting whenever the weavelet encounters a broken pipe.

Also note that `examples/examples_test.go` runs into this zombie behavior. So, if you've been running `./dev/build_and_test.sh`, you might to run `ps aux | grep weaver` to see if you have a bunch of zombies.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/644,"{'number': 644, 'state': 'closed', 'merged': False, 'created_at': '2023-09-27T18:19:42Z', 'merged_at': '2023-09-28T21:37:37Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_643,2023-09-27T17:12:32Z,Add signal handler cleanup registration.\n\nSupport registering functions that are called when a signal that will terminate the process is received. Use this facility to remove temporary directory and registry entry when a multi deployer application is interrupted.,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/643,"{'number': 643, 'state': 'closed', 'merged': False, 'created_at': '2023-09-27T17:12:32Z', 'merged_at': '2023-09-27T17:29:39Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_642,2023-09-25T20:02:49Z,"Add DFS utilities to the graph library.\n\nTaken from an internal library written by ghemawat@.

These utilities will be used by various Service Weaver deployers.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/642,"{'number': 642, 'state': 'closed', 'merged': False, 'created_at': '2023-09-25T20:02:49Z', 'merged_at': '2023-09-25T21:17:58Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_641,2023-09-25T18:14:08Z,"Use docker containers to test the chat app.\n\nRecall that the chat app implements a simple online messaging forum. It persists chat threads in a database. Before this PR, the chat app used MySQL for production deployments and used SQLite for local deployments and tests.

This PR removes the use of SQLite and instead always uses MySQL, even locally and in tests. This has two advantages:

1. Running the same database in production and in tests helps discover more bugs. In fact, in this PR, I found a bug in the code by running MySQL in tests.
2. It's not always possible to run an app against SQLite. An app might rely on features SQLite does not offer, for example.

Always using MySQL does have some downsides. Launching a docker container for every test is slow. The chat tests now take 24 seconds. Most of this time comes from spinning up MySQL, not from launching the actual container. We could put in some effort to re-use a MySQL instance across multiple tests, though it would complicate things.

Overall, I think faking is still very important. `chat/server_test.go` uses a `sqlStore` fake, for example. I think this will be especially necessary for simulation testing.

## Details

- To run MySQL in tests, we leverage [testcontainers][], a Go module that makes it easy to run containers in tests.
- I renamed the chat database from `serviceweaver_chat_example` to just `chat`.
- I fixed a bug in `sqlStore` where posts were not being ordered correctly.

[testcontainers]: https://testcontainers.com/",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/641,"{'number': 641, 'state': 'closed', 'merged': False, 'created_at': '2023-09-25T18:14:08Z', 'merged_at': '2023-09-28T22:01:16Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_639,2023-09-21T23:56:00Z,"Added local MySQL instructions for chat app.\n\nThis PR adds some instructions on how to run a MySQL instance locally using Docker for the example `chat` application. This is part of a larger effort to understand how hard it is for people to run their own databases locally.

In a future PR, I will explore how we can run MySQL instances for unit tests. [dockertest][] and [testcontainers] seem to be popular choices. After that, I will likely remove our use of sqlite entirely.

[dockertest]: https://github.com/ory/dockertest
[testcontainers]: https://testcontainers.com/",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/639,"{'number': 639, 'state': 'closed', 'merged': False, 'created_at': '2023-09-21T23:56:00Z', 'merged_at': '2023-09-22T18:07:04Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_638,2023-09-21T22:53:17Z,"Add a graph library and use it to represent the component call-graph.\n\nThis graph library is based on an earlier C++ implementation by ghemawat@.

The binary package now returns a component call-graph, as opposed to returning a set of component edges. This fixes the following bug we ran into multiple times:
  * The program contains only the `weaver.Main` component.
  * The set of component edges is therefore empty.
  * The deployer iterates over the edges, and ends up ignoring `weaver.Main` component.

The graph package will be handy in the future, as we plan to perform a Topo-sort traversal of the graph when generating Kubernetes YAML files. Also, the package may be useful for detecting component-graph cycles.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/638,"{'number': 638, 'state': 'closed', 'merged': False, 'created_at': '2023-09-21T22:53:17Z', 'merged_at': '2023-09-22T17:22:33Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_637,2023-09-21T22:03:42Z,Move internal helper code to a runtime package.\n\nMoved helper code needed for implementing deployers from the internal call package to runtime/deployers. This will make the code usable from non-built-on deployers like weaver-gke.,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/637,"{'number': 637, 'state': 'closed', 'merged': False, 'created_at': '2023-09-21T22:03:42Z', 'merged_at': '2023-09-21T22:29:28Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_636,2023-09-21T18:11:28Z,Added more generators to simulator.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/636,"{'number': 636, 'state': 'closed', 'merged': False, 'created_at': '2023-09-21T18:11:28Z', 'merged_at': '2023-09-22T18:00:41Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_635,2023-09-20T23:38:32Z,"Run more than one replica in the simulator.\n\nExecutions with more than one replica of each component are harder to reason about, but some bugs may only trigger when there are more than one replica. This PR changes the simulator to sometimes run 2 or 3 replicas of every component.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/635,"{'number': 635, 'state': 'closed', 'merged': False, 'created_at': '2023-09-20T23:38:32Z', 'merged_at': '2023-09-22T17:16:50Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_634,2023-09-20T20:59:15Z,net/call now picks appropriate default for options.\n\nPreviously callers of call.Serve and call.Connect were responsible for picking appropriate tuning parameter values. We now let the callers provide zero values and let the call implementation pick the right value.,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/634,"{'number': 634, 'state': 'closed', 'merged': False, 'created_at': '2023-09-20T20:59:15Z', 'merged_at': '2023-09-20T23:00:59Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_633,2023-09-20T20:53:47Z,"Detect bad context propagation in simulations.\n\nAn executor embeds trace and span ids in the contexts passed to a workload. The workload is responsible for propagating these contexts throughout the workload. If a context is not propagated, then an executor cannot tell which op a given call is part of. This makes it impossible for the executor to schedule things correctly. Plus, the reported history will be missing tracing information, making it much harder to understand what happened.

This PR detects and panics when contexts are not being propagated properly. I think with enough effort, we could modify the executor to gracefully handle missing trace information, but I'll leave that for future work.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/633,"{'number': 633, 'state': 'closed', 'merged': False, 'created_at': '2023-09-20T20:53:47Z', 'merged_at': '2023-09-22T16:49:58Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_631,2023-09-20T19:48:35Z,"Catch panics in simulations.\n\nThis PR extends the simulator to catch any panics that happen during an execution and abort the execution. By catching panics, the simulator is able to show the user the history of events that led to the panic.

This PR also fixes a minor bug. Previously, we recorded the history for aborted events. With this PR, once an execution is aborted, no other events are recorded.

I also renamed some unit tests to be more descriptive.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/631,"{'number': 631, 'state': 'closed', 'merged': False, 'created_at': '2023-09-20T19:48:35Z', 'merged_at': '2023-09-22T16:36:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_630,2023-09-20T16:43:32Z,"Use component method calls for multi deployer logging.\n\nWe plan to make it easier to create deployers by providing pluggable system facilities (logging for example). We will achieve this by using component method calls to communicate between a weavelet and its envelope.

This change starts us on this path by adding a logging component and changing the multi deployer to collect log entries via method calls made by the weavelet:

1. The weavelet contains a Logger component that logs to stderr.
2. The multi deployer has a different component multiLogger that has the same set of methods as the Logger component, but writes log entries to the multi deployer's database.
3. This multiLogger component is made available over a unix domain socket.
4. The multi deployer passes configuration information to the weavelet asking it to redirect calls made to the Logger component to the multiLogger component.
5. The weavelet calls a Logger method to write log entries (though for the benefit of other deployers, it falls back to using the envelope pipe protocol if a Logger redirect is not available).

Other related improvements
--------------------------

The multi deplopyer could previously lose log messages since the process could exit before the log messages written to the logs database could be read and printed to stderr. We now write log messages to stderr as soon as they arrive instead of routing them through the logs database.

Other Details
-------------
* Fix generator so it can handle components defined in the weaver package.
* multi deployer creates a temporary directory and a unix domain socket inside it.
* The Logger component method accepts a batch of log entries, which should help efficiency when the rate of logging is high.
* Fixed comment with outdated example of logging output.
* Added a list of redirects to `EnvelopeInfo` proto.

Added helpers
-------------
* `call.NewHandlerMap()` provides a single place to register ready method.
* `FixedListener` provides a call.Listener that serves a fixed set of components that are not subject to any communication graph constraints.
* `reflection.ComponentName[T]` returns the name of component T.
* `codegen.Find` returns registration by name.
* `dirs.NewTempDir` makes a provate temporary directory.
* `logger.IsSystemGenerated` determines whether a log entry is system generated.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/630,"{'number': 630, 'state': 'closed', 'merged': False, 'created_at': '2023-09-20T16:43:32Z', 'merged_at': '2023-09-21T16:40:55Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_629,2023-09-20T07:00:11Z,"Added ""weaver upgrade"" command.\n\nThis PR introduces the `weaver upgrade` command to easily upgrade `weaver` and related deployer tools. Note that `weaver upgrade` will run `go install ...@latest `(upgrades to the **latest** version by default) and only upgrades detected installed deployer tools (limited to `weaver-gke`, `weaver-gke-local`, `weaver-kube`).

# Example
```bash
$ weaver upgrade
go install github.com/ServiceWeaver/weaver/cmd/weaver@latest
go: downloading github.com/ServiceWeaver/weaver v0.21.2
go install github.com/ServiceWeaver/weaver-kube/cmd/weaver-kube@latest
go: downloading github.com/ServiceWeaver/weaver-kube v0.21.2
go: downloading go.opentelemetry.io/otel/exporters/jaeger v1.16.0
go: downloading k8s.io/api v0.27.4
go: downloading k8s.io/apimachinery v0.27.4
go: downloading k8s.io/client-go v0.27.4
go: downloading google.golang.org/genproto v0.0.0-20230306155012-7f2fa6fef1f4
go: downloading k8s.io/klog/v2 v2.90.1
go: downloading k8s.io/utils v0.0.0-20230220204549-a5ecb0141aa5
go: downloading golang.org/x/net v0.12.0
go: downloading github.com/google/gnostic v0.5.7-v3refs
go: downloading golang.org/x/time v0.0.0-20220210224613-90d013bbcef8
go: downloading golang.org/x/oauth2 v0.0.0-20220223155221-ee480838109b
go: downloading k8s.io/kube-openapi v0.0.0-20230501164219-8b0f38b5fd1f
go: downloading github.com/go-openapi/jsonreference v0.20.1
$ weaver upgrade
go install github.com/ServiceWeaver/weaver/cmd/weaver@latest
go install github.com/ServiceWeaver/weaver-kube/cmd/weaver-kube@latest
```",d520c6e562c5d6f7,https://github.com/ServiceWeaver/weaver/pull/629,"{'number': 629, 'state': 'closed', 'merged': False, 'created_at': '2023-09-20T07:00:11Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_628,2023-09-20T06:38:24Z,"Added ""weaver upgrade"" command.\n\nThis PR introduces the `weaver upgrade` command to easily upgrade `weaver` and related deployer tools. Note that `weaver upgrade` will run `go install ...@latest `(upgrades to the **latest** version by default) and only upgrades detected installed deployer tools (limited to `weaver-gke`, `weaver-gke-local`, `weaver-kube`).

# Example
```bash
$ weaver upgrade
go install github.com/ServiceWeaver/weaver/cmd/weaver@latest
go: downloading github.com/ServiceWeaver/weaver v0.21.2
go install github.com/ServiceWeaver/weaver-kube/cmd/weaver-kube@latest
go: downloading github.com/ServiceWeaver/weaver-kube v0.21.2
go: downloading go.opentelemetry.io/otel/exporters/jaeger v1.16.0
go: downloading k8s.io/api v0.27.4
go: downloading k8s.io/apimachinery v0.27.4
go: downloading k8s.io/client-go v0.27.4
go: downloading google.golang.org/genproto v0.0.0-20230306155012-7f2fa6fef1f4
go: downloading k8s.io/klog/v2 v2.90.1
go: downloading k8s.io/utils v0.0.0-20230220204549-a5ecb0141aa5
go: downloading golang.org/x/net v0.12.0
go: downloading github.com/google/gnostic v0.5.7-v3refs
go: downloading golang.org/x/time v0.0.0-20220210224613-90d013bbcef8
go: downloading golang.org/x/oauth2 v0.0.0-20220223155221-ee480838109b
go: downloading k8s.io/kube-openapi v0.0.0-20230501164219-8b0f38b5fd1f
go: downloading github.com/go-openapi/jsonreference v0.20.1
$ weaver upgrade
go install github.com/ServiceWeaver/weaver/cmd/weaver@latest
go install github.com/ServiceWeaver/weaver-kube/cmd/weaver-kube@latest
```",d520c6e562c5d6f7,https://github.com/ServiceWeaver/weaver/pull/628,"{'number': 628, 'state': 'closed', 'merged': False, 'created_at': '2023-09-20T06:38:24Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_627,2023-09-20T00:05:01Z,"Added test that shows importance of minimization.\n\nI've been playing around with various workloads and found an append-only string workload to be quite interesting. It emphasizes the importance of the following things:

1. Simulator speed is important. For rarely occurring bugs, the simulator being 100x slower can mean the difference between finding the bug overnight and not finding the bug in a month.
2. Test case minimization is more important for rarer bugs, as they are likely to arise in longer executions with irrelevant ops.
3. At any point in time, the search algorithm should give every possible execution a non-zero change of being run. Currently, we increase the number of ops per execution over time, but this means that if a bug only arises from an execution with few ops, we may never find it.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/627,"{'number': 627, 'state': 'closed', 'merged': False, 'created_at': '2023-09-20T00:05:01Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_626,2023-09-19T23:44:58Z,"Added some basic built-in generators to simulator.\n\nThis PR adds three built-in generators to the simulator. I'll add more in future PRs, but these three seemed like no-brainers. I'm open to alternative name suggestions too!",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/626,"{'number': 626, 'state': 'closed', 'merged': False, 'created_at': '2023-09-19T23:44:58Z', 'merged_at': '2023-09-22T16:19:44Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_624,2023-09-19T16:47:03Z,"Fix the website URL for the online boutique example.\n\nWe moved the Online Boutique code to a different repo, and the link has been broken ever since.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/624,"{'number': 624, 'state': 'closed', 'merged': False, 'created_at': '2023-09-19T16:47:03Z', 'merged_at': '2023-09-19T16:52:09Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_623,2023-09-19T01:25:07Z,"Fix how graveyard entries are written, replayed.\n\nBefore this PR, the hyperparameters of every failing execution were written to the graveyard. Moreover, a simulator would re-run these graveyard entries in parallel, alongside new executions. This lead to a poor user experience where two things would happen:

1. You would sometimes generate hundreds of graveyard entries from a single test. At first, I thought it was best to capture every single failing input. Later, I realized that if hundreds of tests are failing at once, it's not hard to fail the test, so saving every failing input isn't needed.
2. Every time you ran `go test`, you'd get a different failing execution. This is very frustrating, borderline unusable.

This PR fixes how graveyard entries are written and replayed. First, only the failing execution reported to the user is saved to the graveyard. Second, graveyard entries are replayed serially. This means that the user sees the same error every time they run `go test`.

Alongside these fixes, I also did some refactoring to reduce some duplicated code that got even more duplicated when adding the new graveyard logic.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/623,"{'number': 623, 'state': 'closed', 'merged': False, 'created_at': '2023-09-19T01:25:07Z', 'merged_at': '2023-09-19T23:36:38Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_622,2023-09-18T22:03:35Z,"Use the Go BuildInfo to read the tool and application module versions.\n\nThis remove the manual module version tracking (in the version.go file), which will hopefully lead to fewer versioning errors and allow us to track the version information at a finer granularity.

Note that the tool and the application module versions aren't ever directly compared: their values are only used for nicer error-message generation.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/622,"{'number': 622, 'state': 'closed', 'merged': False, 'created_at': '2023-09-18T22:03:35Z', 'merged_at': '2023-09-18T22:34:24Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_621,2023-09-18T21:57:09Z,Add GopherCon and Devoxx Morocco news.\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/621,"{'number': 621, 'state': 'closed', 'merged': False, 'created_at': '2023-09-18T21:57:09Z', 'merged_at': '2023-09-18T22:06:23Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_620,2023-09-18T21:45:48Z,"Periodically print simulator progress.\n\nWith this PR, a simulator periodically prints out its progress, just like with Go's fuzz testing. This is important to make sure the user knows the simulation isn't stuck.

```
$ go test -run=Passing/NoCallsNoGen -v
=== RUN   TestPassingSimulations
=== RUN   TestPassingSimulations/NoCallsNoGen
    simulator.go:390: Simulating *sim.noCallsNoGenWorkload for 10s with 1280 executors...
    simulator.go:405: [1s] 60,520 execs (60,064 execs/s), 4,207,853 ops (4,176,166 ops/s)
    simulator.go:405: [2s] 91,122 execs (45,390 execs/s), 9,494,404 ops (4,729,368 ops/s)
    simulator.go:405: [3s] 116,070 execs (38,594 execs/s), 15,377,846 ops (5,113,218 ops/s)
    simulator.go:405: [4s] 136,944 execs (34,175 execs/s), 21,386,940 ops (5,337,185 ops/s)
    simulator.go:405: [5s] 155,343 execs (31,024 execs/s), 27,506,001 ops (5,493,331 ops/s)
    simulator.go:405: [6s] 172,306 execs (28,681 execs/s), 33,831,171 ops (5,631,418 ops/s)
    simulator.go:405: [7s] 187,752 execs (26,794 execs/s), 40,157,529 ops (5,730,931 ops/s)
    simulator.go:405: [8s] 201,803 execs (25,203 execs/s), 46,384,348 ops (5,792,803 ops/s)
    simulator.go:405: [9s] 215,544 execs (23,930 execs/s), 52,909,102 ops (5,874,082 ops/s)
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/620,"{'number': 620, 'state': 'closed', 'merged': False, 'created_at': '2023-09-18T21:45:48Z', 'merged_at': '2023-09-19T01:23:42Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_619,2023-09-18T20:56:32Z,"Made simulator parallelism adjustable.\n\nThis PR adds a `Parallelism` option to the simulator that allows someone to tweak the number of parallel executions. This value has a big impact on simulation throughput, and there's not a universally good value. In the future, we could adjust the degree of parallelism as the simulation runs, but that's complicated.

I also settled on a default parallelism of `10 * runtime.NumCPU`. My intuition was that `runtime.NumCPU` would have led to max throughput, but running some benchmarks, it seems like simulations benefit from much higher parallelism. I don't fully understand why that is.

Here are benchmark numbers on my machine where `runtime.NumCPU` is 128.

| Parallelism | NoCallsNoGens ops/s | NoCalls ops/s | OneCall ops/s |
| ----------- | ------------------- | ------------- | ------------- |
| 1           | 166k ± 1%           | 156k ± 1%     | 57.5k ± 1%    |
| 2           | 303k ± 3%           | 296k ± 0%     | 107k ± 1%     |
| 5           | 649k ± 2%           | 623k ± 1%     | 223k ± 4%     |
| 10          | 1.14M ± 0%          | 1.09M ± 1%    | 438k ± 0%     |
| 32          | 1.63M ± 9%          | 2.22M ± 0%    | 602k ± 2%     |
| 64          | 1.78M ±27%          | 2.01M ± 1%    | 523k ± 2%     |
| 128         | 1.88M ± 1%          | 1.68M ± 3%    | 565k ± 7%     |
| 256         | 1.99M ± 4%          | 1.76M ± 4%    | 686k ± 4%     |
| 384         | 2.07M ± 4%          | 1.92M ± 1%    | 798k ± 3%     |
| 512         | 2.41M ± 1%          | 2.09M ± 1%    | 887k ± 1%     |
| 640         | 2.73M ± 1%          | 2.51M ± 5%    | 938k ± 3%     |
| 768         | 3.26M ± 6%          | 2.81M ± 3%    | 951k ± 2%     |
| 896         | 3.40M ± 1%          | 3.05M ± 5%    | 973k ± 1%     |
| 1024        | 3.78M ± 5%          | 3.39M ± 8%    | 1.00M ± 2%    |
| 1152        | 3.84M ± 2%          | 3.43M ± 3%    | 1.00M ± 4%    |
| 1280        | 4.06M ± 2%          | 3.60M ± 5%    | 1.03M ± 2%    |
| 1408        | 4.02M ± 3%          | 3.47M ± 1%    | 1.02M ± 5%    |
| 1536        | 4.27M ± 8%          | 3.71M ± 7%    | 1.04M ± 7%    |
| 1664        | 4.26M ± 7%          | 3.84M ±11%    | 1.06M ± 3%    |
| 1792        | 4.40M ± 2%          | 3.80M ± 2%    | 1.06M ± 1%    |
| 1920        | 4.47M ± 6%          | 3.77M ± 6%    | 1.09M ± 5%    |
| 2048        | 4.60M ± 3%          | 3.84M ± 5%    | 1.10M ± 5%    |
| 2176        | 4.49M ± 4%          | 4.05M ± 6%    | 1.10M ± 1%    |
| 2304        | 4.40M ± 4%          | 3.77M ± 2%    | 1.14M ± 3%    |
| 2432        | 4.38M ± 6%          | 3.94M ± 4%    | 1.14M ± 2%    |
| 2560        | 4.68M ± 4%          | 3.99M ± 5%    | 1.17M ± 4%    |",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/619,"{'number': 619, 'state': 'closed', 'merged': False, 'created_at': '2023-09-18T20:56:32Z', 'merged_at': '2023-09-19T01:19:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_618,2023-09-18T18:31:23Z,"Added TODO with future optimization ideas.\n\nThe simulator is now pretty fast. I added a TODO with a list of optimizations we could implement to speed things up even further, but I think the optimizations might introduce more complexity than they are currently worth.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/618,"{'number': 618, 'state': 'closed', 'merged': False, 'created_at': '2023-09-18T18:31:23Z', 'merged_at': '2023-09-19T01:15:19Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_617,2023-09-18T17:33:31Z,"Cache generator types in registrar.\n\nRecall that users call `Registrar.RegisterGenerators` to register the generators for a workload method. For every generator, a registrar has to validate that the registered generators are actually generators. Part of this validation involves calling `MethodByName` to get the generator's `Generate` method.  Through profiling, I found that calling `MethodByName` takes a non-trivial amount of time.

This PR optimizes things by caching the types of all registered generators and their `Generate` methods after the first time they are validated. In subsequent executions, we only have to check that the registered generator has the same type as before. We don't have to call `MethodByName` more than once.

```
$ go test -run=$^ -bench=""(NewWorkload|ResetExecutor|Executions)"" -count=5 | tee /tmp/baseline.txt
$ go test -run=$^ -bench=""(NewWorkload|ResetExecutor|Executions)"" -count=5 | tee /tmp/experiment.txt
$ benchstat /tmp/{baseline,experiment}.txt
name                                 old time/op    new time/op    delta
NewWorkload/NoCallsNoGen-128            458ns ± 1%     455ns ± 1%     ~     (p=0.310 n=5+5)
NewWorkload/NoCalls-128                1.68µs ± 1%    0.88µs ± 2%  -47.68%  (p=0.008 n=5+5)
NewWorkload/OneCall-128                1.74µs ± 2%    0.93µs ± 1%  -46.59%  (p=0.008 n=5+5)
ResetExecutor/NoCallsNoGen-128         3.88µs ± 2%    3.88µs ± 1%     ~     (p=0.841 n=5+5)
ResetExecutor/NoCalls-128              5.26µs ± 2%    4.32µs ± 1%  -17.93%  (p=0.008 n=5+5)
ResetExecutor/OneCall-128              5.47µs ± 1%    4.60µs ± 2%  -15.96%  (p=0.008 n=5+5)
Executions/NoCallsNoGen-128            11.8µs ± 2%    11.9µs ± 2%     ~     (p=0.222 n=5+5)
Executions/NoCalls-128                 14.0µs ± 2%    13.0µs ± 2%   -7.57%  (p=0.008 n=5+5)
Executions/OneCall-128                 27.5µs ± 1%    25.9µs ± 2%   -5.68%  (p=0.008 n=5+5)
ParallelExecutions/NoCallsNoGen-128    1.73µs ± 7%    1.70µs ± 6%     ~     (p=0.460 n=5+5)
ParallelExecutions/NoCalls-128         1.88µs ± 1%    1.83µs ± 1%   -2.95%  (p=0.008 n=5+5)
ParallelExecutions/OneCall-128         2.81µs ± 2%    2.67µs ± 1%   -4.97%  (p=0.008 n=5+5)

name                                 old alloc/op   new alloc/op   delta
NewWorkload/NoCallsNoGen-128            0.00B          0.00B          ~     (all equal)
NewWorkload/NoCalls-128                  264B ± 0%      144B ± 0%  -45.45%  (p=0.008 n=5+5)
NewWorkload/OneCall-128                  280B ± 0%      160B ± 0%  -42.86%  (p=0.008 n=5+5)
ResetExecutor/NoCallsNoGen-128           576B ± 0%      576B ± 0%     ~     (all equal)
ResetExecutor/NoCalls-128                840B ± 0%      720B ± 0%  -14.29%  (p=0.008 n=5+5)
ResetExecutor/OneCall-128                904B ± 0%      784B ± 0%  -13.27%  (p=0.008 n=5+5)
Executions/NoCallsNoGen-128            1.05kB ± 0%    1.05kB ± 0%     ~     (all equal)
Executions/NoCalls-128                 1.39kB ± 0%    1.27kB ± 0%   -8.71%  (p=0.000 n=5+4)
Executions/OneCall-128                 2.74kB ± 0%    2.62kB ± 0%   -4.43%  (p=0.000 n=4+5)
ParallelExecutions/NoCallsNoGen-128    1.05kB ± 0%    1.05kB ± 0%     ~     (all equal)
ParallelExecutions/NoCalls-128         1.39kB ± 0%    1.27kB ± 0%   -8.64%  (p=0.008 n=5+5)
ParallelExecutions/OneCall-128         2.73kB ± 0%    2.61kB ± 0%     ~     (p=0.079 n=4+5)

name                                 old allocs/op  new allocs/op  delta
NewWorkload/NoCallsNoGen-128             0.00           0.00          ~     (all equal)
NewWorkload/NoCalls-128                  6.00 ± 0%      2.00 ± 0%  -66.67%  (p=0.008 n=5+5)
NewWorkload/OneCall-128                  7.00 ± 0%      3.00 ± 0%  -57.14%  (p=0.008 n=5+5)
ResetExecutor/NoCallsNoGen-128           19.0 ± 0%      19.0 ± 0%     ~     (all equal)
ResetExecutor/NoCalls-128                25.0 ± 0%      21.0 ± 0%  -16.00%  (p=0.008 n=5+5)
ResetExecutor/OneCall-128                27.0 ± 0%      23.0 ± 0%  -14.81%  (p=0.008 n=5+5)
Executions/NoCallsNoGen-128              33.0 ± 0%      33.0 ± 0%     ~     (all equal)
Executions/NoCalls-128                   43.0 ± 0%      39.0 ± 0%   -9.30%  (p=0.008 n=5+5)
Executions/OneCall-128                   77.0 ± 0%      73.0 ± 0%   -5.19%  (p=0.008 n=5+5)
ParallelExecutions/NoCallsNoGen-128      33.0 ± 0%      33.0 ± 0%     ~     (all equal)
ParallelExecutions/NoCalls-128           43.0 ± 0%      39.0 ± 0%   -9.30%  (p=0.008 n=5+5)
ParallelExecutions/OneCall-128           77.0 ± 0%      73.0 ± 0%   -5.19%  (p=0.008 n=5+5)
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/617,"{'number': 617, 'state': 'closed', 'merged': False, 'created_at': '2023-09-18T17:33:31Z', 'merged_at': '2023-09-19T01:10:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_616,2023-09-18T16:45:24Z,Adding some upcoming workshops\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/616,"{'number': 616, 'state': 'closed', 'merged': False, 'created_at': '2023-09-18T16:45:24Z', 'merged_at': '2023-09-18T17:26:35Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_615,2023-09-18T16:26:30Z,"Allocate op arguments on stack when possible.\n\n```
$ go test -run=$^ -bench=. -count=5 | tee /tmp/baseline.txt
$ go test -run=$^ -bench=. -count=5 | tee /tmp/experiment.txt
$ benchstat /tmp/{baseline,experiment}.txt
name                                 old time/op    new time/op    delta
NewWorkload/NoCallsNoGen-128            461ns ± 1%     458ns ± 1%    ~     (p=0.151 n=5+5)
NewWorkload/NoCalls-128                1.70µs ± 2%    1.68µs ± 1%    ~     (p=0.421 n=5+5)
NewWorkload/OneCall-128                1.75µs ± 1%    1.74µs ± 2%    ~     (p=0.310 n=5+5)
ResetExecutor/NoCallsNoGen-128         3.87µs ± 2%    3.88µs ± 2%    ~     (p=0.841 n=5+5)
ResetExecutor/NoCalls-128              5.26µs ± 2%    5.26µs ± 2%    ~     (p=0.643 n=5+5)
ResetExecutor/OneCall-128              5.60µs ± 3%    5.47µs ± 1%  -2.36%  (p=0.032 n=5+5)
Executions/NoCallsNoGen-128            12.4µs ± 2%    11.8µs ± 2%  -5.12%  (p=0.008 n=5+5)
Executions/NoCalls-128                 14.8µs ± 2%    14.0µs ± 2%  -5.45%  (p=0.008 n=5+5)
Executions/OneCall-128                 28.5µs ± 1%    27.5µs ± 1%  -3.72%  (p=0.008 n=5+5)
ParallelExecutions/NoCallsNoGen-128    1.78µs ± 5%    1.73µs ± 7%    ~     (p=0.222 n=5+5)
ParallelExecutions/NoCalls-128         1.89µs ± 1%    1.88µs ± 1%    ~     (p=0.389 n=5+5)
ParallelExecutions/OneCall-128         2.80µs ± 1%    2.81µs ± 2%    ~     (p=0.730 n=5+5)

name                                 old alloc/op   new alloc/op   delta
NewWorkload/NoCallsNoGen-128            0.00B          0.00B         ~     (all equal)
NewWorkload/NoCalls-128                  264B ± 0%      264B ± 0%    ~     (all equal)
NewWorkload/OneCall-128                  280B ± 0%      280B ± 0%    ~     (all equal)
ResetExecutor/NoCallsNoGen-128           576B ± 0%      576B ± 0%    ~     (all equal)
ResetExecutor/NoCalls-128                840B ± 0%      840B ± 0%    ~     (all equal)
ResetExecutor/OneCall-128                904B ± 0%      904B ± 0%    ~     (all equal)
Executions/NoCallsNoGen-128            1.10kB ± 0%    1.05kB ± 0%  -4.38%  (p=0.008 n=5+5)
Executions/NoCalls-128                 1.47kB ± 0%    1.39kB ± 0%  -5.47%  (p=0.008 n=5+5)
Executions/OneCall-128                 2.82kB ± 0%    2.74kB ± 0%  -2.85%  (p=0.000 n=5+4)
ParallelExecutions/NoCallsNoGen-128    1.10kB ± 0%    1.05kB ± 0%  -4.38%  (p=0.008 n=5+5)
ParallelExecutions/NoCalls-128         1.47kB ± 0%    1.39kB ± 0%  -5.43%  (p=0.008 n=5+5)
ParallelExecutions/OneCall-128         2.81kB ± 0%    2.73kB ± 0%  -2.84%  (p=0.000 n=5+4)

name                                 old allocs/op  new allocs/op  delta
NewWorkload/NoCallsNoGen-128             0.00           0.00         ~     (all equal)
NewWorkload/NoCalls-128                  6.00 ± 0%      6.00 ± 0%    ~     (all equal)
NewWorkload/OneCall-128                  7.00 ± 0%      7.00 ± 0%    ~     (all equal)
ResetExecutor/NoCallsNoGen-128           19.0 ± 0%      19.0 ± 0%    ~     (all equal)
ResetExecutor/NoCalls-128                25.0 ± 0%      25.0 ± 0%    ~     (all equal)
ResetExecutor/OneCall-128                27.0 ± 0%      27.0 ± 0%    ~     (all equal)
Executions/NoCallsNoGen-128              34.0 ± 0%      33.0 ± 0%  -2.94%  (p=0.008 n=5+5)
Executions/NoCalls-128                   44.0 ± 0%      43.0 ± 0%  -2.27%  (p=0.008 n=5+5)
Executions/OneCall-128                   78.0 ± 0%      77.0 ± 0%  -1.28%  (p=0.008 n=5+5)
ParallelExecutions/NoCallsNoGen-128      34.0 ± 0%      33.0 ± 0%  -2.94%  (p=0.008 n=5+5)
ParallelExecutions/NoCalls-128           44.0 ± 0%      43.0 ± 0%  -2.27%  (p=0.008 n=5+5)
ParallelExecutions/OneCall-128           78.0 ± 0%      77.0 ± 0%  -1.28%  (p=0.008 n=5+5)
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/615,"{'number': 615, 'state': 'closed', 'merged': False, 'created_at': '2023-09-18T16:26:30Z', 'merged_at': '2023-09-19T01:05:51Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_614,2023-09-15T22:53:06Z,Various simulator cleanups.\n\n**Review this PR commit-by-commit for legible diffs.**,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/614,"{'number': 614, 'state': 'closed', 'merged': False, 'created_at': '2023-09-15T22:53:06Z', 'merged_at': '2023-09-18T16:17:30Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_613,2023-09-14T19:37:53Z,Report ops/sec in addition to sim/sec.\n\nThis PR extends the simulator to report ops per second in addition to simulations per second. I also added a few more benchmarks.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/613,"{'number': 613, 'state': 'closed', 'merged': False, 'created_at': '2023-09-14T19:37:53Z', 'merged_at': '2023-09-15T17:41:15Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_612,2023-09-14T16:48:21Z,"Sped up simulator using wyrand PRNG.\n\nRecall that every simulation is assigned a seed and uses a pseudorandom number generator initialized with this seed as its only source of randomness. This allows simulations to be ""random"" but also replayable.

Before this PR, we were using go's builtin `rand.Source`. Peeking [under the covers][1], we see that go uses a [lagged fibonacci generator][2]. This generator maintains an array of ~600 ints. The seeding process is very slow, as every one of these ints has to be initialized. Through profiling, I found that generating `rand.Source`s was a big bottleneck, even with parallelization.

This PR replaces the builtin generator with [wyrand][3]. Unlike go's builtin generator, wyrand's state is a single uint64, making seeding trivial. I don't understand the differences between a lagged fibonacci generator and wyrand in terms of the quality of randomness they produce, but wyrand is a reputable algorithm, even [used internally by go][4].

As you can see below, switching to wyrand leads to a massive performance improvement.

```
$ go test -run=$^ -bench=. -count=5 | tee /tmp/baseline.txt
$ go test -run=$^ -bench=. -count=5 | tee /tmp/experiment.txt
$ benchstat /tmp/{baseline,experiment}.txt
name                           old time/op    new time/op    delta
NewWorkload/NoCallsNoGen-128      481ns ± 0%     482ns ± 1%     ~     (p=0.310 n=5+5)
NewWorkload/NoCalls-128          1.66µs ± 2%    1.68µs ± 1%     ~     (p=0.548 n=5+5)
NewWorkload/OneCall-128          1.75µs ± 0%    1.75µs ± 3%     ~     (p=0.595 n=5+5)
NewSimulator/NoCallsNoGen-128    22.1µs ± 1%     3.9µs ± 1%  -82.59%  (p=0.008 n=5+5)
NewSimulator/NoCalls-128         23.4µs ± 2%     5.2µs ± 2%  -77.79%  (p=0.008 n=5+5)
NewSimulator/OneCall-128         23.8µs ± 1%     5.5µs ± 1%  -76.96%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128       31.8µs ± 2%    12.3µs ± 2%  -61.21%  (p=0.008 n=5+5)
Workloads/NoCalls-128            34.3µs ± 2%    14.7µs ± 2%  -56.99%  (p=0.008 n=5+5)
Workloads/OneCall-128            47.7µs ± 1%    28.2µs ± 1%  -40.79%  (p=0.008 n=5+5)

name                           old alloc/op   new alloc/op   delta
NewWorkload/NoCallsNoGen-128      0.00B          0.00B          ~     (all equal)
NewWorkload/NoCalls-128            264B ± 0%      264B ± 0%     ~     (all equal)
NewWorkload/OneCall-128            280B ± 0%      280B ± 0%     ~     (all equal)
NewSimulator/NoCallsNoGen-128    6.00kB ± 0%    0.58kB ± 0%  -90.40%  (p=0.008 n=5+5)
NewSimulator/NoCalls-128         6.26kB ± 0%    0.84kB ± 0%  -86.59%  (p=0.008 n=5+5)
NewSimulator/OneCall-128         6.33kB ± 0%    0.90kB ± 0%  -85.71%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128       6.52kB ± 0%    1.10kB ± 0%     ~     (p=0.079 n=4+5)
Workloads/NoCalls-128            6.93kB ± 0%    1.47kB ± 0%  -78.74%  (p=0.008 n=5+5)
Workloads/OneCall-128            8.28kB ± 0%    2.82kB ± 0%  -65.94%  (p=0.008 n=5+5)

name                           old allocs/op  new allocs/op  delta
NewWorkload/NoCallsNoGen-128       0.00           0.00          ~     (all equal)
NewWorkload/NoCalls-128            6.00 ± 0%      6.00 ± 0%     ~     (all equal)
NewWorkload/OneCall-128            7.00 ± 0%      7.00 ± 0%     ~     (all equal)
NewSimulator/NoCallsNoGen-128      21.0 ± 0%      19.0 ± 0%   -9.52%  (p=0.008 n=5+5)
NewSimulator/NoCalls-128           27.0 ± 0%      25.0 ± 0%   -7.41%  (p=0.008 n=5+5)
NewSimulator/OneCall-128           29.0 ± 0%      27.0 ± 0%   -6.90%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128         36.0 ± 0%      34.0 ± 0%   -5.56%  (p=0.008 n=5+5)
Workloads/NoCalls-128              46.0 ± 0%      44.0 ± 0%   -4.35%  (p=0.008 n=5+5)
Workloads/OneCall-128              80.0 ± 0%      78.0 ± 0%   -2.50%  (p=0.008 n=5+5)
```

[1]: https://cs.opensource.google/go/go/+/refs/tags/go1.21.1:src/math/rand/rng.go
[2]: https://en.wikipedia.org/wiki/Lagged_Fibonacci_generator
[3]: https://github.com/wangyi-fudan/wyhash
[4]: https://cs.opensource.google/go/go/+/master:src/runtime/hash64.go;l=6;drc=0811559dddd89d90275ebae363c5166d3c29c29d",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/612,"{'number': 612, 'state': 'closed', 'merged': False, 'created_at': '2023-09-14T16:48:21Z', 'merged_at': '2023-09-15T17:21:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_611,2023-09-13T23:11:12Z,"Don't make registerGenerators error unless needed.\n\nThis PR avoids allocating an error inside registerGenerators unless it's used. Before, we were allocating it in all cases.

```
$ go test -run=$^ -bench=. -count=5 | tee /tmp/baseline.txt
$ go test -run=$^ -bench=. -count=5 | tee /tmp/experiment.txt
$ benchstat /tmp/{baseline,experiment}.txt
name                           old time/op    new time/op    delta
NewWorkload/NoCallsNoGen-128      482ns ± 1%     486ns ± 1%     ~     (p=0.111 n=5+5)
NewWorkload/NoCalls-128          2.25µs ± 2%    1.67µs ± 2%  -25.98%  (p=0.008 n=5+5)
NewWorkload/OneCall-128          2.32µs ± 1%    1.74µs ± 1%  -25.00%  (p=0.008 n=5+5)
NewSimulator/NoCallsNoGen-128    22.4µs ± 2%    22.1µs ± 4%     ~     (p=0.421 n=5+5)
NewSimulator/NoCalls-128         25.0µs ± 3%    23.5µs ± 1%   -5.92%  (p=0.008 n=5+5)
NewSimulator/OneCall-128         24.5µs ± 2%    23.6µs ± 2%   -3.68%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128       32.4µs ± 1%    31.6µs ± 2%   -2.44%  (p=0.016 n=5+5)
Workloads/NoCalls-128            35.1µs ± 2%    34.0µs ± 2%   -3.29%  (p=0.008 n=5+5)
Workloads/OneCall-128            49.1µs ± 1%    47.3µs ± 3%   -3.71%  (p=0.016 n=5+5)

name                           old alloc/op   new alloc/op   delta
NewWorkload/NoCallsNoGen-128      0.00B          0.00B          ~     (all equal)
NewWorkload/NoCalls-128            346B ± 0%      264B ± 0%  -23.70%  (p=0.008 n=5+5)
NewWorkload/OneCall-128            362B ± 0%      280B ± 0%  -22.65%  (p=0.008 n=5+5)
NewSimulator/NoCallsNoGen-128    6.00kB ± 0%    6.00kB ± 0%     ~     (all equal)
NewSimulator/NoCalls-128         6.39kB ± 0%    6.26kB ± 0%   -1.99%  (p=0.008 n=5+5)
NewSimulator/OneCall-128         6.46kB ± 0%    6.33kB ± 0%     ~     (p=0.079 n=4+5)
Workloads/NoCallsNoGen-128       6.52kB ± 0%    6.52kB ± 0%     ~     (all equal)
Workloads/NoCalls-128            7.02kB ± 0%    6.93kB ± 0%   -1.17%  (p=0.008 n=5+5)
Workloads/OneCall-128            8.36kB ± 0%    8.28kB ± 0%   -0.97%  (p=0.008 n=5+5)

name                           old allocs/op  new allocs/op  delta
NewWorkload/NoCallsNoGen-128       0.00           0.00          ~     (all equal)
NewWorkload/NoCalls-128            9.00 ± 0%      6.00 ± 0%  -33.33%  (p=0.008 n=5+5)
NewWorkload/OneCall-128            10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.008 n=5+5)
NewSimulator/NoCallsNoGen-128      21.0 ± 0%      21.0 ± 0%     ~     (all equal)
NewSimulator/NoCalls-128           30.0 ± 0%      27.0 ± 0%  -10.00%  (p=0.008 n=5+5)
NewSimulator/OneCall-128           32.0 ± 0%      29.0 ± 0%   -9.38%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128         36.0 ± 0%      36.0 ± 0%     ~     (all equal)
Workloads/NoCalls-128              49.0 ± 0%      46.0 ± 0%   -6.12%  (p=0.008 n=5+5)
Workloads/OneCall-128              83.0 ± 0%      80.0 ± 0%   -3.61%  (p=0.008 n=5+5)
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/611,"{'number': 611, 'state': 'closed', 'merged': False, 'created_at': '2023-09-13T23:11:12Z', 'merged_at': '2023-09-15T17:10:48Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_610,2023-09-13T22:51:43Z,"Combine pipe.Cmd's WPipe and RPipe into a single method.\n\nCalls to WPipe and RPipe are always paired, so combine them into one method. The new method returns a struct so that we get good names for the four distinct values needed for the pair of pipes.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/610,"{'number': 610, 'state': 'closed', 'merged': False, 'created_at': '2023-09-13T22:51:43Z', 'merged_at': '2023-09-14T15:37:45Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_609,2023-09-13T22:48:01Z,"Skip component init steps when possible.\n\nRecall that a simulator has to intiialize the components used by the workload. This involves filling its refs, listeners, and configs. Through profiling, I found that this was leading to a lot of allocations.

This PR takes advantage of the fact that most components won't have a listener, and some won't have refs or configs. For every component, we precompute if it has refs, configs, and listeners. Then, when initializing, we skip the work of filling a ref, config, or listener if we've precomputed it to be unnecessary.

```
$ go test -run=$^ -bench=. -count=5 | tee /tmp/baseline.txt
$ go test -run=$^ -bench=. -count=5 | tee /tmp/experiment.txt
$ benchstat /tmp/{baseline,experiment}.txt
name                           old time/op    new time/op    delta
NewWorkload/NoCallsNoGen-128      483ns ± 0%     482ns ± 1%     ~     (p=1.000 n=5+5)
NewWorkload/NoCalls-128          2.23µs ± 3%    2.25µs ± 2%     ~     (p=0.310 n=5+5)
NewWorkload/OneCall-128          2.27µs ± 2%    2.32µs ± 1%   +2.20%  (p=0.032 n=5+5)
NewSimulator/NoCallsNoGen-128    23.1µs ± 5%    22.4µs ± 2%     ~     (p=0.095 n=5+5)
NewSimulator/NoCalls-128         26.0µs ± 2%    25.0µs ± 3%   -3.69%  (p=0.016 n=5+5)
NewSimulator/OneCall-128         26.5µs ± 1%    24.5µs ± 2%   -7.47%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128       32.9µs ± 2%    32.4µs ± 1%     ~     (p=0.151 n=5+5)
Workloads/NoCalls-128            36.8µs ± 2%    35.1µs ± 2%   -4.57%  (p=0.008 n=5+5)
Workloads/OneCall-128            50.6µs ± 2%    49.1µs ± 1%   -2.88%  (p=0.008 n=5+5)

name                           old alloc/op   new alloc/op   delta
NewWorkload/NoCallsNoGen-128      0.00B          0.00B          ~     (all equal)
NewWorkload/NoCalls-128            346B ± 0%      346B ± 0%     ~     (all equal)
NewWorkload/OneCall-128            362B ± 0%      362B ± 0%     ~     (all equal)
NewSimulator/NoCallsNoGen-128    6.14kB ± 0%    6.00kB ± 0%   -2.22%  (p=0.008 n=5+5)
NewSimulator/NoCalls-128         6.53kB ± 0%    6.39kB ± 0%   -2.09%  (p=0.000 n=4+5)
NewSimulator/OneCall-128         6.59kB ± 0%    6.46kB ± 0%   -2.09%  (p=0.029 n=4+4)
Workloads/NoCallsNoGen-128       6.66kB ± 0%    6.52kB ± 0%   -2.04%  (p=0.008 n=5+5)
Workloads/NoCalls-128            7.15kB ± 0%    7.02kB ± 0%   -1.91%  (p=0.008 n=5+5)
Workloads/OneCall-128            8.50kB ± 0%    8.36kB ± 0%   -1.62%  (p=0.008 n=5+5)

name                           old allocs/op  new allocs/op  delta
NewWorkload/NoCallsNoGen-128       0.00           0.00          ~     (all equal)
NewWorkload/NoCalls-128            9.00 ± 0%      9.00 ± 0%     ~     (all equal)
NewWorkload/OneCall-128            10.0 ± 0%      10.0 ± 0%     ~     (all equal)
NewSimulator/NoCallsNoGen-128      32.0 ± 0%      21.0 ± 0%  -34.38%  (p=0.008 n=5+5)
NewSimulator/NoCalls-128           41.0 ± 0%      30.0 ± 0%  -26.83%  (p=0.008 n=5+5)
NewSimulator/OneCall-128           43.0 ± 0%      32.0 ± 0%  -25.58%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128         47.0 ± 0%      36.0 ± 0%  -23.40%  (p=0.008 n=5+5)
Workloads/NoCalls-128              60.0 ± 0%      49.0 ± 0%  -18.33%  (p=0.008 n=5+5)
Workloads/OneCall-128              94.0 ± 0%      83.0 ± 0%  -11.70%  (p=0.008 n=5+5)
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/609,"{'number': 609, 'state': 'closed', 'merged': False, 'created_at': '2023-09-13T22:48:01Z', 'merged_at': '2023-09-15T17:01:31Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_608,2023-09-13T22:47:45Z,"Re-use simulator memory to avoid allocations.\n\nRecall that a `Simulator` performs a number of simulations. Previously, for every simulation, the `Simulator` created a new `simulator`. This lead to a lot of extra allocations. This PR reduces the number of allocations by re-using a simulator across multiple simulations, re-using memory whenever possible.

The crux of the implementation is the introduction of a `simulator.reset` method that resets a `simulator` for the next simulation.

```
$ go test -run=$^ -bench=. -count=5 | tee /tmp/baseline.txt
$ go test -run=$^ -bench=. -count=5 | tee /tmp/experiment.txt
$ benchstat /tmp/{baseline,experiment}.txt
name                        old time/op    new time/op    delta
NewWorkload-128               1.29µs ± 2%    0.47µs ± 1%   -63.70%  (p=0.008 n=5+5)
NewSimulator-128              24.3µs ± 1%    23.5µs ± 1%    -3.05%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128    37.3µs ± 2%    33.0µs ± 2%   -11.44%  (p=0.008 n=5+5)
Workloads/NoCalls-128         39.6µs ± 4%    36.7µs ± 3%    -7.33%  (p=0.008 n=5+5)
Workloads/OneCall-128         55.8µs ± 3%    50.3µs ± 1%    -9.91%  (p=0.008 n=5+5)

name                        old alloc/op   new alloc/op   delta
NewWorkload-128                 464B ± 0%        0B       -100.00%  (p=0.008 n=5+5)
NewSimulator-128              7.58kB ± 0%    6.14kB ± 0%   -19.01%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128    8.15kB ± 0%    6.66kB ± 0%   -18.35%  (p=0.008 n=5+5)
Workloads/NoCalls-128         8.67kB ± 0%    7.15kB ± 0%   -17.47%  (p=0.008 n=5+5)
Workloads/OneCall-128         10.6kB ± 0%     8.5kB ± 0%   -19.90%  (p=0.008 n=5+5)

name                        old allocs/op  new allocs/op  delta
NewWorkload-128                 3.00 ± 0%      0.00       -100.00%  (p=0.008 n=5+5)
NewSimulator-128                49.0 ± 0%      32.0 ± 0%   -34.69%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128      64.0 ± 0%      47.0 ± 0%   -26.56%  (p=0.008 n=5+5)
Workloads/NoCalls-128           78.0 ± 0%      60.0 ± 0%   -23.08%  (p=0.008 n=5+5)
Workloads/OneCall-128            116 ± 0%        94 ± 0%   -18.97%  (p=0.008 n=5+5)
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/608,"{'number': 608, 'state': 'closed', 'merged': False, 'created_at': '2023-09-13T22:47:45Z', 'merged_at': '2023-09-15T16:55:47Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_607,2023-09-13T22:47:18Z,"Optimized ref filling.\n\nThis PR speeds up how we fill `weaver.Ref`s by using less reflection.

```
$ go test -run=$^ -bench=. -count=5 | tee /tmp/baseline.txt
$ go test -run=$^ -bench=. -count=5 | tee /tmp/experiment.txt
$ benchstat /tmp/{baseline,experiment}.txt
ok      github.com/ServiceWeaver/weaver/internal/sim    38.134s
name                        old time/op    new time/op    delta
NewWorkload-128               1.30µs ± 1%    1.29µs ± 2%    ~     (p=0.278 n=5+5)
NewSimulator-128              26.6µs ± 2%    24.3µs ± 1%  -8.98%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128    38.4µs ± 2%    37.3µs ± 2%    ~     (p=0.056 n=5+5)
Workloads/NoCalls-128         40.7µs ± 2%    39.6µs ± 4%    ~     (p=0.095 n=5+5)
Workloads/OneCall-128         56.6µs ± 1%    55.8µs ± 3%    ~     (p=0.310 n=5+5)

name                        old alloc/op   new alloc/op   delta
NewWorkload-128                 464B ± 0%      464B ± 0%    ~     (all equal)
NewSimulator-128              7.61kB ± 0%    7.58kB ± 0%  -0.42%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128    8.19kB ± 0%    8.15kB ± 0%  -0.39%  (p=0.008 n=5+5)
Workloads/NoCalls-128         8.70kB ± 0%    8.67kB ± 0%  -0.37%  (p=0.008 n=5+5)
Workloads/OneCall-128         10.6kB ± 0%    10.6kB ± 0%  -0.37%  (p=0.008 n=5+5)

name                        old allocs/op  new allocs/op  delta
NewWorkload-128                 3.00 ± 0%      3.00 ± 0%    ~     (all equal)
NewSimulator-128                53.0 ± 0%      49.0 ± 0%  -7.55%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128      68.0 ± 0%      64.0 ± 0%  -5.88%  (p=0.008 n=5+5)
Workloads/NoCalls-128           82.0 ± 0%      78.0 ± 0%  -4.88%  (p=0.008 n=5+5)
Workloads/OneCall-128            121 ± 0%       116 ± 0%  -4.13%  (p=0.008 n=5+5)
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/607,"{'number': 607, 'state': 'closed', 'merged': False, 'created_at': '2023-09-13T22:47:18Z', 'merged_at': '2023-09-15T16:44:02Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_606,2023-09-13T22:46:51Z,"Optimized sim config filling; avoid reflection.\n\nRecall that a simulator has to initialize a set of components. Part of this initialization involves filling in any `weaver.WithConfig`s. Previously, we used the `config.Config` function to do this, but `config.Config` is slow and allocates a lot because it heavily uses reflection. This PR replaces `config.Config` with a more optimized approach that doesn't use any reflection.

```
$ go test -run=$^ -bench=. -count=5 | tee /tmp/baseline.txt
$ go test -run=$^ -bench=. -count=5 | tee /tmp/experiment.txt
$ benchstat /tmp/{baseline,experiment}.txt
name                        old time/op    new time/op    delta
NewWorkload-128               1.30µs ± 1%    1.30µs ± 1%     ~     (p=0.690 n=5+5)
NewSimulator-128              31.6µs ± 2%    26.6µs ± 2%  -15.63%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128    40.6µs ± 4%    38.4µs ± 2%   -5.35%  (p=0.008 n=5+5)
Workloads/NoCalls-128         44.8µs ± 1%    40.7µs ± 2%   -9.11%  (p=0.008 n=5+5)
Workloads/OneCall-128         60.0µs ± 2%    56.6µs ± 1%   -5.59%  (p=0.008 n=5+5)

name                        old alloc/op   new alloc/op   delta
NewWorkload-128                 464B ± 0%      464B ± 0%     ~     (all equal)
NewSimulator-128              7.95kB ± 0%    7.61kB ± 0%   -4.33%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128    8.53kB ± 0%    8.19kB ± 0%   -4.03%  (p=0.008 n=5+5)
Workloads/NoCalls-128         9.08kB ± 0%    8.70kB ± 0%   -4.18%  (p=0.008 n=5+5)
Workloads/OneCall-128         11.0kB ± 0%    10.6kB ± 0%   -3.44%  (p=0.008 n=5+5)

name                        old allocs/op  new allocs/op  delta
NewWorkload-128                 3.00 ± 0%      3.00 ± 0%     ~     (all equal)
NewSimulator-128                70.0 ± 0%      53.0 ± 0%  -24.29%  (p=0.008 n=5+5)
Workloads/NoCallsNoGen-128      85.0 ± 0%      68.0 ± 0%  -20.00%  (p=0.008 n=5+5)
Workloads/NoCalls-128           99.0 ± 0%      82.0 ± 0%  -17.17%  (p=0.008 n=5+5)
Workloads/OneCall-128            138 ± 0%       121 ± 0%  -12.32%  (p=0.008 n=5+5)
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/606,"{'number': 606, 'state': 'closed', 'merged': False, 'created_at': '2023-09-13T22:46:51Z', 'merged_at': '2023-09-15T16:39:17Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_605,2023-09-13T22:46:16Z,"Added more simulator benchmarks.\n\nI added a couple more simulator benchmarks to get a better sense for where the slowness is coming from. It looks like creating a new simulator itself (not even simulating anything) is already quite slow. I'll continue optimizing in future PRs:

```
$ go test -run=$^ -bench=. -count=5 | tee /tmp/baseline.txt
$ benchstat /tmp/baseline.txt
name                        time/op
Call-128                     325ns ± 1%
NewSource-128               7.98µs ± 0%
NewWorkload-128             1.30µs ± 1%
NewSimulator-128            30.6µs ± 5%
Workloads/NoCallsNoGen-128  40.9µs ± 4%
Workloads/NoCalls-128       44.1µs ± 2%
Workloads/OneCall-128       57.9µs ± 4%

name                        alloc/op
Call-128                     39.6B ± 2%
NewSource-128                0.00B
NewWorkload-128               464B ± 0%
NewSimulator-128            7.95kB ± 0%
Workloads/NoCallsNoGen-128  8.53kB ± 0%
Workloads/NoCalls-128       9.08kB ± 0%
Workloads/OneCall-128       11.0kB ± 0%

name                        allocs/op
Call-128                      2.00 ± 0%
NewSource-128                 0.00
NewWorkload-128               3.00 ± 0%
NewSimulator-128              70.0 ± 0%
Workloads/NoCallsNoGen-128    85.0 ± 0%
Workloads/NoCalls-128         99.0 ± 0%
Workloads/OneCall-128          138 ± 0%
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/605,"{'number': 605, 'state': 'closed', 'merged': False, 'created_at': '2023-09-13T22:46:16Z', 'merged_at': '2023-09-15T16:24:40Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_604,2023-09-13T22:45:28Z,Optimized ops method to use precomputed methods.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/604,"{'number': 604, 'state': 'closed', 'merged': False, 'created_at': '2023-09-13T22:45:28Z', 'merged_at': '2023-09-15T16:35:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_601,2023-09-12T22:41:16Z,"Cache workload methods in simulator.\n\nThis PR implements a small optimization to cache workload methods rather than collecting the set of methods on every simulation. This doesn't matter much much compared to the other, bigger overheads. But, I'm optimizing this to get rid of some of the distracting overheads in profiles to help focus on the bigger problems.

```
$ go test -run=$^ -bench=. -count=5 | tee /tmp/baseline.txt
$ go test -run=$^ -bench=. -count=5 | tee /tmp/experiment.txt
$ benchstat /tmp/{baseline,experiment}.txt
name                        old time/op    new time/op    delta
Workloads/NoCallsNoGen-128    6.37ms ± 1%    6.34ms ± 2%    ~     (p=0.690 n=5+5)
Workloads/NoCalls-128         7.72ms ± 1%    7.84ms ± 2%    ~     (p=0.095 n=5+5)
Workloads/OneCall-128         16.7ms ± 3%    16.8ms ± 2%    ~     (p=0.841 n=5+5)

name                        old alloc/op   new alloc/op   delta
Workloads/NoCallsNoGen-128     513kB ± 0%     513kB ± 0%  -0.08%  (p=0.008 n=5+5)
Workloads/NoCalls-128          622kB ± 0%     621kB ± 0%  -0.08%  (p=0.008 n=5+5)
Workloads/OneCall-128         2.23MB ± 0%    2.22MB ± 0%    ~     (p=0.222 n=5+5)

name                        old allocs/op  new allocs/op  delta
Workloads/NoCallsNoGen-128     10.1k ± 0%     10.1k ± 0%  -0.12%  (p=0.008 n=5+5)
Workloads/NoCalls-128          14.1k ± 0%     14.1k ± 0%  -0.09%  (p=0.008 n=5+5)
Workloads/OneCall-128          45.4k ± 0%     45.4k ± 0%    ~     (p=0.222 n=5+5)
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/601,"{'number': 601, 'state': 'closed', 'merged': False, 'created_at': '2023-09-12T22:41:16Z', 'merged_at': '2023-09-15T16:18:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_600,2023-09-12T22:25:21Z,"Bump up the module version number.\n\nWe've had some backward-incompatible changes (e.g., auto-retries).",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/600,"{'number': 600, 'state': 'closed', 'merged': False, 'created_at': '2023-09-12T22:25:21Z', 'merged_at': '2023-09-12T22:41:02Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_599,2023-09-12T21:13:40Z,"Re-run graveyard entries in the simulator.\n\nRecall that when a simulator encounters a failing execution, it persists the execution's hyperparameters to a file on disk. The collection of these files is called a graveyard. This PR updates the simulator to re-run the failing executions stored in the graveyard.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/599,"{'number': 599, 'state': 'closed', 'merged': False, 'created_at': '2023-09-12T21:13:40Z', 'merged_at': '2023-09-13T16:21:51Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_598,2023-09-11T22:04:18Z,"Don't allocate slice to pick candidate steps.\n\nThis PR slightly optimizes how a simulator picks the next action to take. Before, the simulator allocated a slice of candidate steps. With this PR, we avoid allocating the slice.

```
$ go test -run=$^ -bench=. -count=5 | tee /tmp/baseline.txt
$ go test -run=$^ -bench=. -count=5 | tee /tmp/experiment.txt
$ benchstat /tmp/{baseline,experiment}.txt
name                        old time/op    new time/op    delta
Workloads/NoCallsNoGen-128    6.30ms ± 1%    6.39ms ± 2%    ~     (p=0.310 n=5+5)
Workloads/NoCalls-128         7.77ms ± 1%    7.79ms ± 2%    ~     (p=0.841 n=5+5)
Workloads/OneCall-128         17.1ms ± 3%    16.7ms ± 3%    ~     (p=0.222 n=5+5)

name                        old alloc/op   new alloc/op   delta
Workloads/NoCallsNoGen-128     513kB ± 0%     513kB ± 0%    ~     (p=0.968 n=5+5)
Workloads/NoCalls-128          622kB ± 0%     622kB ± 0%    ~     (p=1.000 n=5+5)
Workloads/OneCall-128         2.24MB ± 0%    2.22MB ± 0%  -0.73%  (p=0.008 n=5+5)

name                        old allocs/op  new allocs/op  delta
Workloads/NoCallsNoGen-128     10.1k ± 0%     10.1k ± 0%    ~     (all equal)
Workloads/NoCalls-128          14.1k ± 0%     14.1k ± 0%    ~     (all equal)
Workloads/OneCall-128          47.4k ± 0%     45.4k ± 0%  -4.22%  (p=0.008 n=5+5)
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/598,"{'number': 598, 'state': 'closed', 'merged': False, 'created_at': '2023-09-11T22:04:18Z', 'merged_at': '2023-09-13T16:16:28Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_597,2023-09-11T21:39:19Z,"Optimized simulator trace contexts.\n\nThis PR optimizes how the simulator stores trace and span ids in contexts. Previously, we called `Context.WithValue` twice, once to embed a trace id and once to embed a span id. I believe that every call to `Context.WithValue` leads to an allocation, so this was redundant. I also changed the context key to a pointer, rather than allocating a new key every time.

This PR also adds some benchmarks to evaluate the effects of this (and future) optimizations. Here are the results. You can see that we decrease both the number of allocations and the amount of allocated memory. All workloads speed up, though only the simple workload has a significant speedup.

```
$ go test -run=$^ -bench=. -count=5 | tee /tmp/baseline.txt
$ go test -run=$^ -bench=. -count=5 | tee /tmp/experiment.txt
$ benchstat /tmp/{baseline,experiment}.txt
name                        old time/op    new time/op    delta
Workloads/NoCallsNoGen-128    6.49ms ± 2%    6.34ms ± 1%   -2.40%  (p=0.016 n=5+5)
Workloads/NoCalls-128         7.88ms ± 2%    7.79ms ± 2%     ~     (p=0.310 n=5+5)
Workloads/OneCall-128         17.5ms ± 2%    17.1ms ± 2%     ~     (p=0.056 n=5+5)

name                        old alloc/op   new alloc/op   delta
Workloads/NoCallsNoGen-128     557kB ± 0%     513kB ± 0%   -7.89%  (p=0.008 n=5+5)
Workloads/NoCalls-128          666kB ± 0%     622kB ± 0%   -6.63%  (p=0.008 n=5+5)
Workloads/OneCall-128         2.28MB ± 0%    2.24MB ± 0%   -1.96%  (p=0.008 n=5+5)

name                        old allocs/op  new allocs/op  delta
Workloads/NoCallsNoGen-128     11.6k ± 0%     10.1k ± 0%  -12.86%  (p=0.008 n=5+5)
Workloads/NoCalls-128          15.6k ± 0%     14.1k ± 0%   -9.55%  (p=0.008 n=5+5)
Workloads/OneCall-128          49.0k ± 0%     47.4k ± 0%   -3.28%  (p=0.008 n=5+5)
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/597,"{'number': 597, 'state': 'closed', 'merged': False, 'created_at': '2023-09-11T21:39:19Z', 'merged_at': '2023-09-13T16:16:12Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_596,2023-09-11T18:23:46Z,"Update the [kube] example.\n\nWe no longer use the `image` field - it has been replaced by separate ""tag"" and ""repo"" fields.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/596,"{'number': 596, 'state': 'closed', 'merged': False, 'created_at': '2023-09-11T18:23:46Z', 'merged_at': '2023-09-11T18:27:46Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_595,2023-09-11T18:22:19Z,"Run simulations concurrently.\n\nThis PR changes the `Simulator.Run` method to run multiple simulations in parallel. This does speed things up a bit (5x throughput for TestPassingSimulations), but things still aren't as fast as I'd like. I also need a lot of parallelism to speed things up fully which I don't yet fully understand. I'll try to do some profiling and optimizations in future PRs.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/595,"{'number': 595, 'state': 'closed', 'merged': False, 'created_at': '2023-09-11T18:22:19Z', 'merged_at': '2023-09-11T22:01:10Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_594,2023-09-10T14:13:31Z,blog/history: fixed typo in year\n\n,fb0ad65cff225c99,https://github.com/ServiceWeaver/weaver/pull/594,"{'number': 594, 'state': 'closed', 'merged': False, 'created_at': '2023-09-10T14:13:31Z', 'merged_at': '2023-09-11T16:27:13Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_593,2023-09-08T22:29:06Z,"Remove sim.WorkloadPointer interface.\n\nThis PR removes the `WorkloadPointer` interface, as suggested by Srdjan in https://github.com/ServiceWeaver/weaver/pull/588. The `New` function now has the following signature:

```go
func New(t *testing.T, x Workload, opts Options) *Simulator
```

This PR also addresses a subtlety in how Go defines method sets. Consider the following workload:

```go
type myWorkload struct{}
func (myWorkload) Init(sim.Registrar) error { ... }
func (myWorkload) Foo(context.Context) error { ... }
func (*myWorkload) Bar(context.Context) error { ... }
```

`myWorkload` implements the `Workload` interface and is a valid workload. Thus, a simulator should call all of `myWorkload`'s methods. But, which methods are defined on `myWorkload`? The answer might surprise you!

According to [the Go spec][spec], the method set of `myWorkload` includes `Init` and `Foo` but not `Bar` because `Bar` has a pointer receiver. `*myWorkload`, on the other hand, has `Init`, `Foo`, and `Bar` in its method set.

Thus, if we're being careful, we can't just call the methods defined on the workload type. We may have to take a pointer to the type first. This PR implements that.

This PR also tweaks a flaky test.

[spec]: https://go.dev/ref/spec#Method_sets",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/593,"{'number': 593, 'state': 'closed', 'merged': False, 'created_at': '2023-09-08T22:29:06Z', 'merged_at': '2023-09-11T17:17:06Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_592,2023-09-08T14:44:07Z,"Added some tests for proxy.\n\nIt seems that the `internal/proxy` package does not have a test file. 
This PR added some test case for check proxy work as expected.",6a363381c5596ca8,https://github.com/ServiceWeaver/weaver/pull/592,"{'number': 592, 'state': 'closed', 'merged': False, 'created_at': '2023-09-08T14:44:07Z', 'merged_at': '2023-11-09T23:11:00Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_591,2023-09-08T00:48:36Z,"Sweep over hyperparameters, running multiple sims.\n\nRecall the `Simulator.Run` method:

```go
func (s *Simulator) Run(duration time.Duration) Results
```

Before this PR, `Run` ran a single simulation. This PR enhances the simulator to continuously run simulations for the provided duration.

Recall that the behavior of a simulation is governed by a number of hyperparameters like the RNG seed, number of operations to run, the probability of injecting a failure, and so on. Given a time budget to run simulations, how do we explore this hyperparameter space?

That's a *very* hard and open ended question. This PR implements a very stupid yet simple algorithm that tries to search ""simpler"" simulations before exploring more complex simulations. This is only a temporary algorithm to get things working. In the future, we'll have to revisit and improve it. The algorithm will also get more complex when we implement minimization.

This PR also changes the signature of `Run` to not return an error. A simulation itself should never fail to execute properly.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/591,"{'number': 591, 'state': 'closed', 'merged': False, 'created_at': '2023-09-08T00:48:36Z', 'merged_at': '2023-09-11T16:33:59Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_590,2023-09-07T16:16:15Z,Small cleanups to the reverser app.\n\nI'm doing this in preparation for a demo video.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/590,"{'number': 590, 'state': 'closed', 'merged': False, 'created_at': '2023-09-07T16:16:15Z', 'merged_at': '2023-09-07T17:46:43Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_589,2023-09-07T00:36:48Z,"Implemented bare bones simulation with new API.\n\nThis PR hooks up the new simulation API to the existing simulation implementation code. This mostly consists of massaging a workload struct into types that the underlying simulation engine understands. For now, the simulator only runs a single simulation on a fixed set of hyperparameters. In the future, it will sweep over hyperparameters given a time budget.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/589,"{'number': 589, 'state': 'closed', 'merged': False, 'created_at': '2023-09-07T00:36:48Z', 'merged_at': '2023-09-11T16:27:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_588,2023-09-06T18:24:53Z,Added rough draft of simulator API.\n\nSee https://github.com/ServiceWeaver/weaver/pull/565 for details.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/588,"{'number': 588, 'state': 'closed', 'merged': False, 'created_at': '2023-09-06T18:24:53Z', 'merged_at': '2023-09-08T19:43:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_587,2023-09-06T18:19:54Z,Unexported private APIs from sim package.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/587,"{'number': 587, 'state': 'closed', 'merged': False, 'created_at': '2023-09-06T18:19:54Z', 'merged_at': '2023-09-08T19:37:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_586,2023-09-06T15:19:57Z,Cover hostname test with IPv6\n\nUse [net.JoinHostPort](https://pkg.go.dev/net?tab=doc#JoinHostPort) to join host and port instead of `fmt.Sprintf`. It fixed case when `ips[0]` is `::1`,6a363381c5596ca8,https://github.com/ServiceWeaver/weaver/pull/586,"{'number': 586, 'state': 'closed', 'merged': False, 'created_at': '2023-09-06T15:19:57Z', 'merged_at': '2023-09-06T15:40:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_585,2023-09-05T23:00:26Z,Small call_test.go cleanup of span propagation test.\n\nChange the span propagation test to use the testing facility for running custom functions at the server.,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/585,"{'number': 585, 'state': 'closed', 'merged': False, 'created_at': '2023-09-05T23:00:26Z', 'merged_at': '2023-09-06T15:05:52Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_584,2023-09-05T22:04:11Z,"Make sure the callgraph always includes a node for weaver.Main.\n\nThis node can be missed if, e.g., the binary only contains weaver.Main and no other components.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/584,"{'number': 584, 'state': 'closed', 'merged': False, 'created_at': '2023-09-05T22:04:11Z', 'merged_at': '2023-09-05T23:52:12Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_583,2023-09-05T20:30:18Z,Add AICamp links to the upcoming workshops.\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/583,"{'number': 583, 'state': 'closed', 'merged': False, 'created_at': '2023-09-05T20:30:18Z', 'merged_at': '2023-09-05T21:11:02Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_582,2023-09-05T20:23:04Z,Remove the use of co-location groups from the dashboard.\n\nIn #536 we removed the colocation group from status server. This PR removes the use of the colocation group from the dashboard too.,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/582,"{'number': 582, 'state': 'closed', 'merged': False, 'created_at': '2023-09-05T20:23:04Z', 'merged_at': '2023-09-05T21:11:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_581,2023-09-05T19:33:17Z,Fixed missing env bug in single deployments.\n\nThis PR fixes a bug where environment variables in the config file were not being set for single process deployments. Thanks anders_03374 on Discord for finding this bug.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/581,"{'number': 581, 'state': 'closed', 'merged': False, 'created_at': '2023-09-05T19:33:17Z', 'merged_at': '2023-09-07T00:43:33Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_579,2023-09-01T00:24:12Z,"More logging prettifications.\n\n* remoteweavelet no longer merges dynamic values into the initial log string.
* Explicitly save the values we need for log line comparisons instead of cloning the entire LogEntry.
* Logging level is never dimmed.
* Timestamp prefix is always dimmed if same as in previous entry.
* Change initial padding for component and node columns.
* File name and line are now always colored by hashing the file name.
* Change separator between log line header and log line contents.
* Log message is not colored.
* Attribute keys are now always dimmed.
* Attribute values are now colored (by hashing the key so that all attribute values for the same key can be spotted at a glance). As an exception, error values are always red, and component values are always colored by hashing the component name.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/579,"{'number': 579, 'state': 'closed', 'merged': False, 'created_at': '2023-09-01T00:24:12Z', 'merged_at': '2023-09-01T14:14:59Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-09-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_578,2023-08-31T21:47:00Z,"Improve column alignment in test logs.\n\nWe would previously create a NewPrettyPrinter per log entry to disable dimming, which had the unfortunate side-effect of not aligining component and file:line columns. We now reuse a NewPrettyPrinter, but explicitly disable dimming inside it and start it off with wide columns,",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/578,"{'number': 578, 'state': 'closed', 'merged': False, 'created_at': '2023-08-31T21:47:00Z', 'merged_at': '2023-08-31T22:36:59Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-31. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_577,2023-08-31T21:15:43Z,"Log printing improvements.\n\nChange weavelet generated log entry component name from a string of the form ""weavelet-9f9aa218"" to ""weavelet"". The extra ID information is already available in the node name.

Elide ""serviceweaver/system"" attribute. The component name already implies it (by being a special string instead of a user component).",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/577,"{'number': 577, 'state': 'closed', 'merged': False, 'created_at': '2023-08-31T21:15:43Z', 'merged_at': '2023-08-31T21:43:45Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-31. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_575,2023-08-30T22:08:58Z,"Enable automatic retrying on a network error.\n\nRemote method calls are now automatically retried after network errors. This functionality can be disabled on a method-by-method basis by marking the method as not-retriable:

```go
var _ weaver.NotRetriable = Component.Method
```

weavertest's RPC runner helps to discover methods that should be marked as not-retriable by artificially retrying all unmarked methods an extra time.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/575,"{'number': 575, 'state': 'closed', 'merged': False, 'created_at': '2023-08-30T22:08:58Z', 'merged_at': '2023-08-31T15:18:01Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_574,2023-08-30T20:42:48Z,"Removed map-based picking functions from simulator\n\nThis simplifies things, reduces allocations, and is faster.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/574,"{'number': 574, 'state': 'closed', 'merged': False, 'created_at': '2023-08-30T20:42:48Z', 'merged_at': '2023-08-30T23:18:04Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_573,2023-08-30T20:00:35Z,"Optimized how simulator picks ops.\n\nRecall that the simulator has to keep track of the set of ops that haven't yet finished. The simulator performs two main operations on this set:

1. It picks random elements from it.
2. It removes elements from the set.

Before this PR, the simulator maintained this set as a builtin Go `map`. Deterministically picking a key from the map was slow. This PR replaces the `map` with a more optimized data structure. I took the idea from Sanjay's code in PR #498.

This speeds up TestSuccessfulSimulation from about 0.4 seconds to 0.1 second. There are still more optimizations to do in future PRs.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/573,"{'number': 573, 'state': 'closed', 'merged': False, 'created_at': '2023-08-30T20:00:35Z', 'merged_at': '2023-08-30T23:12:56Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_572,2023-08-30T18:03:27Z,"Added simulator yield rate to tune interleaving.\n\nThis PR introduces a new hyperparameter to the simulator, *yield rate*, that dictates how much an execution is interleaved. Recall that a simulation consists of a number of operations (ops), and every op executes a series of steps, mostly calling component methods.

After executing a step, an op makes a decision to keep executing or to yield control back to the scheduler. The yield rate determines how often the op yields. With a yield rate of 0, the op never yields. Ops are run to completion, and there is no interleaving. With a yield rate of 1, ops yield after every step, leading to a very high degree of interleaving. With a yield rate of $\frac{1}{n}$, an op yields after $n$ steps in expectation. In general, yielding is governed by a [geometric distribution][geometric].

Note that some of the code in this PR is really inefficient. I left it as is to keep thing easy to understand, but will optimize things in a future PR.

[geometric]: https://en.wikipedia.org/wiki/Geometric_distribution",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/572,"{'number': 572, 'state': 'closed', 'merged': False, 'created_at': '2023-08-30T18:03:27Z', 'merged_at': '2023-08-30T23:05:43Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_570,2023-08-30T15:50:47Z,"Allow methods to be marked as non-retriable.\n\nA component method can now be marked as non-retriable by adding a blank assignment of the form:

```
var _ weaver.NotRetriable = Component.Method
```

We currently don't auto-retry, so such annotations are no-ops, but will become meaningful after we enable auto-retries.

Refactored some stub creation code out of remoteweavelet.go and made it easier to test.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/570,"{'number': 570, 'state': 'closed', 'merged': False, 'created_at': '2023-08-30T15:50:47Z', 'merged_at': '2023-08-30T18:18:24Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_569,2023-08-29T22:59:10Z,"Added hyperparameter for simulator failure rate.\n\nRecall that the simulator can arbitrarily choose to fail a component method call, either before or after delivering the call. Before this PR, the simulator had an incredibly naive algorithm for deciding when to fail calls. This naive approach failed a lot of calls.

This PR introduces a hyperparameter `FailureRate` to configure how often the simulator fails calls. When FailureRate is 0, the simulator never fails a call, and when FailureRate is 1, the simulator fails every call.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/569,"{'number': 569, 'state': 'closed', 'merged': False, 'created_at': '2023-08-29T22:59:10Z', 'merged_at': '2023-08-30T22:55:07Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-29. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_568,2023-08-29T00:05:40Z,"Added basic implementation of a simulator corpus.\n\nSee corpus.go for a description of what the simulator corpus is, how it's designed, why it's important, and what the next steps are. Note that this PR implements a very primitive corpus. There's lots to improve in the future.

Here's an example of a corpus:

```shell
$ tree testdata
testdata/
└── sim
    ├── TestCancelledSimulation
    │   └── a52f5ec5f94e674d.json
    ├── TestSimulateCorpusEntries
    │   ├── 2bfe847328319dae.json
    │   └── a52f5ec5f94e674d.json
    └── TestUnsuccessfulSimulation
        ├── 2bfe847328319dae.json
        └── a52f5ec5f94e674d.json

5 directories, 5 files
$ cat testdata/sim/TestCancelledSimulation/a52f5ec5f94e674d.json
{
    ""version"": 1,
    ""seed"": 0,
    ""num_replicas"": 10,
    ""num_ops"": 1000
}
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/568,"{'number': 568, 'state': 'closed', 'merged': False, 'created_at': '2023-08-29T00:05:40Z', 'merged_at': '2023-08-29T16:51:12Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-29. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_567,2023-08-28T21:46:10Z,"Added basic mermaid visualization to simulator.\n\nThere are many ways to visualize a history. First, we can use existing distributed tracing tools like Jaegar or Grafana. However, most of these tools look at a single trace at a time, whereas a history is a mix of many traces.

There is also [shiviz][], which is very close to what I want. Unfortunately, there is no notion of traces or spans, so it can be hard to follow when multiple requests interleave.

Finally, there are tools like [mermaid][]. These are very simple, but the resulting diagrams are hard to read and a bit janky. After some discussion, we decided to use mermaid for now, and invest in building our own visualization frontend later.

Here's an example visualization:

```mermaid
sequenceDiagram
    participant op1 as Op 1
    participant op2 as Op 2
    participant github.com/ServiceWeaver/weaver/internal/sim/div0 as sim.div 0
    participant github.com/ServiceWeaver/weaver/internal/sim/divMod0 as sim.divMod 0
    participant github.com/ServiceWeaver/weaver/internal/sim/identity0 as sim.identity 0
    participant github.com/ServiceWeaver/weaver/internal/sim/mod0 as sim.mod 0
    note right of op1: [1:1] divmod({11 71})
    op1->>github.com/ServiceWeaver/weaver/internal/sim/divMod0: [1:2] sim.divMod.DivMod(11, 71)
    note right of op2: [2:4] divmod({5 98})
    github.com/ServiceWeaver/weaver/internal/sim/divMod0->>github.com/ServiceWeaver/weaver/internal/sim/div0: [1:3] sim.div.Div(11, 71)
    github.com/ServiceWeaver/weaver/internal/sim/div0->>github.com/ServiceWeaver/weaver/internal/sim/identity0: [1:6] sim.identity.Identity(11)
    op2->>github.com/ServiceWeaver/weaver/internal/sim/divMod0: [2:5] sim.divMod.DivMod(5, 98)
    github.com/ServiceWeaver/weaver/internal/sim/identity0->>github.com/ServiceWeaver/weaver/internal/sim/div0: [1:6] return 11, <nil>
    github.com/ServiceWeaver/weaver/internal/sim/divMod0->>github.com/ServiceWeaver/weaver/internal/sim/div0: [2:7] sim.div.Div(5, 98)
    github.com/ServiceWeaver/weaver/internal/sim/div0->>github.com/ServiceWeaver/weaver/internal/sim/identity0: [1:8] sim.identity.Identity(71)
    github.com/ServiceWeaver/weaver/internal/sim/identity0->>github.com/ServiceWeaver/weaver/internal/sim/div0: [1:8] return 71, <nil>
    github.com/ServiceWeaver/weaver/internal/sim/div0->>github.com/ServiceWeaver/weaver/internal/sim/identity0: [2:9] sim.identity.Identity(5)
    github.com/ServiceWeaver/weaver/internal/sim/identity0->>github.com/ServiceWeaver/weaver/internal/sim/div0: [2:9] return 5, <nil>
    github.com/ServiceWeaver/weaver/internal/sim/div0->>github.com/ServiceWeaver/weaver/internal/sim/identity0: [2:10] sim.identity.Identity(98)
    github.com/ServiceWeaver/weaver/internal/sim/identity0->>github.com/ServiceWeaver/weaver/internal/sim/div0: [2:10] return 98, <nil>
    github.com/ServiceWeaver/weaver/internal/sim/div0->>github.com/ServiceWeaver/weaver/internal/sim/divMod0: [1:3] return 0, <nil>
    github.com/ServiceWeaver/weaver/internal/sim/div0->>github.com/ServiceWeaver/weaver/internal/sim/divMod0: [2:7] return 0, <nil>
    github.com/ServiceWeaver/weaver/internal/sim/divMod0->>github.com/ServiceWeaver/weaver/internal/sim/mod0: [1:11] sim.mod.Mod(11, 71)
    github.com/ServiceWeaver/weaver/internal/sim/mod0->>github.com/ServiceWeaver/weaver/internal/sim/identity0: [1:13] sim.identity.Identity(11)
    github.com/ServiceWeaver/weaver/internal/sim/divMod0->>github.com/ServiceWeaver/weaver/internal/sim/mod0: [2:12] sim.mod.Mod(5, 98)
    github.com/ServiceWeaver/weaver/internal/sim/identity0->>github.com/ServiceWeaver/weaver/internal/sim/mod0: [1:13] return 11, <nil>
    github.com/ServiceWeaver/weaver/internal/sim/mod0->>github.com/ServiceWeaver/weaver/internal/sim/identity0: [2:14] sim.identity.Identity(5)
    github.com/ServiceWeaver/weaver/internal/sim/identity0->>github.com/ServiceWeaver/weaver/internal/sim/mod0: [2:14] return 5, <nil>
    github.com/ServiceWeaver/weaver/internal/sim/mod0->>github.com/ServiceWeaver/weaver/internal/sim/identity0: [1:15] sim.identity.Identity(71)
    github.com/ServiceWeaver/weaver/internal/sim/mod0->>github.com/ServiceWeaver/weaver/internal/sim/identity0: [2:16] sim.identity.Identity(98)
    github.com/ServiceWeaver/weaver/internal/sim/identity0->>github.com/ServiceWeaver/weaver/internal/sim/mod0: [1:15] return 71, <nil>
    github.com/ServiceWeaver/weaver/internal/sim/mod0->>github.com/ServiceWeaver/weaver/internal/sim/divMod0: [1:11] return 11, <nil>
    github.com/ServiceWeaver/weaver/internal/sim/identity0->>github.com/ServiceWeaver/weaver/internal/sim/mod0: [2:16] return 98, <nil>
    github.com/ServiceWeaver/weaver/internal/sim/mod0->>github.com/ServiceWeaver/weaver/internal/sim/divMod0: [2:12] return 5, <nil>
    github.com/ServiceWeaver/weaver/internal/sim/divMod0->>op1: [1:2] return 0, 11, <nil>
    note right of op1: [1:1] return <nil>
    github.com/ServiceWeaver/weaver/internal/sim/divMod0->>op2: [2:5] return 0, 5, <nil>
    note right of op2: [2:4] return <nil>
```

[mermaid]: https://mermaid.js.org/
[shiviz]: https://bestchai.bitbucket.io/shiviz/",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/567,"{'number': 567, 'state': 'closed', 'merged': False, 'created_at': '2023-08-28T21:46:10Z', 'merged_at': '2023-08-29T00:03:45Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_566,2023-08-28T21:30:55Z,"Added basic tracing to the simulator.\n\nRecall that a simulation consists of a number of discrete events:

- An op starts.
- An op finishes.
- A method call is made.
- A method call is delivered.
- A method call returns.
- A method return return is delivered.
- An error is injected.

This PR adds basic tracing to the simulator to keep track of these events. When a simulation fails, a history of the events is returned to the user. They can inspect the history to understand why the simulation failed. In a future PR, I'll add a way to visualize a history of events.

In the future, traces could be used for more than just visualization. For example, we may use traces for minimization or for checking that a simulation is deterministic. Thus, I expect the contents of the traces to change over time as we refine the simulator. I went with something simple for now.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/566,"{'number': 566, 'state': 'closed', 'merged': False, 'created_at': '2023-08-28T21:30:55Z', 'merged_at': '2023-08-28T23:54:46Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_565,2023-08-25T17:15:43Z,Added doc on simulator API.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/565,"{'number': 565, 'state': 'closed', 'merged': False, 'created_at': '2023-08-25T17:15:43Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_564,2023-08-24T10:51:01Z,"Refactor logging file tests by using T.TempDir\n\nThis PR simplifies logging tests by using [`T.TempDir`](https://pkg.go.dev/testing#T.TempDir) instead of `os.MkdirTemp`. 

> TempDir returns a temporary directory for the test to use. The directory is automatically removed by Cleanup when the test and all its subtests complete.",9aa12348931d2903,https://github.com/ServiceWeaver/weaver/pull/564,"{'number': 564, 'state': 'closed', 'merged': False, 'created_at': '2023-08-24T10:51:01Z', 'merged_at': '2023-08-24T16:12:48Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_561,2023-08-23T22:45:21Z,"Verify registered listeners when starting the app.\n\nThis ensures that the application listeners match the information stored in the read-only section of the application binary, and used by various deployers. If there is a mismatch, the user will be prompted to run `weaver generate`.

This fixes one of the common issues that came up in workshops, where people forgot to re-run `weaver generate` after declaring the listener.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/561,"{'number': 561, 'state': 'closed', 'merged': False, 'created_at': '2023-08-23T22:45:21Z', 'merged_at': '2023-08-23T23:39:56Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_560,2023-08-23T22:12:53Z,"Fixed bug in GitHub Actions go caching.\n\nThe setup-go action's default caching behavior does not work well with matrix tests. By default, setup-go caches the contents of `go env GOCACHE` and `go env GOMODCACHE` under a key derived from the OS, the go version, and a hash of the contents of go.sum [1].

When we run a matrix test, every job uses the same cache key. As a result, the jobs race, and the first to finish determines the contents of the cache. Because caches are write-once, all other jobs fail to update the cache. In subsequent runs, all jobs use the contents of the cache, even if the cache was generated by a different job.

For example, if the ""lint"" job finishes first, then all future jobs like ""build"" and ""test"" will use the cache produced by the ""lint"" job. However, this cache is likely missing a lot of cached package and build outputs, causing to the ""build"" and ""test"" jobs to redundantly download and build dependencies again and again.

To avoid this problem, we manually cache the contents of `go env GOCACHE` and `go env GOMODCACHE` using a key derived from the OS, the go version, the contents of go.sum, and the matrix command. See [2] for more documentation on custom cache keys and paths.

[1]: https://github.com/actions/setup-go/blob/93397bea11091df50f3d7e59dc26a7711a8bcfbe/docs/adrs/0000-caching-dependencies.md
[2]: https://github.com/actions/cache#creating-a-cache-key
",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/560,"{'number': 560, 'state': 'closed', 'merged': False, 'created_at': '2023-08-23T22:12:53Z', 'merged_at': '2023-08-23T22:52:34Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_559,2023-08-23T21:25:21Z,Updated dependencies in go.mod.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/559,"{'number': 559, 'state': 'closed', 'merged': False, 'created_at': '2023-08-23T21:25:21Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_558,2023-08-23T20:01:02Z,DO_NOT_SUBMIT: Profiling bin_test.go.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/558,"{'number': 558, 'state': 'closed', 'merged': False, 'created_at': '2023-08-23T20:01:02Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_557,2023-08-23T16:59:30Z,"Sped up bin_test.go using t.Parallel().\n\nI noticed on GitHub Actions that bin_test was taking up to two minutes to execute [1]. This PR speeds things up by running things in parallel. The test also redundantly builds the same binary again and again. We could speed up the tests even further by not rebuilding things, but I'll leave that for another PR as it introduces a bit of complexity.

[1]: https://github.com/ServiceWeaver/weaver/actions/runs/5954182034/job/16150143324",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/557,"{'number': 557, 'state': 'closed', 'merged': False, 'created_at': '2023-08-23T16:59:30Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_553,2023-08-22T16:34:23Z,Remove cancelled workshops\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/553,"{'number': 553, 'state': 'closed', 'merged': False, 'created_at': '2023-08-22T16:34:23Z', 'merged_at': '2023-08-22T17:32:14Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-22. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_552,2023-08-21T19:50:02Z,"Fixed flaky tests?\n\nOn GitHub Actions, I saw TestFailReplica and TestMetricPropagation flaking. I can't reproduce the failure locally, but this PR is an attempt at fixing the bugs.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/552,"{'number': 552, 'state': 'closed', 'merged': False, 'created_at': '2023-08-21T19:50:02Z', 'merged_at': '2023-08-23T16:33:46Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_551,2023-08-21T16:23:58Z,Fixed bug in examples_test.go\n\nThis PR fixes #549. examples_test.go was using the weaver binary but wasn't building it first.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/551,"{'number': 551, 'state': 'closed', 'merged': False, 'created_at': '2023-08-21T16:23:58Z', 'merged_at': '2023-08-23T17:18:55Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_548,2023-08-19T00:01:45Z,Inject RemoteCallErrors into simulations.\n\nRecall that component method calls can fail with RemoteCallErrors. This PR extends the simulator to randomly return RemoteCallErrors from method calls. Note that the simulator sometimes returns a RemoteCallError without executing a method call and sometimes returns a RemoteCallError after executing a method. Both are possible.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/548,"{'number': 548, 'state': 'closed', 'merged': False, 'created_at': '2023-08-19T00:01:45Z', 'merged_at': '2023-08-23T23:46:33Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_547,2023-08-18T23:26:29Z,Added fakes to simulator.\n\nThis PR allows the simulator to replace a real component implementation with a fake one. The API for passing fakes right now is very primitive. We still need to figure out the right API for the simulator.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/547,"{'number': 547, 'state': 'closed', 'merged': False, 'created_at': '2023-08-18T23:26:29Z', 'merged_at': '2023-08-23T23:40:04Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_546,2023-08-18T23:09:38Z,"Implemented basic simulation.\n\nThis PR implements the core logic of the deterministic simulator. The simulator maintains a buffer of pending calls and pending replies. It repeatedly performs one of the following actions:

1. Start an op.
2. Deliver a method call.
3. Deliver a method reply.

## Starting An Op

Recall the definition of an op:

```go
type Op[T any] struct {
    Name string
    Gen func(*rand.Rand) T
    Func any
}
```

When a simulator starts an op, it calls the `Gen` function to generate a random value. It then invokes `Func`, passing it handles to the necessary components. These handles are generated using reflect stubs created with the simulator's `call` method. `Func` runs freely until it calls a component method. At that point, the reflect stub is invoked, the arguments of the call are recorded for later execution, and the call blocks on a channel to receive return values. When the op terminates, the simulation is aborted if the op returns an error.

## Delivering a Method Call

When the simulator delivers a call, it picks a component replica to execute the call and then calls the component's method directly. From here, the executing method acts like an executing op. When the call returns, the return values are recorded for later delivery.

## Delivering a Method Reply

When the simulator delivers a method reply, it writes the return values of the method to the channel on which the caller is blocked. This will signal the caller to wake up and continue executing.

## Control Flow

Most of the complexity of the simulator comes from its complicated control flow. Execution is similar to [cooperative threading][1]. The various ops and method calls all happen on different goroutines and are never preempted. Instead, they relinquish control back to the simulator whenever they call a component method or return.

[1]: https://en.wikipedia.org/wiki/Cooperative_multitasking",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/546,"{'number': 546, 'state': 'closed', 'merged': False, 'created_at': '2023-08-18T23:09:38Z', 'merged_at': '2023-08-23T23:32:17Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_545,2023-08-18T20:42:41Z,"Register operations (ops) with simulator.\n\nThis PR introduces an `Op[T]` type to represent operations executed as part of a simulation. Currently, the ops are not actually executed; that will come in a future PR.

I'm not 100% satisfied with the `Op` API right now. The biggest awkwardness comes when your operation wants to receive more than one random argument. To do that with this API, you have to wrap all arguments into a struct. That is clunky.

Registering an `Op` is also a bit strange because you have to call a function rather than a `Sim` method. This is because methods in Go cannot be generic.

I'd love to improve the API later if we can think of something better, and I'm definitely open to suggestions.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/545,"{'number': 545, 'state': 'closed', 'merged': False, 'created_at': '2023-08-18T20:42:41Z', 'merged_at': '2023-08-23T23:27:11Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_544,2023-08-18T18:06:52Z,"Enabled more lint checks.\n\nThis PR enables some of the previously disabled linter checks:

- ST1016: This checks that method reciever names are consistent. The code already satisfied this check.
- ST1020: This checks that exported functions are documented with a comment that begins with the function's name. Enabling this check caught a couple of typos in the code.
- ST1022: This checks that exported variables are documented with a comment that begins with the variable's name. Enabling this check caught one bad comment.

I also considered enabling the other default checks, but wasn't sure if it was worth it:

- ST1000: This checks that every package has a package comment. For some internal packages, like those in weavertest/internal, this check felt unnecessary.
- ST1003: This checks for bad variable names. The vast majority of flagged variable names involved the capitalization of ""ID"". We often use variables like ""DeploymentId"", but the linter wants ""DeploymentID"". I couldn't find any official guidance on this kind of capitalization, so I left the check disabled.
- ST1021: This checks that exported types are documented with a comment that begins with the type's name. I want to enable this check, but it doesn't handle generic types. For example, the comment above RoutedBy begins `// RoutedBy[T] ...`, but the check wants `// RoutedBy ...`",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/544,"{'number': 544, 'state': 'closed', 'merged': False, 'created_at': '2023-08-18T18:06:52Z', 'merged_at': '2023-08-18T18:25:19Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_543,2023-08-18T17:20:35Z,"Typo: the file is named main.go\n\nThe file in the repo is `main.go`, and it is later refered to as `main.go`.",c01c8f8048609ae2,https://github.com/ServiceWeaver/weaver/pull/543,"{'number': 543, 'state': 'closed', 'merged': False, 'created_at': '2023-08-18T17:20:35Z', 'merged_at': '2023-08-18T17:32:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_542,2023-08-18T17:06:06Z,"Clarify ""weaver generate"" version error message.\n\nRecall that `weaver generate` generates code to check, at compile time, that the codegen version used by `weaver generate` is the same as the codegen version linked into the application. This check includes a lengthy error message that is shown to the user when they try to `go build` or `go run` with a mismatched codegen version:

```
ERROR: You generated this file with 'weaver generate' v0.20.0 (codegen
version v0.20.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.
```

People were reading `weaver_gen.go` and seeing this error message, thinking that something went wrong with `weaver generate`. This PR tries to clarify the situation in two ways.

1. I moved the generated error message to the middle of `weaver_gen.go`. Before it was at the very top, and people saw it immediately when opening `weaver_gen.go`. Now, it's buried more in the middle, making it less likely for people to read it.
2. I added a comment above the error message explaining that it's nothing to worry about.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/542,"{'number': 542, 'state': 'closed', 'merged': False, 'created_at': '2023-08-18T17:06:06Z', 'merged_at': '2023-08-23T17:12:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_541,2023-08-18T16:47:07Z,"Fixed period (""."") app name bug.\n\nBefore this PR, if you go ran a Service Weaver app with a config file that was missing an app name and a binary, the app name would erroneously default to ""."".

```
╭──────────────────────────────────────────────────╮
│ DEPLOYMENTS                                      │
├─────┬──────────────────────────────────────┬─────┤
│ APP │ DEPLOYMENT                           │ AGE │
├─────┼──────────────────────────────────────┼─────┤
│ .   │ 10695f3a-0afe-4361-8d9a-033fd6ea81a0 │ 2s  │
╰─────┴──────────────────────────────────────┴─────╯
╭────────────────────────────────────────────────╮
│ COMPONENTS                                     │
├─────┬────────────┬──────────────┬──────────────┤
│ APP │ DEPLOYMENT │ COMPONENT    │ REPLICA PIDS │
├─────┼────────────┼──────────────┼──────────────┤
│ .   │ 10695f3a   │ weaver.Main  │ 2417098      │
│ .   │ 10695f3a   │ collatz.Even │ 2417098      │
│ .   │ 10695f3a   │ collatz.Odd  │ 2417098      │
│ .   │ 10695f3a   │ main         │ 2417098      │
╰─────┴────────────┴──────────────┴──────────────╯
╭──────────────────────────────────────────────╮
│ LISTENERS                                    │
├─────┬────────────┬──────────┬────────────────┤
│ APP │ DEPLOYMENT │ LISTENER │ ADDRESS        │
├─────┼────────────┼──────────┼────────────────┤
│ .   │ 10695f3a   │ collatz  │ 127.0.0.1:9000 │
╰─────┴────────────┴──────────┴────────────────╯
```

To calculate the app name, we called `filepath.Base` on the binary, but if the binary was empty, `filepath.Base` would return `"".""`. This PR fixes the bug by only setting the app name if the binary is present.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/541,"{'number': 541, 'state': 'closed', 'merged': False, 'created_at': '2023-08-18T16:47:07Z', 'merged_at': '2023-08-23T17:05:53Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_539,2023-08-16T21:51:53Z,"internal/net/call now supports optional retries.\n\nAdded call.CallOptions.Retry, which causes calls to be retried after a communication or unreachable error. Subsequent changes will make ServiceWeaver methods use this functionality when appropriate.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/539,"{'number': 539, 'state': 'closed', 'merged': False, 'created_at': '2023-08-16T21:51:53Z', 'merged_at': '2023-08-18T18:11:31Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_538,2023-08-16T17:32:00Z,"Switched to using staticcheck linter.\n\nPreviously, we used [golangci-lint](https://github.com/golangci/golangci-lint), but the Go team recommended we use staticcheck instead.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/538,"{'number': 538, 'state': 'closed', 'merged': False, 'created_at': '2023-08-16T17:32:00Z', 'merged_at': '2023-08-16T20:48:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_537,2023-08-16T16:43:02Z,"Removed phantom ""main"" from weaver single status.\n\nThis PR fixes a bug where `weaver single status` was erroneously reporting a phantom `main` component in addition to the expected `weaver.Main` component. Here's the output of `weaver single status` on the collatz app before and after this change:

```diff
 ╭──────────────────────────────────────────────────────╮
 │ DEPLOYMENTS                                          │
 ├─────────┬──────────────────────────────────────┬─────┤
 │ APP     │ DEPLOYMENT                           │ AGE │
 ├─────────┼──────────────────────────────────────┼─────┤
 │ collatz │ b025a10f-0d71-48af-9f1d-a53a46f81e31 │ 3s  │
 ╰─────────┴──────────────────────────────────────┴─────╯
 ╭────────────────────────────────────────────────────╮
 │ COMPONENTS                                         │
 ├─────────┬────────────┬──────────────┬──────────────┤
 │ APP     │ DEPLOYMENT │ COMPONENT    │ REPLICA PIDS │
 ├─────────┼────────────┼──────────────┼──────────────┤
 │ collatz │ b025a10f   │ weaver.Main  │ 55837        │
 │ collatz │ b025a10f   │ collatz.Even │ 55837        │
 │ collatz │ b025a10f   │ collatz.Odd  │ 55837        │
-│ collatz │ b025a10f   │ main         │ 55837        │
 ╰─────────┴────────────┴──────────────┴──────────────╯
 ╭──────────────────────────────────────────────────╮
 │ LISTENERS                                        │
 ├─────────┬────────────┬──────────┬────────────────┤
 │ APP     │ DEPLOYMENT │ LISTENER │ ADDRESS        │
 ├─────────┼────────────┼──────────┼────────────────┤
 │ collatz │ b025a10f   │ collatz  │ 127.0.0.1:9000 │
 ╰─────────┴────────────┴──────────┴────────────────╯
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/537,"{'number': 537, 'state': 'closed', 'merged': False, 'created_at': '2023-08-16T16:43:02Z', 'merged_at': '2023-08-23T16:57:06Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_536,2023-08-16T16:42:28Z,"Removed colocation group from status server.\n\nRecall that the single, multi, and ssh deployers all run status servers which report the status of their applications via ""weaver status"" and ""weaver dashboard"". This PR removes the outdated use of co-location groups in the reported status.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/536,"{'number': 536, 'state': 'closed', 'merged': False, 'created_at': '2023-08-16T16:42:28Z', 'merged_at': '2023-08-23T16:49:13Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_535,2023-08-15T23:37:51Z,Replaced GOPATH with HOME/go/bin.\n\nRobert found that most people don't have GOPATH set.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/535,"{'number': 535, 'state': 'closed', 'merged': False, 'created_at': '2023-08-15T23:37:51Z', 'merged_at': '2023-08-15T23:42:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_534,2023-08-15T21:58:30Z,"Initialize components in own goroutines.\n\nThis PR initializes every component in its own goroutine, to avoid a component with a blocking Init from blocking the construction of other components.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/534,"{'number': 534, 'state': 'closed', 'merged': False, 'created_at': '2023-08-15T21:58:30Z', 'merged_at': '2023-08-23T16:41:41Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_533,2023-08-15T21:58:13Z,Added distributed RemoteWeavelet failure tests.\n\nThis PR adds two RemoteWeavelet unit tests that involve running multiple weavelets and failing them in some way. I also did some small cleanups.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/533,"{'number': 533, 'state': 'closed', 'merged': False, 'created_at': '2023-08-15T21:58:13Z', 'merged_at': '2023-08-21T19:27:32Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_532,2023-08-15T21:57:56Z,"Extended test deployer to spawn multiple weavelets\n\nThis PR extends the test deployer to spawn more than one weavelet. This is needed for tests that require multiple weavelets, something I will add in future PRs.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/532,"{'number': 532, 'state': 'closed', 'merged': False, 'created_at': '2023-08-15T21:57:56Z', 'merged_at': '2023-08-21T18:30:35Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_531,2023-08-15T21:57:16Z,"Replaced os.Exit with RemoteWeavelet Wait method.\n\nRecall that a RemoteWeavelet maintains (1) an RPC server to serve remote component method calls from other weavelets and (2) a connection to the envelope. Before this PR, a RemoteWeavelet would os.Exit if either (1) or (2) went down. This made testing failure scenarios impossible, as the process would simply exit.

This PR removes the calls to os.Exit. Instead, I added a Wait method to the RemoteWeavelet that blocks until the weavelet has shut down and returns any errors encountered during shutdown. With this new Wait method, I was able to add a unit test to test the behavior of a weavelet when its connection to the envelope breaks.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/531,"{'number': 531, 'state': 'closed', 'merged': False, 'created_at': '2023-08-15T21:57:16Z', 'merged_at': '2023-08-21T17:42:33Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_530,2023-08-15T21:56:38Z,"Fixed bugs in RemoteWeavelet UpdateComponents.\n\nThis PR fixes two small bugs in UpdateComponents.

1. UpdateComponents now returns an error if the provided components don't exist. Previously, the error was logged but not returned.
2. Previously, if a component failed to construct, the construction of all subsequent components was short circuited. Now, we try to construct all components, even if some fail to construct.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/530,"{'number': 530, 'state': 'closed', 'merged': False, 'created_at': '2023-08-15T21:56:38Z', 'merged_at': '2023-08-21T17:34:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_529,2023-08-15T21:55:59Z,"Fixed RemoteWeavelet UpdateRoutingInfo bugs.\n\nThis PR fixes four bugs in RemoteWeavelet's UpdateRoutingInfo.

1. Before this PR, UpdateRoutingInfo would panic if you passed it a nil RoutingInfo. This PR fixes UpdateRoutingInfo to instead return an error.
2. Recall that a component is either always local or always remote. We don't currently allow a component to switch between the two. This PR adds code to UpdateRoutingInfo to check this.
3. Before this PR, we were using the assignment from one component as the assignment for all components' load collectors.
4. UpdateRoutingInfo updates a resolver, balancer, and load collector. Before this PR, it was possible to update the load collector but not the resolver or balancer. This PR reorders things so either all are updated or none of them are. The update is still not transactional, as concurrent calls to UpdateRoutingInfo can interleave. We should consider fixing that in a future PR.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/529,"{'number': 529, 'state': 'closed', 'merged': False, 'created_at': '2023-08-15T21:55:59Z', 'merged_at': '2023-08-21T17:18:46Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_528,2023-08-15T21:55:15Z,"Added unit tests for remote weavelet.\n\nThis PR adds unit tests for the remote weavelet. Specifically, it tests that the weavelet still operates correctly even when some of its interactions with the envelope fail. For example, the weavelet should retry failed ActivateComponent calls. A handful of the tests are currently failing because of ""bugs"" in the remote weavelet. I skipped the tests for now and will try to fix the bugs in future PRs.

Fixing the bugs is a bit tricky because it's not always straightforward the best way to handle failures. For example, if a weavelet calls GetListenerAddress and receives an address that is already in use, should it keep retrying the GetListenerAddress? Or should it just self-terminate?",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/528,"{'number': 528, 'state': 'closed', 'merged': False, 'created_at': '2023-08-15T21:55:15Z', 'merged_at': '2023-08-21T17:05:27Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_527,2023-08-15T05:20:48Z,Add link to the Go meetup page in Boston\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/527,"{'number': 527, 'state': 'closed', 'merged': False, 'created_at': '2023-08-15T05:20:48Z', 'merged_at': '2023-08-15T16:01:35Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_526,2023-08-14T19:30:11Z,"Replaced InternalPort with InternalAddress.\n\nRecall that a weavelet listens on an internal listener to serve remote procedure calls from other weavelets. This PR simplifies how a weavelet picks the address for this internal listener.

Previously, the address was dictated by two fields inside `EnvelopeInfo`: `SingleMachine` and `InternalPort`. The weavelet would listen on `$HOSTNAME:InternalPort` if `SingleMachine` was false and `localhost:InternalPort` otherwise.

This PR removes the `SingleMachine` field and replaces `InternalPort` with `InternalAddress`. A weavelet listens on the `InternalAddress` provided by the envelope.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/526,"{'number': 526, 'state': 'closed', 'merged': False, 'created_at': '2023-08-14T19:30:11Z', 'merged_at': '2023-08-14T20:13:50Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_525,2023-08-14T18:48:10Z,Remove unused address\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/525,"{'number': 525, 'state': 'closed', 'merged': False, 'created_at': '2023-08-14T18:48:10Z', 'merged_at': '2023-08-14T19:30:34Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_523,2023-08-11T22:15:16Z,Make github action names stable across Go versions\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/523,"{'number': 523, 'state': 'closed', 'merged': False, 'created_at': '2023-08-11T22:15:16Z', 'merged_at': '2023-08-11T22:43:54Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_522,2023-08-11T22:05:50Z,"Removed Pid field from WeaveletInfo proto.\n\nThis PR removes the mostly unused Pid field from the WeaveletInfo proto. The field is unnecessary, as an envelope already knows the pid of the weavelet its running.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/522,"{'number': 522, 'state': 'closed', 'merged': False, 'created_at': '2023-08-11T22:05:50Z', 'merged_at': '2023-08-11T22:13:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_521,2023-08-11T21:52:26Z,"Removed SingleProcess field from EnvelopeInfo.\n\nThe SingleProcess field was no longer being used. Since this is a change to the deployer API, I also bumped the deployer API version.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/521,"{'number': 521, 'state': 'closed', 'merged': False, 'created_at': '2023-08-11T21:52:26Z', 'merged_at': '2023-08-11T22:03:32Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_520,2023-08-11T20:57:10Z,"Switch to Go 1.21.\n\n* Use the standard library slog, maps, and slices packages.
* Use sync.OnceValue instead of hand-rolling our own wrapper.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/520,"{'number': 520, 'state': 'closed', 'merged': False, 'created_at': '2023-08-11T20:57:10Z', 'merged_at': '2023-08-11T21:50:34Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_519,2023-08-11T18:27:54Z,"Removed onlineboutique from examples/.\n\nOnline Boutique was moved to
https://github.com/ServiceWeaver/onlineboutique/.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/519,"{'number': 519, 'state': 'closed', 'merged': False, 'created_at': '2023-08-11T18:27:54Z', 'merged_at': '2023-08-11T19:07:42Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_516,2023-08-11T16:15:57Z,"Use new slog, slices, maps packages in Go 1.21.\n\nGo 1.21 was just released. This PR replaces our use of exp/slog, exp/slices, and exp/maps with the new log/slog, slices, and maps packages in the standard library.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/516,"{'number': 516, 'state': 'closed', 'merged': False, 'created_at': '2023-08-11T16:15:57Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_515,2023-08-10T18:23:32Z,"Added unit tests for deployers blog.\n\nThis PR adds unit tests for the deployers in the ""How to Implement a Service Weaver Deployer"". Before PR #514, I noticed that the deployers had gotten stale, and some didn't work anymore. This PR adds unit tests to make sure we notice when they break.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/515,"{'number': 515, 'state': 'closed', 'merged': False, 'created_at': '2023-08-10T18:23:32Z', 'merged_at': '2023-08-10T19:34:22Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_514,2023-08-10T17:40:52Z,"Updated deployer blog.\n\nThis PR updates the ""How to Implement a Service Weaver Deployer"" blog post.

- I added the new mTLS EnvelopeHandler methods.
- I updated the HandleTraceSpans signature.
- I replaced ""main"" with runtime.Main.
- I described parsing config files and enabling mTLS.
- I fixed a bug in the pipes deployer.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/514,"{'number': 514, 'state': 'closed', 'merged': False, 'created_at': '2023-08-10T17:40:52Z', 'merged_at': '2023-08-10T19:28:00Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_513,2023-08-10T08:06:53Z,Fix typo on Weavelet\n\n,6a363381c5596ca8,https://github.com/ServiceWeaver/weaver/pull/513,"{'number': 513, 'state': 'closed', 'merged': False, 'created_at': '2023-08-10T08:06:53Z', 'merged_at': '2023-08-10T15:30:33Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_512,2023-08-09T18:53:43Z,"Automatically add trace and span ids to logs.\n\nThis PR adds a `context.Context` argument to `weaver.Implements`' `Logger` method:

```go
Logger(context.Context) *slog.Logger
```

The returned logger automatically adds ""traceid"" and ""spanid"" attributes with any OpenTelemetry trace and span ids present in the provided context.

## Alternatives

`slog.Logger` already has methods that receive a `context.Context` (e.g., [DebugContext][], [InfoContext][], [ErrorContext][]). We could modify the `slog.Handler` in the logger returned by `Logger` to extract trace and span ids from these contexts. However, if a programmer forgets to pass a context, which seems easy to do, the log entries will not have tracing data.

We also considered putting loggers inside of contexts, with a method to extract a logger (and also embed info from the context into the logger), but this [is frowned upon][log_in_ctx].

## Details

I moved the code in `cartservice/store.go` into `cartservice/service.go` to make logging easier. 

[DebugContext]: https://pkg.go.dev/golang.org/x/exp/slog#DebugContext
[InfoContext]: https://pkg.go.dev/golang.org/x/exp/slog#InfoContext
[ErrorContext]: https://pkg.go.dev/golang.org/x/exp/slog#ErrorContext
[log_in_ctx]: https://github.com/golang/go/issues/58243",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/512,"{'number': 512, 'state': 'closed', 'merged': False, 'created_at': '2023-08-09T18:53:43Z', 'merged_at': '2023-08-10T16:26:19Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_511,2023-08-09T18:06:34Z,Add links for more workshops\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/511,"{'number': 511, 'state': 'closed', 'merged': False, 'created_at': '2023-08-09T18:06:34Z', 'merged_at': '2023-08-09T18:16:15Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_510,2023-08-07T22:10:40Z,Add link to the NYC workshop\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/510,"{'number': 510, 'state': 'closed', 'merged': False, 'created_at': '2023-08-07T22:10:40Z', 'merged_at': '2023-08-07T22:17:11Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_507,2023-08-07T17:26:26Z,Announce the upcoming SW workshops\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/507,"{'number': 507, 'state': 'closed', 'merged': False, 'created_at': '2023-08-07T17:26:26Z', 'merged_at': '2023-08-07T17:32:20Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_506,2023-08-07T17:18:03Z,Add registration link for Atlanta workshop\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/506,"{'number': 506, 'state': 'closed', 'merged': False, 'created_at': '2023-08-07T17:18:03Z', 'merged_at': '2023-08-07T17:28:52Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_502,2023-08-04T21:57:45Z,"Fixed small bug in TestRememberDraining.\n\nI noticed that `TestRememberDraining` was flaky. The test closes a client and expects all draining connections to be closed. The test had a race though. We checked that a connection was closed, but didn't wait for the client to finish closing. This PR changes to the test to fully close the client and then test that all its connections are closed.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/502,"{'number': 502, 'state': 'closed', 'merged': False, 'created_at': '2023-08-04T21:57:45Z', 'merged_at': '2023-08-04T22:10:35Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-04. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_501,2023-08-04T21:21:47Z,"Validate listener names at application startup.\n\nThis PR extends the `validateRegistrations` function to also validate listener names when a Service Weaver application begins. As with PR #500, this PR aims to catch permanent and easily avoidable programming errors immediately.

I also fixed a small bug in listener name validation. Previously, if a listener had a `weaver:""""` annotation, it was being ignored. Now, it is being rejected (since `""""` is not a valid listener name).

I also updated the website documentation to describe legal listener names.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/501,"{'number': 501, 'state': 'closed', 'merged': False, 'created_at': '2023-08-04T21:21:47Z', 'merged_at': '2023-08-10T16:40:20Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-04. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_500,2023-08-04T20:42:14Z,"Validate registrations when app is launched.\n\nThis PR introduces a `validateRegistrations` function that checks the validity of component registrations. For now, it simply checks that every `weaver.Ref[T]` field refers to a registered component interface `T`. This mistake is actually quite common, when you add a component and forget to run `weaver generate`.

Before this PR, if a non-main component had a `weaver.Ref[T]` to an unregistered component, the app would run but silently not work. With this change, all weavelets will imediately crash, and for `go run .` and `weaver multi deploy`, the app will terminate immediately with a helpful error message:

```shell
$ weaver multi deploy weaver.toml
start main process: NewEnvelope: connect to weavelet: read protobuf
length: EOF
-----BEGIN STDERR-----
2023/08/04 13:31:50 component implementation struct main.odd has field
weaver.Ref[main.this_is_not_a_registered_component], but component
main.this_is_not_a_registered_component was not registered; maybe you
forgot to run 'weaver generate'

-----END STDERR-----
exit status 1
```

## Alternatives

Srdjan had a great idea of checking the validity of `weaver.Ref[T]`s at compile time, but I couldn't think of any way to do that. If we do think of something, we should switch to it.

I did have one idea that turned out to be terrible. We could require users to embed a special `weaver.Interface` interace into their component interfaces:

```go
// In weaver package.
type Interface interface { isComponentInterface() }
type Ref[T Interface] struct { ... }
type Implements[T Interface] struct { ... }
func (Implements[T]) isComponentInterface()

// In user's code.
type ExampleComponent {
    weaver.Interface
    Foo(context.Context) error
}
```

This is not only ugly and super janky, it also doesn't work. It checks that a `weaver.Ref[T]` refers to a component interface `T`, but it doesn't check that `T` was actually registered.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/500,"{'number': 500, 'state': 'closed', 'merged': False, 'created_at': '2023-08-04T20:42:14Z', 'merged_at': '2023-08-10T15:18:00Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-04. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_499,2023-08-04T16:35:58Z,"Improve call.go logging and errors.\n\n* Pass appropriate details to endCalls for better call failure errors.
* Drop connection and balancer addresses from log messages. These were intended to be temporary debugging aids.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/499,"{'number': 499, 'state': 'closed', 'merged': False, 'created_at': '2023-08-04T16:35:58Z', 'merged_at': '2023-08-04T17:16:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-04. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_498,2023-08-03T17:07:01Z,"Avoid using connections until they are healthy.\n\n* Change Balancer to track the set of healthy connections.
* Added state machine to clientConnection.
* Create clientConnection as soon as a resolver returns an address.
* Do version handshake on connection before adding it to the balancer.
* Removed CallOptions.Balancer (call.Connection now has one balancer).
* Dropped unused Sharded balancer.
* Dropped some obsolete tests.
* Tweaked some tests to account for changed behavior.
* Added deadlines to some tests to make them behave better when things hang due to a bug.
* Undid earlier bad renaming of object to component.
* Split a large test into multiple tests.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/498,"{'number': 498, 'state': 'closed', 'merged': False, 'created_at': '2023-08-03T17:07:01Z', 'merged_at': '2023-08-03T23:29:15Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_497,2023-08-03T16:21:07Z,"Fix race in weavertest multi shutdown.\n\nPreviously, if a remote weavelet paniced, it's exit raced with weavertest cleanup. If the code reading from the remote weavelet detected the broken connection before weavertest got a chance to mark the test as done, we would print an error message and exit the test process. This interacted poorly with the weavertest/internal/generate test that intentionally triggers a panic in a remote component.

We now just log the error and do not exit. Furthermore, the message is written to the system logger, not to stderr, so it is suppressed unless -test.v is supplied.

Made the race more likely to be triggered by putting a short sloop in the test that triggers a remote panic.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/497,"{'number': 497, 'state': 'closed', 'merged': False, 'created_at': '2023-08-03T16:21:07Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_496,2023-08-03T00:15:54Z,"Color log messages based on component.\n\n
Before this PR, log messages were printed white. This PR changes them to show in the same color as the component. I think this makes the logs look uglier, but it is useful to be able to visually track the logs from a particular weavelet or component.

| Before | After |
| - | - |
| ![dimmed](https://github.com/ServiceWeaver/weaver/assets/3654277/751be352-9cbd-4e52-bb51-d7bdc1bb413b) | ![colored](https://github.com/ServiceWeaver/weaver/assets/3654277/de6bc8ec-00d6-47de-a85b-22166a3dcbb2) |
",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/496,"{'number': 496, 'state': 'closed', 'merged': False, 'created_at': '2023-08-03T00:15:54Z', 'merged_at': '2023-08-04T17:48:25Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_495,2023-08-03T00:10:17Z,"Dim attributes in pretty printed logs.\n\nBefore this PR, log attribute names were purple and attribute values were white. This PR dims both a light gray. This draws more attention to the body of the log compared to the attributes.

I think we were also putting way too much stuff in the attributes which was making the logs hard to read. In theory, you can use attributes to query logs, but I don't think we ever did this. And even if we did, the attributes we had were awkward to query.

| Before | After |
| - | - |
| ![not_dimmed](https://github.com/ServiceWeaver/weaver/assets/3654277/44f07fc9-b6cd-4a80-99f2-b7b27da6033b) | ![dimmed](https://github.com/ServiceWeaver/weaver/assets/3654277/73fe89e1-1fb1-4e8f-9c37-739653af4423) |
",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/495,"{'number': 495, 'state': 'closed', 'merged': False, 'created_at': '2023-08-03T00:10:17Z', 'merged_at': '2023-08-04T16:59:37Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_494,2023-08-03T00:01:34Z,"Tidied up remote weavelet logging.\n\nThis PR makes a remote weavelet's logs more readable, which should make it easier to debug stuff when things go wrong. Here are the logs from running collatz with `weaver multi` before and after this change:

## Before

```
D0802 16:56:13.561312 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:660]
┌ weavelet 2c5dc4d9-fcdf-4e89-9ce5-3e1ca7c37b6f started ┐
│   hostname   : mwhittaker.svl.corp.google.com         │
│   deployment : d5763cad-2beb-4447-8dc8-6cc8cae0ca6e   │
│   address    : tcp://127.0.0.1:42005                  │
│   pid        : 2088192                                │
└───────────────────────────────────────────────────────┘ serviceweaver/system=""""
D0802 16:56:13.561375 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:256] Constructing component component=""github.com/ServiceWeaver/weaver/Main"" serviceweaver/system=""""
D0802 16:56:13.561402 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:212] Activating component... component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" serviceweaver/system=""""
D0802 16:56:13.561422 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:404] UpdateComponents components=""[github.com/ServiceWeaver/weaver/Main]"" serviceweaver/system=""""
D0802 16:56:13.579251 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:660]
┌ weavelet ed7f50c3-b6c6-4711-b334-ad4e4e771594 started ┐
│   hostname   : mwhittaker.svl.corp.google.com         │
│   deployment : d5763cad-2beb-4447-8dc8-6cc8cae0ca6e   │
│   address    : tcp://127.0.0.1:36569                  │
│   pid        : 2088207                                │
└───────────────────────────────────────────────────────┘ serviceweaver/system=""""
D0802 16:56:13.579291 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:256] Constructing component component=""github.com/ServiceWeaver/weaver/Main"" serviceweaver/system=""""
D0802 16:56:13.579307 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:212] Activating component... component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" serviceweaver/system=""""
D0802 16:56:13.579371 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:404] UpdateComponents components=""[github.com/ServiceWeaver/weaver/Main]"" serviceweaver/system=""""
D0802 16:56:13.579690 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:431] Updating routing info... component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0802 16:56:13.579801 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:436] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0802 16:56:13.579968 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:431] Updating routing info... component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0802 16:56:13.580068 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:436] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0802 16:56:13.580170 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:431] Updating routing info... component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0802 16:56:13.580196 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:436] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0802 16:56:13.580259 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:431] Updating routing info... component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0802 16:56:13.580275 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:436] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0802 16:56:13.593723 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:431] Updating routing info... component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[tcp://127.0.0.1:38709]"" serviceweaver/system=""""
D0802 16:56:13.593752 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:436] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[tcp://127.0.0.1:38709]"" serviceweaver/system=""""
D0802 16:56:13.593780 weavelet-cc2cc7e1 cc2cc7e1 remoteweavelet.go:660]
┌ weavelet cc2cc7e1-f06f-4b4f-be7b-31a35b4333a5 started ┐
│   hostname   : mwhittaker.svl.corp.google.com         │
│   deployment : d5763cad-2beb-4447-8dc8-6cc8cae0ca6e   │
│   address    : tcp://127.0.0.1:38709                  │
│   pid        : 2088219                                │
└───────────────────────────────────────────────────────┘ serviceweaver/system=""""
D0802 16:56:13.593804 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:431] Updating routing info... component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[tcp://127.0.0.1:38709]"" serviceweaver/system=""""
D0802 16:56:13.593818 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:436] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[tcp://127.0.0.1:38709]"" serviceweaver/system=""""
D0802 16:56:13.594016 weavelet-cc2cc7e1 cc2cc7e1 remoteweavelet.go:404] UpdateComponents components=""[github.com/ServiceWeaver/weaver/examples/collatz/Odd]"" serviceweaver/system=""""
D0802 16:56:13.594110 weavelet-cc2cc7e1 cc2cc7e1 remoteweavelet.go:256] Constructing component component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" serviceweaver/system=""""
D0802 16:56:13.594192 weavelet-cc2cc7e1 cc2cc7e1 remoteweavelet.go:262] Constructing component succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" serviceweaver/system=""""
D0802 16:56:13.610146 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:431] Updating routing info... component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[tcp://127.0.0.1:38709 tcp://127.0.0.1:43275]"" serviceweaver/system=""""
D0802 16:56:13.610176 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:436] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[tcp://127.0.0.1:38709 tcp://127.0.0.1:43275]"" serviceweaver/system=""""
D0802 16:56:13.610195 weavelet-2872bd16 2872bd16 remoteweavelet.go:660]
┌ weavelet 2872bd16-59f3-474c-9792-63657062e127 started ┐
│   hostname   : mwhittaker.svl.corp.google.com         │
│   deployment : d5763cad-2beb-4447-8dc8-6cc8cae0ca6e   │
│   address    : tcp://127.0.0.1:43275                  │
│   pid        : 2088229                                │
└───────────────────────────────────────────────────────┘ serviceweaver/system=""""
D0802 16:56:13.610256 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:431] Updating routing info... component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[tcp://127.0.0.1:38709 tcp://127.0.0.1:43275]"" serviceweaver/system=""""
D0802 16:56:13.610285 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:436] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" local=""false"" replicas=""[tcp://127.0.0.1:38709 tcp://127.0.0.1:43275]"" serviceweaver/system=""""
D0802 16:56:13.610408 weavelet-2872bd16 2872bd16 remoteweavelet.go:404] UpdateComponents components=""[github.com/ServiceWeaver/weaver/examples/collatz/Odd]"" serviceweaver/system=""""
D0802 16:56:13.610473 weavelet-2872bd16 2872bd16 remoteweavelet.go:256] Constructing component component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" serviceweaver/system=""""
D0802 16:56:13.610519 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:224] Activating component succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" serviceweaver/system=""""
D0802 16:56:13.610548 weavelet-2872bd16 2872bd16 remoteweavelet.go:262] Constructing component succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" serviceweaver/system=""""
D0802 16:56:13.610552 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:341] Creating a connection to a remote component... component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" serviceweaver/system=""""
D0802 16:56:13.610587 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:224] Activating component succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" serviceweaver/system=""""
D0802 16:56:13.610629 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:341] Creating a connection to a remote component... component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" serviceweaver/system=""""
D0802 16:56:13.610918 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:355] Creating connection to remote component succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" serviceweaver/system=""""
D0802 16:56:13.610967 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:355] Creating connection to remote component succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Odd"" serviceweaver/system=""""
D0802 16:56:13.610980 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:212] Activating component... component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" serviceweaver/system=""""
D0802 16:56:13.611011 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:212] Activating component... component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" serviceweaver/system=""""
D0802 16:56:13.611185 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:431] Updating routing info... component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0802 16:56:13.611197 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:436] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0802 16:56:13.611289 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:431] Updating routing info... component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0802 16:56:13.611312 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:436] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" local=""false"" replicas=""[]"" serviceweaver/system=""""
D0802 16:56:13.624473 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:431] Updating routing info... component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" local=""false"" replicas=""[tcp://127.0.0.1:41985]"" serviceweaver/system=""""
D0802 16:56:13.624496 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:436] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" local=""false"" replicas=""[tcp://127.0.0.1:41985]"" serviceweaver/system=""""
D0802 16:56:13.624548 weavelet-d57f4f73 d57f4f73 remoteweavelet.go:660]
┌ weavelet d57f4f73-8e16-453d-9340-9dd32ca953c4 started ┐
│   hostname   : mwhittaker.svl.corp.google.com         │
│   deployment : d5763cad-2beb-4447-8dc8-6cc8cae0ca6e   │
│   address    : tcp://127.0.0.1:41985                  │
│   pid        : 2088239                                │
└───────────────────────────────────────────────────────┘ serviceweaver/system=""""
D0802 16:56:13.624657 weavelet-d57f4f73 d57f4f73 remoteweavelet.go:404] UpdateComponents components=""[github.com/ServiceWeaver/weaver/examples/collatz/Even]"" serviceweaver/system=""""
D0802 16:56:13.624791 weavelet-d57f4f73 d57f4f73 remoteweavelet.go:256] Constructing component component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" serviceweaver/system=""""
D0802 16:56:13.624860 weavelet-d57f4f73 d57f4f73 remoteweavelet.go:262] Constructing component succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" serviceweaver/system=""""
D0802 16:56:13.637825 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:431] Updating routing info... component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" local=""false"" replicas=""[tcp://127.0.0.1:41985 tcp://127.0.0.1:33075]"" serviceweaver/system=""""
D0802 16:56:13.637851 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:436] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" local=""false"" replicas=""[tcp://127.0.0.1:41985 tcp://127.0.0.1:33075]"" serviceweaver/system=""""
D0802 16:56:13.637923 weavelet-1b720296 1b720296 remoteweavelet.go:660]
┌ weavelet 1b720296-0843-44c5-aa01-2ef37ad86db5 started ┐
│   hostname   : mwhittaker.svl.corp.google.com         │
│   deployment : d5763cad-2beb-4447-8dc8-6cc8cae0ca6e   │
│   address    : tcp://127.0.0.1:33075                  │
│   pid        : 2088250                                │
└───────────────────────────────────────────────────────┘ serviceweaver/system=""""
D0802 16:56:13.638016 weavelet-1b720296 1b720296 remoteweavelet.go:404] UpdateComponents components=""[github.com/ServiceWeaver/weaver/examples/collatz/Even]"" serviceweaver/system=""""
D0802 16:56:13.638081 weavelet-1b720296 1b720296 remoteweavelet.go:256] Constructing component component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" serviceweaver/system=""""
D0802 16:56:13.638125 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:224] Activating component succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" serviceweaver/system=""""
D0802 16:56:13.638137 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:341] Creating a connection to a remote component... component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" serviceweaver/system=""""
D0802 16:56:13.638139 weavelet-1b720296 1b720296 remoteweavelet.go:262] Constructing component succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" serviceweaver/system=""""
D0802 16:56:13.638154 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:431] Updating routing info... component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" local=""false"" replicas=""[tcp://127.0.0.1:41985 tcp://127.0.0.1:33075]"" serviceweaver/system=""""
D0802 16:56:13.638177 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:436] Updating routing info succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" local=""false"" replicas=""[tcp://127.0.0.1:41985 tcp://127.0.0.1:33075]"" serviceweaver/system=""""
D0802 16:56:13.638265 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:224] Activating component succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" serviceweaver/system=""""
D0802 16:56:13.638285 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:341] Creating a connection to a remote component... component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" serviceweaver/system=""""
D0802 16:56:13.638409 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:355] Creating connection to remote component succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" serviceweaver/system=""""
D0802 16:56:13.638581 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:355] Creating connection to remote component succeeded component=""github.com/ServiceWeaver/weaver/examples/collatz/Even"" serviceweaver/system=""""
I0802 16:56:13.638951 deployer          43f36417 deployer.go:583      ] Proxy listening address=""127.0.0.1:9000"" serviceweaver/system=""""
D0802 16:56:13.639485 weavelet-2c5dc4d9 2c5dc4d9 remoteweavelet.go:262] Constructing component succeeded component=""github.com/ServiceWeaver/weaver/Main"" serviceweaver/system=""""
D0802 16:56:13.639496 weavelet-ed7f50c3 ed7f50c3 remoteweavelet.go:262] Constructing component succeeded component=""github.com/ServiceWeaver/weaver/Main"" serviceweaver/system=""""
D0802 16:56:13.639539 weaver.Main       2c5dc4d9 server.go:38         ] Collatz service available address=""127.0.0.1:9000""
D0802 16:56:13.639551 weaver.Main       ed7f50c3 server.go:38         ] Collatz service available address=""127.0.0.1:9000""
```

## After

```
D0802 16:53:14.632371 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:193] 🧶 weavelet started on tcp://127.0.0.1:35637 serviceweaver/system=""""
D0802 16:53:14.632436 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:258] Constructing component ""weaver.Main"" serviceweaver/system=""""
D0802 16:53:14.632459 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:213] Activating component ""collatz.Odd"" serviceweaver/system=""""
D0802 16:53:14.632677 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:411] Updating components [""weaver.Main""] serviceweaver/system=""""
D0802 16:53:14.649659 weavelet-49acc1ea 49acc1ea remoteweavelet.go:193] 🧶 weavelet started on tcp://127.0.0.1:40899 serviceweaver/system=""""
D0802 16:53:14.649698 weavelet-49acc1ea 49acc1ea remoteweavelet.go:258] Constructing component ""weaver.Main"" serviceweaver/system=""""
D0802 16:53:14.649714 weavelet-49acc1ea 49acc1ea remoteweavelet.go:213] Activating component ""collatz.Odd"" serviceweaver/system=""""
D0802 16:53:14.649864 weavelet-49acc1ea 49acc1ea remoteweavelet.go:411] Updating components [""weaver.Main""] serviceweaver/system=""""
D0802 16:53:14.650283 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:441] Updated routing info for ""collatz.Odd"" to [] serviceweaver/system=""""
D0802 16:53:14.650420 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:441] Updated routing info for ""collatz.Odd"" to [] serviceweaver/system=""""
D0802 16:53:14.665160 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:441] Updated routing info for ""collatz.Odd"" to [tcp://127.0.0.1:39529] serviceweaver/system=""""
D0802 16:53:14.665192 weavelet-3a9dbc81 3a9dbc81 remoteweavelet.go:193] 🧶 weavelet started on tcp://127.0.0.1:39529 serviceweaver/system=""""
D0802 16:53:14.665462 weavelet-3a9dbc81 3a9dbc81 remoteweavelet.go:411] Updating components [""collatz.Odd""] serviceweaver/system=""""
D0802 16:53:14.665491 weavelet-3a9dbc81 3a9dbc81 remoteweavelet.go:258] Constructing component ""collatz.Odd"" serviceweaver/system=""""
D0802 16:53:14.665520 weavelet-3a9dbc81 3a9dbc81 remoteweavelet.go:264] Constructed component ""collatz.Odd"" serviceweaver/system=""""
D0802 16:53:14.665531 weavelet-3a9dbc81 3a9dbc81 remoteweavelet.go:425] Updated components [""collatz.Odd""] serviceweaver/system=""""
D0802 16:53:14.679106 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:441] Updated routing info for ""collatz.Odd"" to [tcp://127.0.0.1:39529 tcp://127.0.0.1:42133] serviceweaver/system=""""
D0802 16:53:14.679157 weavelet-72dea8de 72dea8de remoteweavelet.go:193] 🧶 weavelet started on tcp://127.0.0.1:42133 serviceweaver/system=""""
D0802 16:53:14.679388 weavelet-72dea8de 72dea8de remoteweavelet.go:411] Updating components [""collatz.Odd""] serviceweaver/system=""""
D0802 16:53:14.679404 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:225] Activated component ""collatz.Odd"" serviceweaver/system=""""
D0802 16:53:14.679416 weavelet-72dea8de 72dea8de remoteweavelet.go:258] Constructing component ""collatz.Odd"" serviceweaver/system=""""
D0802 16:53:14.679422 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:343] Connecting to remote component ""collatz.Odd"" serviceweaver/system=""""
D0802 16:53:14.679448 weavelet-72dea8de 72dea8de remoteweavelet.go:264] Constructed component ""collatz.Odd"" serviceweaver/system=""""
D0802 16:53:14.679459 weavelet-72dea8de 72dea8de remoteweavelet.go:425] Updated components [""collatz.Odd""] serviceweaver/system=""""
D0802 16:53:14.679591 weavelet-49acc1ea 49acc1ea remoteweavelet.go:441] Updated routing info for ""collatz.Odd"" to [tcp://127.0.0.1:39529 tcp://127.0.0.1:42133] serviceweaver/system=""""
D0802 16:53:14.679695 weavelet-49acc1ea 49acc1ea remoteweavelet.go:225] Activated component ""collatz.Odd"" serviceweaver/system=""""
D0802 16:53:14.679719 weavelet-49acc1ea 49acc1ea remoteweavelet.go:343] Connecting to remote component ""collatz.Odd"" serviceweaver/system=""""
D0802 16:53:14.679734 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:357] Connected to remote component ""collatz.Odd"" serviceweaver/system=""""
D0802 16:53:14.679778 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:213] Activating component ""collatz.Even"" serviceweaver/system=""""
D0802 16:53:14.679861 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:441] Updated routing info for ""collatz.Even"" to [] serviceweaver/system=""""
D0802 16:53:14.679941 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:441] Updated routing info for ""collatz.Even"" to [] serviceweaver/system=""""
D0802 16:53:14.680031 weavelet-49acc1ea 49acc1ea remoteweavelet.go:357] Connected to remote component ""collatz.Odd"" serviceweaver/system=""""
D0802 16:53:14.680102 weavelet-49acc1ea 49acc1ea remoteweavelet.go:213] Activating component ""collatz.Even"" serviceweaver/system=""""
D0802 16:53:14.693518 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:441] Updated routing info for ""collatz.Even"" to [tcp://127.0.0.1:40197] serviceweaver/system=""""
D0802 16:53:14.693628 weavelet-f21de1e1 f21de1e1 remoteweavelet.go:193] 🧶 weavelet started on tcp://127.0.0.1:40197 serviceweaver/system=""""
D0802 16:53:14.693778 weavelet-f21de1e1 f21de1e1 remoteweavelet.go:411] Updating components [""collatz.Even""] serviceweaver/system=""""
D0802 16:53:14.693796 weavelet-f21de1e1 f21de1e1 remoteweavelet.go:258] Constructing component ""collatz.Even"" serviceweaver/system=""""
D0802 16:53:14.693814 weavelet-f21de1e1 f21de1e1 remoteweavelet.go:264] Constructed component ""collatz.Even"" serviceweaver/system=""""
D0802 16:53:14.693820 weavelet-f21de1e1 f21de1e1 remoteweavelet.go:425] Updated components [""collatz.Even""] serviceweaver/system=""""
D0802 16:53:14.709039 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:441] Updated routing info for ""collatz.Even"" to [tcp://127.0.0.1:40197 tcp://127.0.0.1:37165] serviceweaver/system=""""
D0802 16:53:14.709117 weavelet-4f2338cf 4f2338cf remoteweavelet.go:193] 🧶 weavelet started on tcp://127.0.0.1:37165 serviceweaver/system=""""
D0802 16:53:14.709278 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:225] Activated component ""collatz.Even"" serviceweaver/system=""""
D0802 16:53:14.709289 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:343] Connecting to remote component ""collatz.Even"" serviceweaver/system=""""
D0802 16:53:14.709323 weavelet-49acc1ea 49acc1ea remoteweavelet.go:441] Updated routing info for ""collatz.Even"" to [tcp://127.0.0.1:37165 tcp://127.0.0.1:40197] serviceweaver/system=""""
D0802 16:53:14.709337 weavelet-4f2338cf 4f2338cf remoteweavelet.go:411] Updating components [""collatz.Even""] serviceweaver/system=""""
D0802 16:53:14.709371 weavelet-4f2338cf 4f2338cf remoteweavelet.go:258] Constructing component ""collatz.Even"" serviceweaver/system=""""
D0802 16:53:14.709402 weavelet-4f2338cf 4f2338cf remoteweavelet.go:264] Constructed component ""collatz.Even"" serviceweaver/system=""""
D0802 16:53:14.709407 weavelet-49acc1ea 49acc1ea remoteweavelet.go:225] Activated component ""collatz.Even"" serviceweaver/system=""""
D0802 16:53:14.709413 weavelet-4f2338cf 4f2338cf remoteweavelet.go:425] Updated components [""collatz.Even""] serviceweaver/system=""""
D0802 16:53:14.709422 weavelet-49acc1ea 49acc1ea remoteweavelet.go:343] Connecting to remote component ""collatz.Even"" serviceweaver/system=""""
D0802 16:53:14.709558 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:357] Connected to remote component ""collatz.Even"" serviceweaver/system=""""
D0802 16:53:14.709736 weavelet-49acc1ea 49acc1ea remoteweavelet.go:357] Connected to remote component ""collatz.Even"" serviceweaver/system=""""
I0802 16:53:14.710044 deployer          6e04eb9d deployer.go:583      ] Proxy listening address=""127.0.0.1:9000"" serviceweaver/system=""""
D0802 16:53:14.710210 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:264] Constructed component ""weaver.Main"" serviceweaver/system=""""
D0802 16:53:14.710236 weavelet-49acc1ea 49acc1ea remoteweavelet.go:264] Constructed component ""weaver.Main"" serviceweaver/system=""""
D0802 16:53:14.710251 weaver.Main       ccf6a112 server.go:38         ] Collatz service available address=""127.0.0.1:9000""
D0802 16:53:14.710291 weaver.Main       49acc1ea server.go:38         ] Collatz service available address=""127.0.0.1:9000""
D0802 16:53:14.710295 weavelet-ccf6a112 ccf6a112 remoteweavelet.go:425] Updated components [""weaver.Main""] serviceweaver/system=""""
D0802 16:53:14.710333 weavelet-49acc1ea 49acc1ea remoteweavelet.go:425] Updated components [""weaver.Main""] serviceweaver/system=""""
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/494,"{'number': 494, 'state': 'closed', 'merged': False, 'created_at': '2023-08-03T00:01:34Z', 'merged_at': '2023-08-04T16:32:48Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_493,2023-08-02T22:23:22Z,"Report weavelet stdout/stderr on error.\n\nThis PR is a slight tweak of #447 by @giautm to always report the stdout and stderr from a crashed weavelet, not just on EPIPE or EOF. It also kills and waits for the weavelet subprocess if there's an error during the handshake. See #447 for more context.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/493,"{'number': 493, 'state': 'closed', 'merged': False, 'created_at': '2023-08-02T22:23:22Z', 'merged_at': '2023-08-02T22:40:52Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-02. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_492,2023-08-02T21:23:03Z,Blog post on history of Service Weaver's core API.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/492,"{'number': 492, 'state': 'closed', 'merged': False, 'created_at': '2023-08-02T21:23:03Z', 'merged_at': '2023-08-16T16:19:13Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-08-02. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_485,2023-07-28T23:13:26Z,"Test calls to a mix of healthy and unhealthy backends.\n\nAdded a call test with two backends, one healthy, and one unhealthy. The test currently doesn't work. Some ideas on how to fix things are listed in a comment.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/485,"{'number': 485, 'state': 'closed', 'merged': False, 'created_at': '2023-07-28T23:13:26Z', 'merged_at': '2023-07-31T20:01:39Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_484,2023-07-27T21:46:06Z,"Miscellaneous call cleanups.\n\n- I deleted fileresolver.go. It was unused.
- I fixed a type in balancer.go.
- I removed a stale TODO in call.go.
- I moved the code in constantresolver.go to resolver.go.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/484,"{'number': 484, 'state': 'closed', 'merged': False, 'created_at': '2023-07-27T21:46:06Z', 'merged_at': '2023-07-28T15:58:47Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_483,2023-07-25T16:53:36Z,Bumped to version 0.18.0.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/483,"{'number': 483, 'state': 'closed', 'merged': False, 'created_at': '2023-07-25T16:53:36Z', 'merged_at': '2023-07-25T19:49:32Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_482,2023-07-24T21:33:28Z,"Added bare-bones ""simulator"".\n\nThis PR introduces a skeleton of a determinstic simulator. The simulator constructs a couple of replicas of every registered component. The `weaver.Ref` fields inside the components are instantiated with reflect stubs that, for now, just call the requested method.

The simulator in its current state isn't very useful. In the future, I'll expand the simulator to actually simulate things. I'll also add more comments in the future once we settle on an API. I'm also doing everything in an internal package for now.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/482,"{'number': 482, 'state': 'closed', 'merged': False, 'created_at': '2023-07-24T21:33:28Z', 'merged_at': '2023-08-23T23:22:07Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_481,2023-07-24T21:26:46Z,"Generate reflection-based stubs.\n\n## Background

Recall that `weaver generate` generates two types of stubs for every
component: local stubs and client stubs.

A **local stub** for a component with interface type `T` has type `T`. A
local stub is constructed with an instance of the struct that implements
component `T`. Method calls on the local stub are dispatched directly to
this instance. Here's a simplified example for the `Even` component from
collatz:

```go
type even_local_stub struct {
    impl Even
}

var _ Even = (*even_local_stub)(nil)

func (s even_local_stub) Do(ctx context.Context, a0 int) (r0 int, err error) {
    // Do some metrics and tracing stuff...
    return s.impl.Do(ctx, a0)
}
```

A **client stub** for component `T` also has type `T`, but executes
method calls on `T` as remote procedure calls, serializing arguments and
return values. Again, here's a simplified example for the `Even`
component from collatz:

```go
type even_client_stub struct {
    stub codegen.Stub
}

var _ Even = (*even_client_stub)(nil)

func (s even_client_stub) Do(ctx context.Context, a0 int) (r0 int, err error) {
    // Do some metrics and tracing stuff...

    // Encode arguments.
    enc := codegen.NewEncoder()
    enc.Int(a0)
    var shardKey uint64

    // Call the remote method.
    requestBytes = len(enc.Data())
    var results []byte
    results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
    replyBytes = len(results)
    if err != nil {
        err = errors.Join(weaver.RemoteCallError, err)
        return
    }

    // Decode the results.
    dec := codegen.NewDecoder(results)
    r0 = dec.Int()
    err = dec.Error()
    return
}
```

## Reflection Stubs

This PR introduces a new reflection-based stub called a **reflect stub**. A reflect stub for component `T` executes method calls on `T` by dispatching to generic caller function that receives the method call's arguments and returns as `any`s. Again, here's `Even`:

```go
type even_reflect_stub struct {
    caller func(string, context.Context, []any, []any) error
}

var _ Even = (*even_reflect_stub)(nil)

func (s even_reflect_stub) Do(ctx context.Context, a0 int) (r0 int, err error) {
    err = s.caller(""Do"", ctx, []any{a0}, []any{&r0})
    return
}
```

## Motivation

I introduced reflect stubs to implement [deterministic
simulation][testing_doc] of Service Weaver apps. A simulator has to
intercept every method call, pausing its execution until a later time.
Reflect stubs make this possible.

The team had discussed offline the possibility of using client stubs to
implement a simulator rather than introducing a whole new kind of stub.
The idea was to inject a fake RPC client into the client stub that
allowed the simulator to interpose.

I played with this idea for a bit, but ran into a challenge. The method
call arguments provided to the fake RPC client are already encoded into
a `[]byte`, meaning that the simulator cannot see what they are. When
reporting an execution history to the user, the simulator needs to
include the values of these arguments in order for the user to
understand what happened. I couldn't think of a way to get around this
without using reflection.

[testing_doc]: https://github.com/ServiceWeaver/weaver/blob/3cb82f53ee959c6c7bbcef50d6b202c3e1d7394f/docs/randomized_testing.md
",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/481,"{'number': 481, 'state': 'closed', 'merged': False, 'created_at': '2023-07-24T21:26:46Z', 'merged_at': '2023-08-17T16:25:37Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_479,2023-07-21T22:32:17Z,add partners on our workshops page\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/479,"{'number': 479, 'state': 'closed', 'merged': False, 'created_at': '2023-07-21T22:32:17Z', 'merged_at': '2023-07-21T23:01:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_478,2023-07-20T20:19:05Z,"Display Perfetto UI from JavaScript.\n\nThis fixes the issue where the Perfetto server has to run on port 9001 and serve traces on the ""/"" path.

Now, the dashboard serves traces on its local server. This simplifies trace serving and allows multiple
dashboard commands to serve traces independently.

Other changes:
  * Moved the perfetto code into a separate runtime package.

[cast2.webm](https://github.com/ServiceWeaver/weaver/assets/5449850/ced37aae-83e3-4054-ba65-c949a3f37e0c)
",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/478,"{'number': 478, 'state': 'closed', 'merged': False, 'created_at': '2023-07-20T20:19:05Z', 'merged_at': '2023-07-24T17:34:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_477,2023-07-20T00:45:47Z,"Example image name for kube to collatz\n\nI find it confusing to run the kube deployer, given that we don't have an example on how to set the image name, unless we run `weaver kube deploy -h`.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/477,"{'number': 477, 'state': 'closed', 'merged': False, 'created_at': '2023-07-20T00:45:47Z', 'merged_at': '2023-07-20T16:47:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_476,2023-07-19T23:36:10Z,"Updated all deps with ""go get -u"".\n\n",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/476,"{'number': 476, 'state': 'closed', 'merged': False, 'created_at': '2023-07-19T23:36:10Z', 'merged_at': '2023-07-19T23:45:36Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_475,2023-07-19T21:01:53Z,"Moved WeaveletHandler to Serve method.\n\nThis PR moves the WeaveletHandler argument from the NewWeaveletConn constructor to the Serve method. This avoids an awkwardness we used to have where a handler was passed to NewWeaveletConn, but the handler itself needed the returned conn.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/475,"{'number': 475, 'state': 'closed', 'merged': False, 'created_at': '2023-07-19T21:01:53Z', 'merged_at': '2023-07-20T21:20:37Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_474,2023-07-19T20:20:19Z,"Removed dependency on token package.\n\nThis PR replaces token.IsIdentifier with a custom implementation to remove the dependency on the token package.

Note that this PR now allows listener names to be go keywords, but I think that's okay. I don't think we intended to disallow these names in the first place.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/474,"{'number': 474, 'state': 'closed', 'merged': False, 'created_at': '2023-07-19T20:20:19Z', 'merged_at': '2023-07-19T21:38:50Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_473,2023-07-19T19:16:48Z,"Slightly simplified how components are filled.\n\nThis PR replaces weaver.IsImplements, weaver.IsRef, and weaver.IsListener with weaver.SetLogger, weaver.FillRefs, and weaver.FillListeners.

weaver.SetLogger is able to set the logger of a weaver.Implements without having to use reflection. For this to work, the function must be in the root weaver package.

weaver.FillListeners is a slightly simplified version of the existing FillListeners function. It checks if a field is a Listener by comparing to the Listener type directly. It also sets the listener and proxy address by casting directly to a *Listener. This function doesn't have to be in the root weaver package, but it can't be in the internal weaver package because of a cyclic dependency.

weaver.FillRefs is pretty much unmodified from the existing FillRefs function, but I moved it into the root weaver package to sit next to SetLogger and FillListeners.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/473,"{'number': 473, 'state': 'closed', 'merged': False, 'created_at': '2023-07-19T19:16:48Z', 'merged_at': '2023-07-19T20:11:12Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_472,2023-07-19T17:37:10Z,"Rename the runtime perfetto/ package into traces/.\n\nSome deployers may wish to use the trace database without relying on the Perfetto UI.

Other changes:
  * Move the ReadSpan into the traces/ package, as we now send the proto across the wire, and some deployers (e.g,. GKE, Kube) will want to convert back to the OTel ReadOnlySpan format.
  * Move the perfetto UI code into a separate file.
  * Minor cleanups.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/472,"{'number': 472, 'state': 'closed', 'merged': False, 'created_at': '2023-07-19T17:37:10Z', 'merged_at': '2023-07-19T17:59:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_471,2023-07-19T17:34:29Z,"Script to print API changes between two source code versions.\n\nExample: `dev/apidiff --from=07e8338^ --to=07e8338`

```
.
        Compatible changes:
        - Implements[T].Logger: added
./metrics
./runtime
./runtime/codegen
./runtime/colors
./runtime/envelope
./runtime/logging
./runtime/metrics
./runtime/perfetto
./runtime/profiling
./runtime/prometheus
./runtime/protomsg
./runtime/protos
./runtime/retry
./runtime/tool
./runtime/version
./weavertest
```",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/471,"{'number': 471, 'state': 'closed', 'merged': False, 'created_at': '2023-07-19T17:34:29Z', 'merged_at': '2023-07-19T20:09:39Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_470,2023-07-19T16:47:41Z,Added missing attributes to json logs.\n\n@ryan961 pointed out in #468 that the json formatted logs produced by `weaver multi logs` are missing attributes. This PR fixes that bug and adds them.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/470,"{'number': 470, 'state': 'closed', 'merged': False, 'created_at': '2023-07-19T16:47:41Z', 'merged_at': '2023-07-19T16:55:30Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_466,2023-07-18T23:20:36Z,"Split the weavelet in two.\n\nBefore this PR, we had a weavelet that was used by all the deployers. This made the weavelet code a bit hard to follow. I would say 75% of the weavelet code only ran in multiprocess mode (e.g., setting up internal listeners, updating routing info, setting up mTLS), but some bits of code only ran in single process mode. The control flow of this code was also dictated by a combination of a `Bootstrap` struct passed via a `context.Context`, some environment variables, and the `Env` interface (which was only partially implemented in the single process case).

This PR splits the weavelet in two. First, I introduce a new `Weavelet` interface that borrows from the old `private.App` interface:

```go
type Weavelet interface {
    GetIntf(t reflect.Type) (any, error)
    GetImpl(t reflect.Type) (any, error)
}
```

Conceptually, a `Weavelet` is something that hosts components, and it provides an API to get a handle to these components.

Next, I introduce a `SingleWeavelet` implementation that is used by `go run .` and `weaver single deploy` and a `RemoteWeavelet` implementation that is used by all other deployers.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/466,"{'number': 466, 'state': 'closed', 'merged': False, 'created_at': '2023-07-18T23:20:36Z', 'merged_at': '2023-07-19T18:26:47Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_465,2023-07-18T21:28:34Z,"Add a time-based trigger to delete trace entries older than 30 days.\n\nThis will help keep the size of the trace table in check.

NOTE: an earlier iteration of this change used to accept the time horizon value (i.e., 30 days) as an option. However, since the database can be shared across multiple clients with potentially different options, there is no way to guarantee that the time horizon value will be respected across the clients. For this reason, we hard-code a reasonable value for the time horizon of 30 days, at least for now.

Performance neutral (at least when no deletions are happening).

Before:
BenchmarkStore/1-72  	     100	  10824509 ns/op
BenchmarkStore/10-72 	     100	  11441102 ns/op
BenchmarkStore/100-72         	      91	  13537496 ns/op

After:
BenchmarkStore/1-72  	     100	  10735265 ns/op
BenchmarkStore/10-72 	     100	  11530419 ns/op
BenchmarkStore/100-72         	      93	  14008470 ns/op

Other changes:
  * Delete the attributes table as it is currently unused.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/465,"{'number': 465, 'state': 'closed', 'merged': False, 'created_at': '2023-07-18T21:28:34Z', 'merged_at': '2023-07-18T23:06:38Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_464,2023-07-18T16:54:32Z,"Bucketize traces and allow querying for errors.\n\nThis allows the users to more quickly zoom in on interesting traces (e.g., slow traces, traces with errors).

[cast.webm](https://github.com/ServiceWeaver/weaver/assets/5449850/ceabd287-db3f-42f5-9cf5-90221b987986)
",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/464,"{'number': 464, 'state': 'closed', 'merged': False, 'created_at': '2023-07-18T16:54:32Z', 'merged_at': '2023-07-18T20:51:00Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_462,2023-07-18T16:37:11Z,add workshops dates in nordic countries\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/462,"{'number': 462, 'state': 'closed', 'merged': False, 'created_at': '2023-07-18T16:37:11Z', 'merged_at': '2023-07-18T16:45:48Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_461,2023-07-18T16:26:51Z,"Moved most of weaver code to internal package.\n\nThis PR moves the majority of the code in the `weaver` package into a newly created `internal/weaver` package.

Recall that weavertests run full Service Weaver applications with a couple of small tweaks. For example, a weavertest can provide a set of fake component implementations that replace the real implementations.

Before this PR, there was a bit of awkwardness between the weaver package and the weavertest package. Because the main weaver package is public, it cannot export any functions that might be useful to the weavertest package. To solve this, we did a couple of hacks. First, we pass some arguments to a weavelet via a context. Second, we had a `private` package that acted as an intermediary. To avoid cyclic dependencies, this `private` package used `any` liberally and relied on the callers of the package to cast to the appropriate types.

This PR is the first step in resolving the awkwardness. By moving most of the weaver code into an internal package, we can export functions useful to weavertest. This PR deletes the `private` package entirely.

In future PRs, I think we can continue to clean up the APIs. This PR tries to make as few changes as possible.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/461,"{'number': 461, 'state': 'closed', 'merged': False, 'created_at': '2023-07-18T16:26:51Z', 'merged_at': '2023-07-18T23:14:16Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_460,2023-07-17T21:29:47Z,"Use a small traces table for querying.\n\nSuggested by @ghemawat.

The traces table now contains only the information requied for querying. The new format is more space efficient and leads to faster querying.

Also, insert all trace data into the database in a single transaction, as it is significantly  more efficient:

Before:
cpu: Intel(R) Xeon(R) Gold 6154 CPU @ 3.00GHz
BenchmarkStore
BenchmarkStore/1
BenchmarkStore/1-72  	     100	  10763759 ns/op
BenchmarkStore/10
BenchmarkStore/10-72 	      10	 108713097 ns/op
BenchmarkStore/100
BenchmarkStore/100-72         	       1	1055861276 ns/op

After:
BenchmarkStore
BenchmarkStore/1
BenchmarkStore/1-72  	     100	  10609201 ns/op
BenchmarkStore/10
BenchmarkStore/10-72 	     100	  10700368 ns/op
BenchmarkStore/100
BenchmarkStore/100-72         	      96	  13052743 ns/op",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/460,"{'number': 460, 'state': 'closed', 'merged': False, 'created_at': '2023-07-17T21:29:47Z', 'merged_at': '2023-07-17T22:06:38Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_459,2023-07-14T18:04:19Z,"Store trace spans in a relational DB format.\n\nThis format allows for traces to be queries. Here are the changes to the trace storage format:
  * Traces are stored in encoded proto format. This format is more efficient than the earlier Perfetto JSON format.
  * Some trace fields are also available as table columns, for fast query matching.
  * Traces are converted to the Perfetto JSON format during trace retrieval and display.

As discussed offline with sanjay@, traces are no longer displayed in Perfetto in bulk. Instead, each trace has a separate link and the Perfetto UI always displays a single trace. This makes it easier to visualize individual trace executions, as they are no longer interleaved on the same timeline.

Other changes:
  * Fold Span proto messages into the `Span` type, as their names are quite generic (e.g., `Attribute`).
  * Pass trace data between weavelet and envelope in Proto format, since the Proto format can be efficiently serialized, if needed. (The OTel format doesn't support efficient serialization.)
  * Minor code re-organization.

[Service Weaver Tracing.webm](https://github.com/ServiceWeaver/weaver/assets/5449850/95493490-fe2b-45b8-89b0-27ec327cecf7)
",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/459,"{'number': 459, 'state': 'closed', 'merged': False, 'created_at': '2023-07-14T18:04:19Z', 'merged_at': '2023-07-17T19:16:10Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_458,2023-07-13T22:40:12Z,"Preserve serializable custom errors from remote method calls.\n\nThe code generator emits code to keep track of all error types that contain an embedded weaver.AutoMarshal in a global table.  The sender sends such errors by prefixing their serialization with they corresponding key in the global table. The receiver looks up the key in its global table, creates a value of the correct type, and deserializes the error contents into that value.

This allows custom errors to be returned from remote methods without losing type information.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/458,"{'number': 458, 'state': 'closed', 'merged': False, 'created_at': '2023-07-13T22:40:12Z', 'merged_at': '2023-07-14T23:42:26Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_457,2023-07-13T21:37:25Z,Allow registered serializable types to be pointers.\n\nRemove type constraint from RegisterSerializable[T] and instead check at runtime that either T or *T implements AutoMarshal.,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/457,"{'number': 457, 'state': 'closed', 'merged': False, 'created_at': '2023-07-13T21:37:25Z', 'merged_at': '2023-07-18T21:18:48Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_456,2023-07-13T17:59:38Z,"Support for returning custom errors from remote calls.\n\nError types that implement WeaverMarshal/WeaverUnmarshal and are registered by calling codegen.RegisterSerializable[T] are now serialized properly when returned from remote calls instead of being emulated by their Error() strings.

A future change will change the code generator to automatically call RegisterSerializable for structs that embed weaver.AutoMarshal.

Also handle errors that wrap multiple errors by sending the entire tree instead of just the single error chain we used to send.

Compatibility note: the format for sending errors has changed.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/456,"{'number': 456, 'state': 'closed', 'merged': False, 'created_at': '2023-07-13T17:59:38Z', 'merged_at': '2023-07-13T20:42:09Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_455,2023-07-12T21:38:48Z,"Removed unused weaver.Instance type.\n\nThis PR removes the unused `weaver.Instance` type. I believe that `weaver.Instance` became obsolete when we introduced `weaver.InstanceOf[T]`.

Note that onlineboutique was using `weaver.Instance`, but not in a meaningful way.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/455,"{'number': 455, 'state': 'closed', 'merged': False, 'created_at': '2023-07-12T21:38:48Z', 'merged_at': '2023-07-18T16:19:47Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_453,2023-07-12T15:04:17Z,Add a test for time-based trace sampler.\n\n,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/453,"{'number': 453, 'state': 'closed', 'merged': False, 'created_at': '2023-07-12T15:04:17Z', 'merged_at': '2023-07-12T16:59:28Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_452,2023-07-11T22:32:40Z,Make method metrics objects private.\n\nThere is no reason for method metric objects to show up in the codegen API. We do export the names of these objects since status/dashboard code uses these names to extract metric values.,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/452,"{'number': 452, 'state': 'closed', 'merged': False, 'created_at': '2023-07-11T22:32:40Z', 'merged_at': '2023-07-12T17:07:16Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_450,2023-07-11T15:58:48Z,"Automatically sample traces in InstrumentHandler.\n\nThis makes for a good default behavior of some tracing always enabled ""by default"", i.e., when the recommended `InstrumentHandler` is used.

Users that wish to enable tracing manually can still do so.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/450,"{'number': 450, 'state': 'closed', 'merged': False, 'created_at': '2023-07-11T15:58:48Z', 'merged_at': '2023-07-12T14:42:37Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_449,2023-07-11T00:34:38Z,Added design doc on randomized testing.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/449,"{'number': 449, 'state': 'closed', 'merged': False, 'created_at': '2023-07-11T00:34:38Z', 'merged_at': '2023-07-18T16:13:08Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_447,2023-07-09T16:24:29Z,"runtime/envelope: report the error from weavelet\n\nBefore this change, the error from `NewEnvelope` look like bellow, which isn't helpful to debug why the progress crash.

```
read protobuf length: EOF
```
or
```
write protobuf length: write |1: broken pipe
```

I ran into real case that caused by invalid `GLIBC`, and the process already print the error like below but I can't see it in output of container.
```
/lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.32' not found (required by /weaver/collatz)
```",fb0ad65cff225c99,https://github.com/ServiceWeaver/weaver/pull/447,"{'number': 447, 'state': 'closed', 'merged': False, 'created_at': '2023-07-09T16:24:29Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_446,2023-07-07T18:08:26Z,"Implemented very rough prototype of simulator.\n\nThe Service Weaver team has been discussing more sophisticated ways of testing Service Weaver apps. This PR implements a very rough prototype of an idea I had. The prototype is stand-alone and does not depend on the rest of the weaver code at all. I also don't intend for the prototype to ever be merged in. I wrote it to further my understanding of the idea, to prove to myself it was possible to implement something like this, and to identify the design decisions that come up.

## Overview

The main idea of the prototype is to deterministically simulate the execution of a distributed program with injected failures and complex interleavings. To implement this, whenever a component calls a method on another component, execution is halted and returned to a central simulator. The simulator then picks the next action to take. Specifically, the simulator can do one of the following.

1. Spawn a brand new operation.
2. Deliver a pending method call.
3. Deliver a pending method return.

A more feature complete simulator could also return a failure to a pending method call, induce a network partition, etc.

This is similar to [deterministic simulation][1] and a bit like [TLA+ model checking][2]. It is also similar to [something I implemented in grad school][3] to test and visualize distributed algorithms. For that, when control is returned to the central simulator, the user can pick the next action via a web UI.

## Details

I plan on writing a design doc that details this approach to testing as well as alternatives.

[1]: https://asatarin.github.io/testing-distributed-systems/#deterministic-simulation
[2]: https://asatarin.github.io/testing-distributed-systems/#tla
[3]: https://mwhittaker.github.io/frankenpaxos",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/446,"{'number': 446, 'state': 'closed', 'merged': False, 'created_at': '2023-07-07T18:08:26Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_445,2023-07-06T20:23:13Z,Rename Metric.Init to Metric.initIdAndLabel.\n\nClarify via a comment and a more appropriate method name as to why we defer initialization of metric id and labels.,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/445,"{'number': 445, 'state': 'closed', 'merged': False, 'created_at': '2023-07-06T20:23:13Z', 'merged_at': '2023-07-06T20:36:13Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_444,2023-07-05T18:27:29Z,"Fixed bug in metric version management.\n\nPrevious change forgot to update Metric.version on an Inc() call. Fixed by removing Metric.version and using the actual metric value to decide whether or not to export the metric.

Histograms gain a special putCount field that is used to determine whether or not to export since the histogram state does not fit into a single floating point value.

Further speed-up of local call metric maintenance: we now convert to microseconds once after finding the elapsed duration, instead of twice (once on the starting time, and once on the ending time).  This speeds up a local call from ~96ns to ~85ns.

Added test that Inc() call is reflected in subsequent export.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/444,"{'number': 444, 'state': 'closed', 'merged': False, 'created_at': '2023-07-05T18:27:29Z', 'merged_at': '2023-07-05T19:28:22Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_443,2023-07-04T15:22:23Z,Add registration links for the workshops in London and Paris\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/443,"{'number': 443, 'state': 'closed', 'merged': False, 'created_at': '2023-07-04T15:22:23Z', 'merged_at': '2023-07-05T16:22:40Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-04. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_442,2023-07-01T02:11:39Z,"Add post Berlin, Zurich workshops news\n\n",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/442,"{'number': 442, 'state': 'closed', 'merged': False, 'created_at': '2023-07-01T02:11:39Z', 'merged_at': '2023-07-05T16:23:01Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-07-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_440,2023-06-30T22:08:24Z,"Speed-up metric maintenance for component method calls.\n\n```
name           old time/op  new time/op  delta
Call/Local-12   119ns ± 2%    96ns ± 1%  -19.32%  (p=0.008 n=5+5)
```

Removed the use of expvar in Metrics implementation. We are mostly doing this so that we can drop the promise that Service Weaver metrics are reflected in expvars. That frees us to speed things up by using a better representation.

Introduced an atomicFloat64 value so we can atomically add a float64. (This functionality was previously provided by expvar.)

Atomic storage for all metrics (though used just for counters) is now split into a float64 and a uint64. Integer increments are applied to the uint64 so we can avoid a more expensive compare-and-swap. The stored values are added together on a read. Doubles counter metric increment speed (from ~9.2ns to ~4.1ns).

Add a fast-path for histogram updates for small values by avoiding binary search.

Add a fast-path for histogram updates of zero by avoiding an atomic add.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/440,"{'number': 440, 'state': 'closed', 'merged': False, 'created_at': '2023-06-30T22:08:24Z', 'merged_at': '2023-07-05T17:30:33Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-06-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_439,2023-06-30T21:11:03Z,Implement time-based trace DB compaction using a trigger.\n\n,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/439,"{'number': 439, 'state': 'closed', 'merged': False, 'created_at': '2023-06-30T21:11:03Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-06-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_438,2023-06-30T20:53:48Z,"Ported Bank of Anthos.\n\nThis PR adds @nipun-sehrawat's port of Bank of Anthos to Service Weaver. I updated the port to work with the latest version of Service Weaver and added a README with some instructions, but otherwise didn't change much.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/438,"{'number': 438, 'state': 'closed', 'merged': False, 'created_at': '2023-06-30T20:53:48Z', 'merged_at': '2023-10-02T16:57:38Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-06-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_437,2023-06-30T17:29:32Z,"Introduce a size limit to the Perfetto database.\n\nIf the trace data exceeds this limit, we garbage-collect the oldest
trace entry.
    
DB size is computed using the database file size (thanks sanjay@),
in order to be able to compute the size efficiently.
    
When the DB limit is reached, the trace store operation takes 2x time
(but not more than that).
    
    ```
    cpu: Intel(R) Xeon(R) Gold 6154 CPU @ 3.00GHz
    BenchmarkStore
    BenchmarkStore/nolimit_small
    BenchmarkStore/nolimit_small-72                      100          10830029 ns/op
    BenchmarkStore/limit_small
    BenchmarkStore/limit_small-72                         54          21509631 ns/op
    BenchmarkStore/nolimit_medium
    BenchmarkStore/nolimit_medium-72                     100          10694646 ns/op
    BenchmarkStore/limit_medium
    BenchmarkStore/limit_medium-72                        54          22720641 ns/op
    BenchmarkStore/nolimit_big
    BenchmarkStore/nolimit_big-72                        100          11460602 ns/op
    BenchmarkStore/limit_big
    BenchmarkStore/limit_big-72                           54          21542238 ns/op
    ```
    
NOTE:
We tried the trigger-based mechanism (thanks mwhittaker@ !) but the complex
SQL logic expressed in the trigger was way too expensive to perform on
every insertion.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/437,"{'number': 437, 'state': 'closed', 'merged': False, 'created_at': '2023-06-30T17:29:32Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-06-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_436,2023-06-30T16:44:47Z,"Documented the use of `toml:""name""` tags.\n\nFixes #433.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/436,"{'number': 436, 'state': 'closed', 'merged': False, 'created_at': '2023-06-30T16:44:47Z', 'merged_at': '2023-07-05T17:03:07Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",plateau,unknown,unclear,"Temporal: plateau based on 2023-06-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_432,2023-06-29T21:27:42Z,"Improved deployer version mismatch error.\n\nRecall that when a deployer deploys a binary, it first extracts the deployer API version from the binary and checks that its deployer API version is compatible. Before this PR, the resulting error message looked like this:

```
version mismatch: deployer's deployer API version v0.17.0 is
incompatible with app' deployer API version v0.14.0
```

Now, it looks like this:

```
ERROR: The binary you're trying to deploy (""collatz"") was built with
github.com/ServiceWeaver/weaver module version v0.18.0. However, the 'weaver 
multi' binary you're using was built with weaver module version v0.17.0. 
These versions are incompatible.

We recommend updating both the weaver module your application is built with and
updating the 'weaver multi' command by running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-build your code and re-run 'weaver multi deploy'. If the problem
persists, please file an issue at https://github.com/ServiceWeaver/weaver/issues.
```

This PR also makes the multi and ssh deployers check these versions earlier, before trying to deploy anything.

See #431 for a similar PR.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/432,"{'number': 432, 'state': 'closed', 'merged': False, 'created_at': '2023-06-29T21:27:42Z', 'merged_at': '2023-07-05T17:18:56Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-29. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_431,2023-06-29T19:55:18Z,"Expanded codegen version mismatch error.\n\nRecall that `weaver generate` embeds its codegen API version in the `weaver_gen.go` files it generates. If these files are compiled with a different codegen API version, the code fails to build, and a helpful error message is shown to the user. Before this PR, the error message looked like this:

```
You used 'weaver generate' codegen version 0.17.0, but you built your
code with an incompatible weaver module version. Try upgrading 'weaver
generate' and re-running it.
```

Now, it looks like this:

```
ERROR: You generated this file with 'weaver generate' v0.17.0 (codegen
version v0.17.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.
```

The old error message allowed people to ask us for help, and we could tell them how to fix it. The new error message should hopefully allow people to understand and fix the bug on their own.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/431,"{'number': 431, 'state': 'closed', 'merged': False, 'created_at': '2023-06-29T19:55:18Z', 'merged_at': '2023-07-05T17:10:58Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-29. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_430,2023-06-29T17:18:43Z,"Added example and documentation of fakes.\n\nIn Issue #419, @Markbnak pointed out that our documentation on fakes is a little lacking. I agree. This PR adds a simple example of faking and adds documentation to the website on faking.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/430,"{'number': 430, 'state': 'closed', 'merged': False, 'created_at': '2023-06-29T17:18:43Z', 'merged_at': '2023-07-05T16:55:04Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-29. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_429,2023-06-28T23:09:31Z,"Restore metric collection for local calls.\n\nWe had previously restricted metric collection to just remote calls for performance reasons. We now collect metrics for local calls as well since it was problematic to hide things like call counts for local calls.

This has a performance impact: on a typical machine, a local call slows down by ~100ns. By comparison, a local call slows down by 1000ns when tracing is enabled for that call.  Future changes will attempt to speed up metric collection (we hope we can drop the penalty by 10x).

Changes the method metric names from ""serviceweaver_remote_*"" to ""serviceweaver_*"".

Include whether or not a call is remote in the metric label.

Updated the codegen metric collection API. Mainly, the responsibility for updating metrics is now in the codegen package as opposed to scattered throughout generated code.

Not updating the codegen version number since we have alread updated it since the last tagged release.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/429,"{'number': 429, 'state': 'closed', 'merged': False, 'created_at': '2023-06-28T23:09:31Z', 'merged_at': '2023-06-29T15:53:15Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_428,2023-06-28T18:06:52Z,Added test to check forgotten deployer API updates\n\nThis PR adds a test that fails when you forget to update the deployer API version. See PR #427 for more context.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/428,"{'number': 428, 'state': 'closed', 'merged': False, 'created_at': '2023-06-28T18:06:52Z', 'merged_at': '2023-06-28T22:34:36Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_427,2023-06-28T17:54:04Z,"Added test to check forgotten codegen updates.\n\nIn PR #388, we changed `weaver generate` to embed listener information in compiled Service Weaver binaries. This change landed in v0.15.0. However, we forgot to update the codegen version. This led to the following bug, reported by @renanbastos93 in the Discord:

- Run `weaver generate` at version v0.14.0.
- Run `go run .` at version v0.16.1.
- The app crashes looking for listener information in the binary, but the information is not there because of the stale `weaver generate`.

If we had updated the codegen version, then the code would not have compiled, and the user would have received an error message explaining that they needed to update `weaver generate`.

It's really easy to forget to update the codegen version, so I added a unit test that checks for changes to how `weaver_gen.go` files are generated. If there is any change, the test fails and you're prompted to update the codegen version.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/427,"{'number': 427, 'state': 'closed', 'merged': False, 'created_at': '2023-06-28T17:54:04Z', 'merged_at': '2023-06-28T18:13:18Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_426,2023-06-28T17:23:20Z,"Check for locked database when writing to perfetto db.\n\nPreviously we would see an infrequent error message saying the database was locked. This was due to a missing isLocked check on the path that attempts to assign a replica number to the current weavelet. Fixed by retrying on a locking error.

Also improved a corresponding error message.

Added a benchmark for calling component methods when tracing is turned on. (This benchmark is what would trigger the preceding issue.)",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/426,"{'number': 426, 'state': 'closed', 'merged': False, 'created_at': '2023-06-28T17:23:20Z', 'merged_at': '2023-06-28T19:09:37Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_425,2023-06-28T12:48:04Z,Add post HotOS news\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/425,"{'number': 425, 'state': 'closed', 'merged': False, 'created_at': '2023-06-28T12:48:04Z', 'merged_at': '2023-06-28T16:35:35Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_424,2023-06-28T11:50:50Z,Fix check open write handle in pipe tests\n\n,6a363381c5596ca8,https://github.com/ServiceWeaver/weaver/pull/424,"{'number': 424, 'state': 'closed', 'merged': False, 'created_at': '2023-06-28T11:50:50Z', 'merged_at': '2023-06-28T16:50:22Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_423,2023-06-28T05:07:25Z,"Added metrics, profile, purge status cmd to ssh\n\nI have limited understanding of the codebase, however, this does seem to work.

There are a few styling issues that annoyed me but I decided not to work on those so as to not take the focus away from what this PR does. The issues being
1. multi defines all the spec within multi.go while ssh does not
2. multi uses function in [deploy.go](https://github.com/ServiceWeaver/weaver/blob/f8bf9ff2ebe4da7d89094b66208b240f60f1eaa1/internal/tool/multi/deploy.go#L183) for registry while ssh uses function declared in [impl/manager.go](https://github.com/ServiceWeaver/weaver/blob/f8bf9ff2ebe4da7d89094b66208b240f60f1eaa1/internal/tool/ssh/impl/manager.go#L691) for registry
3. There is an impl folder in ssh but not in multi
4. There seem to be no tests for ssh

Apart from these, there is no documentation for ssh.

I am not sure if above (except documentation) is by design or just due to how fast things are getting implemented. If its the latter, then perhaps I (or someone else) can start working on these)",7ee0a7a3069403fd,https://github.com/ServiceWeaver/weaver/pull/423,"{'number': 423, 'state': 'closed', 'merged': False, 'created_at': '2023-06-28T05:07:25Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_422,2023-06-27T23:56:23Z,"Fixed main-only bug in multi deployer.\n\nBefore this PR, if you tried to `weaver multi deploy` a Service Weaver application that only had a main component, it would error out immediately with a ""github.com/ServiceWeaver/weaver/Main not found"".

Here's what was happening. `weaver multi deploy` read the component callgraph from the application binary to know which components existed. Reading the callgraph returns the edges in the graph. However, for an application with only a main component, there are no edges. Thus, `weaver multi deploy` erroneously concluded that there are no components.

This PR makes a dirt simple fix. We may want to revise the callgraph API to return nodes and edges in a future PR to make this problem harder to run into?

Also, sadly, applications that exit from main still exhibit odd behavior when deployed with `weaver multi deploy`. The hello world application added in this PR for example, doesn't print anything. I believe we aren't waiting to flush all messages over the pipe, but I'll have to debug further in a future PR.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/422,"{'number': 422, 'state': 'closed', 'merged': False, 'created_at': '2023-06-27T23:56:23Z', 'merged_at': '2023-06-28T23:38:09Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_421,2023-06-27T22:41:37Z,"Added hardcoded weaver module version.\n\n## Module Version

We want a `weaver version` command that prints out the weaver module version the `weaver` binary was built with, or failing that, the commit at which the binary was built. Unfortunately, both of these things are hard.

There is currently no nice way to automatically get the version of the main module in a go program [1]. There is a way to get the git commit using `debug.ReadBuildInfo()` [2], but when `go install`ing a binary, the version control information is stripped.

Browsing existing open source projects, it seems the standard practice is to hard code the module version in the code. This PR does that and updates the `weaver version` command to use it:

```
$ weaver version
weaver v0.17.0 linux/amd64
```

## Other Versions

The weaver repo has two other versioned APIs: the deployer API version and the codegen version. Currently, the deployer API version is the latest module version where the deployer API changed (and the same for the codegen version).

We discussed offline the idea of replacing the three versions (module, deployer API, codegen) with just the module version. Then, we could write additional code to check version compatibility. Is codegen v0.17.3 incompatible with v0.12.0, for example?

When trying to implement this, however, I ran into some problems. For example, let's say a deployer is at version v0.10.0 and tries to deploy an app at version v0.12.0. Is deployer API version v0.12.0 compatible with version v0.10.0? Well, the deployer was written before v0.12.0 was even created, so it doesn't have a good way to know.

The codegen version is also tricky because it relies on some compiler tricks to prevent an app from compiling if it has code generated with a stale version of `weaver generate`. I'm not sure how to implement these tricks without hardcoding a codegen version.

Because of these challenges, I decided to stick with our current approach to versioning, for now at least. To clean things up a bit though, I moved all versioning related code to `runtime/version.go`. I also moved some code to the `bin` package because it felt more appropriate there. I also moved `runtime/tool/version.go` to `internal/tool/version.go` because it shouldn't be used outside the module.

[1]: https://github.com/golang/go/issues/29228
[2]: https://pkg.go.dev/runtime/debug#ReadBuildInfo",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/421,"{'number': 421, 'state': 'closed', 'merged': False, 'created_at': '2023-06-27T22:41:37Z', 'merged_at': '2023-06-28T22:46:24Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_420,2023-06-27T19:23:01Z,Fix metrics benchmark measurement of Bytes stats maintenance.\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/420,"{'number': 420, 'state': 'closed', 'merged': False, 'created_at': '2023-06-27T19:23:01Z', 'merged_at': '2023-06-27T19:41:24Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_418,2023-06-26T23:59:27Z,"Added listener names to Registration.\n\nThis PR changes the generator to include listener names in `codegen.Registration`s. It also changes the singleprocess deployer to use these registered listeners, rather than the listeners embedded in a binary, when validating the listeners specified in a config file. See PR #413 for more information.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/418,"{'number': 418, 'state': 'closed', 'merged': False, 'created_at': '2023-06-26T23:59:27Z', 'merged_at': '2023-06-27T21:16:32Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-26. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_417,2023-06-26T20:25:36Z,Added workshop links to website.\n\nLet me know if we should emphasize the workshop links even more.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/417,"{'number': 417, 'state': 'closed', 'merged': False, 'created_at': '2023-06-26T20:25:36Z', 'merged_at': '2023-06-27T00:02:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-26. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_416,2023-06-26T04:52:40Z,Fix a preposition in the documentation regarding components.\n\n,2b4d856c38c81748,https://github.com/ServiceWeaver/weaver/pull/416,"{'number': 416, 'state': 'closed', 'merged': False, 'created_at': '2023-06-26T04:52:40Z', 'merged_at': '2023-06-26T17:31:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-26. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_415,2023-06-25T21:40:44Z,Fix weaver generate process when routing key of Router component is a struct\n\nMore details in https://github.com/ServiceWeaver/weaver/issues/414 issue.,32205b0053c46c59,https://github.com/ServiceWeaver/weaver/pull/415,"{'number': 415, 'state': 'closed', 'merged': False, 'created_at': '2023-06-25T21:40:44Z', 'merged_at': '2023-06-27T19:32:48Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_413,2023-06-24T00:04:22Z,Fixed singleprocess listener bug.\n\n`SERVICEWEAVER_CONFIG=<config> go run` was broken because it was trying to parse listeners from the binary in the config file rather than from itself.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/413,"{'number': 413, 'state': 'closed', 'merged': False, 'created_at': '2023-06-24T00:04:22Z', 'merged_at': '2023-06-24T00:09:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_412,2023-06-23T21:41:11Z,"Move ""DO NOT EDIT"" line before package clause.\n\nFixes #411.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/412,"{'number': 412, 'state': 'closed', 'merged': False, 'created_at': '2023-06-23T21:41:11Z', 'merged_at': '2023-06-27T00:02:19Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_410,2023-06-21T04:54:47Z,"Fix invalid permissions\n\nThe website deployment action has been failing lately. Looking at the issue, it seems to be related to https://github.com/actions/deploy-pages/issues/188 that is due to https://github.com/actions/upload-pages-artifact#file-permissions.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/410,"{'number': 410, 'state': 'closed', 'merged': False, 'created_at': '2023-06-21T04:54:47Z', 'merged_at': '2023-06-21T19:29:35Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_409,2023-06-20T21:00:25Z,"Removed Main; changed weaver.Run to take lambda.\n\nThis PR reverts #359. In particular, it removes the main component's Main method and changes `weaver.Run` to take a lambda.

We made this change for the following reason. The Main method is run by `weaver.Run`, but not by `weavertest.Runner.Test`. We felt this was confusing. With the lambda API, it is much clearer what is run. This change also unifies the `weaver.Run` and `weavertest.Runner.Test` API. Both take a lambda with component arguments.

Right now, the signature of `weaver.Run` is a bit gnarly. I think I can simplify it a bit in a future PR to remove PointerToMain at least.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/409,"{'number': 409, 'state': 'closed', 'merged': False, 'created_at': '2023-06-20T21:00:25Z', 'merged_at': '2023-06-21T18:38:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_408,2023-06-20T18:57:06Z,"Fix the reading of the SSH config.\n\nIn particular, read the config once and with all the right fields specified.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/408,"{'number': 408, 'state': 'closed', 'merged': False, 'created_at': '2023-06-20T18:57:06Z', 'merged_at': '2023-06-20T20:14:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_406,2023-06-20T16:42:14Z,"Let weavertest test component implementations.\n\nBefore this PR, you could use a weavertest.Runner to test a set of component interfaces:

```go
runniner.Test(t, func(t *testing.T, a A, b B, c C) {
    ...
})
```

This PR extends the API to allow for testing of component implementations. Assuming `a`, `b`, and `c` are the implementing structs of component interfaces `A`, `B`, and `C`, we can now write:

```go
runniner.Test(t, func(t *testing.T, a *a, b *b, c *c) {
    ...
})
```

You can also combine interfaces and implementations:

```go
runniner.Test(t, func(t *testing.T, a *a, b B, c1 *c, c2 *c, cIntf C) {
    ...
})
```

You can also combine this with fakes. All possible combinations of interfaces, implementation pointers, and fakes are allowed with one exception. A fake and implementation pointer cannot be provided for the same component.

This functionality is useful for clearbox testing of components. It is also useful for testing the main HTTP handling code associated with the main component, as demonstrated in `examples/chat/server_test.go`.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/406,"{'number': 406, 'state': 'closed', 'merged': False, 'created_at': '2023-06-20T16:42:14Z', 'merged_at': '2023-06-21T18:31:21Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_405,2023-06-20T16:41:57Z,"Don't automatically run Main from weavertests.\n\n## Overview

In #359, we changed weavertest to automatically run the main component's Main method for every test. This was done to allow a developer to test the server they started in the Main method.

However, we realized that this approach of automatically running the Main method has some drawbacks. Because the Main method is run for every test, if you do anything in the Main method that cannot be run more than once, the tests will fail. For example, if you register a handler with the default serve mux using `http.HandleFunc`, all tests after the first will panic.

After some offline discussion, we decided not to run the Main method automatically. Additionally, we'll allow people to get pointers to component implementations in a test. Then, developers can test the guts of their Main method using existing things like the httptest package. This PR changes weavertest to not run the Main method automatically. In a future CL, I'll allow developers to get pointers to component implementations.

## Details

- I removed `weavertest.GetListenerAddress`. It will no longer be needed.
- I removed the `apps` variable from the `weavertest` package. It was only needed to implement `GetListenerAddress`.
- I removed `testMainInterface` from the `weavertest` package. I think this was some stale code lingering around from an earlier implementation of `weavertest`.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/405,"{'number': 405, 'state': 'closed', 'merged': False, 'created_at': '2023-06-20T16:41:57Z', 'merged_at': '2023-06-21T18:22:39Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_404,2023-06-20T16:31:33Z,"Small tweaks to the listener configuration.\n\nNamely:
  * Listener names are case sensitive.
  * Deployers validate listener names in the config.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/404,"{'number': 404, 'state': 'closed', 'merged': False, 'created_at': '2023-06-20T16:31:33Z', 'merged_at': '2023-06-20T18:50:32Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_402,2023-06-15T23:59:30Z,Added example live demo links.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/402,"{'number': 402, 'state': 'closed', 'merged': False, 'created_at': '2023-06-15T23:59:30Z', 'merged_at': '2023-06-16T18:10:13Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_401,2023-06-15T20:26:46Z,"Added `weaver callgraph` command.\n\nThis PR introduces a `weaver callgraph` command that outputs a [Mermaid][] diagram of the component call graph. I also updated every example's README with its callgraph diagram. See https://github.com/ServiceWeaver/weaver/blob/callgraph/examples/onlineboutique/README.md for an example.

[Mermaid]: https://mermaid.js.org/syntax/flowchart.html",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/401,"{'number': 401, 'state': 'closed', 'merged': False, 'created_at': '2023-06-15T20:26:46Z', 'merged_at': '2023-06-27T00:22:10Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_400,2023-06-15T18:08:27Z,"Small example fixes.\n\n1. I added factors and onlineboutique to `examples_test.go`. Adding chat is hard because it requires a mysql database.
2. I made all examples `log.Fatal` the error returned by `weaver.Run`. Before, there was a mix of doing nothing, using `log.Fatal`, and writing to `os.Stderr`.
3. Quiet `examples_test.go` when -v isn't provided.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/400,"{'number': 400, 'state': 'closed', 'merged': False, 'created_at': '2023-06-15T18:08:27Z', 'merged_at': '2023-06-15T20:29:14Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_399,2023-06-15T17:25:19Z,"Fixed buggy `weaver version` output.\n\n`weaver version` is supposed to print out the weaver module version, something like:

```
$ weaver version
weaver v0.15.0
```

Previously, we used [`runtime.ReadBuildInfo`][ReadBuildInfo] to read the version of the main module. However, I realized that this version was always the string `(devel)`. At first, I thought the version was `(devel)` when on a non-tagged commit, but later realized that it is literally always `(devel)`: https://github.com/golang/go/issues/29228.

I did some Googling to figure out how to print out the current module version, but it seems impossible? This PR gives up and sticks with showing the git commit. It's not as clear, but you can look up the commit in the repo history to find the module version.

@spetrovic77, I think this discovery might mean that https://github.com/ServiceWeaver/weaver-gke/pull/68 is a little buggy?

[ReadBuildInfo]: https://pkg.go.dev/runtime/debug#ReadBuildInfo",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/399,"{'number': 399, 'state': 'closed', 'merged': False, 'created_at': '2023-06-15T17:25:19Z', 'merged_at': '2023-06-23T18:26:54Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_398,2023-06-14T23:56:04Z,"Document listener tags earlier.\n\nI was updating the workshop and felt like it was good to explain listener tags early, as sometimes the natural name of the listener doesn't make a lot of sense as a field name.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/398,"{'number': 398, 'state': 'closed', 'merged': False, 'created_at': '2023-06-14T23:56:04Z', 'merged_at': '2023-06-15T16:51:42Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_397,2023-06-14T21:33:00Z,Add TechSummit SF news\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/397,"{'number': 397, 'state': 'closed', 'merged': False, 'created_at': '2023-06-14T21:33:00Z', 'merged_at': '2023-06-14T22:08:31Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_396,2023-06-14T18:00:01Z,"Prepare the examples for the upcoming GKE/kube config changes.\n\nIn particular, we are changing how listener options are specified.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/396,"{'number': 396, 'state': 'closed', 'merged': False, 'created_at': '2023-06-14T18:00:01Z', 'merged_at': '2023-06-14T22:36:33Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_395,2023-06-14T17:41:21Z,"Added examples page to site.\n\n[Examples Page.webm](https://github.com/ServiceWeaver/weaver/assets/3654277/5a979732-aec3-4df1-b024-ff93ea913caf)

I'll work on adding live demos for emoji and online boutique. I'll also work on moving bank of anthos over.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/395,"{'number': 395, 'state': 'closed', 'merged': False, 'created_at': '2023-06-14T17:41:21Z', 'merged_at': '2023-06-15T17:00:17Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_394,2023-06-14T01:16:07Z,"Modify the listener format for local listeners.\n\nThis fixes the weirdness of the ""local_address"" field, which is only used by multi/single/ssh deployers, but not others (e.g., GKE, kube). The plan is to move the listener options into the deployer config sections, since they are largely different.

Based on discussions with @rgrandl and @mwhittaker.

Other changes:
* Simplify the parsing of the listener config, by reading into a `map[string]ListenerOptions`. This obviates the need for using the `toml.Primitive` type.

TODO: Change the format of the GKE/kube deployers to be similar.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/394,"{'number': 394, 'state': 'closed', 'merged': False, 'created_at': '2023-06-14T01:16:07Z', 'merged_at': '2023-06-14T17:05:52Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_393,2023-06-13T22:34:45Z,"Fixed onlineboutique bug.\n\nBecause the main component was a in a non-main package but not referenced from the main package, it was not linked. We're working on a better fix for this problem, but this PR fixes online boutique in the short term.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/393,"{'number': 393, 'state': 'closed', 'merged': False, 'created_at': '2023-06-13T22:34:45Z', 'merged_at': '2023-06-15T16:45:59Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_392,2023-06-13T20:49:43Z,"Fixed buggy timezones for dates on news page.\n\nThe dates in news.html were being rendered one day in the past. Turns out this is due to [""a historical spec error""][dates]. `new Date('2023-06-14')`, for example, is interpreted in UTC, not the local timezone. I switched to a different date constructor that uses the local timezone.

[dates]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/392,"{'number': 392, 'state': 'closed', 'merged': False, 'created_at': '2023-06-13T20:49:43Z', 'merged_at': '2023-06-13T21:02:00Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_390,2023-06-13T01:01:30Z,"Address review comments from @mwhittaker.\n\nNamely:
  * Use reflect.StructTag(tag).Lookup().
  * Support `x, y weaver.Listener` declaration.
  * Validate tag names.
  * Allow listener name to be any valid Go identifier when decoding from the binary data.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/390,"{'number': 390, 'state': 'closed', 'merged': False, 'created_at': '2023-06-13T01:01:30Z', 'merged_at': '2023-06-13T16:54:52Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_389,2023-06-12T23:13:35Z,"Add reference/example to the kube deployer\n\nAdd reference to the `kube` deployer.
Add `[kube]` config in the collatz app, to be able to run it using the `kube` deployer.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/389,"{'number': 389, 'state': 'closed', 'merged': False, 'created_at': '2023-06-12T23:13:35Z', 'merged_at': '2023-06-12T23:51:27Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_388,2023-06-12T21:08:39Z,Encode listeners as strings inside the application binary.\n\nThis will allow deployers to extract the list of listeners and the associated component from the binary without running it This method is similar to our existing encoding of component graph edges.,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/388,"{'number': 388, 'state': 'closed', 'merged': False, 'created_at': '2023-06-12T21:08:39Z', 'merged_at': '2023-06-12T21:25:17Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_387,2023-06-12T15:49:00Z,"Fixed broken build constraints in weaver_gen.go.\n\nImagine you're writing a Service Weaver program with the following code:

```go
type Pair struct {
    weaver.AutoMarshal
    x int
    y int
}
```

You run `weaver generate` and `go build`, and everything works fine. Then, you delete the `y` field and try to `go build`. This fails because the `weaver_gen.go` file is out of sync with the source code. The code in `weaver_gen.go`, for example, could be trying to serialize the `y` field, but the field doesn't exist anymore.

To fix this, You have to re-run `weaver generate` first. For this reason, it is critical that `weaver generate` ignore the contents of `weaver_gen.go` files. Otherwise, `weaver generate` would also error out, and you'd have to delete your `weaver_gen.go` files every time you made a change to your source code.

Nipun fixed this problem in #261 by using [build constraints][bc]. `weaver_gen.go` files are not built when the `ignoreWeaverGen` tag is present, and `weaver generate` includes this tag. However, in #383, @songsy13 pointed out that this code wasn't working.

After some debugging, I realized it was the simple mistake of misformating the build constraint comments as `// go:build` instead of `//go:build` (note the extra space after the `//`). I'm very surprised we hadn't noticed this earlier!

Fixes #383 

[bc]: https://pkg.go.dev/cmd/go#hdr-Build_constraints",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/387,"{'number': 387, 'state': 'closed', 'merged': False, 'created_at': '2023-06-12T15:49:00Z', 'merged_at': '2023-06-12T18:48:11Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_386,2023-06-09T23:45:03Z,"Remove versioning checks in multi/ssh deployers\n\nNote that we do these checks when we create an envelope, hence these checks are stale.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/386,"{'number': 386, 'state': 'closed', 'merged': False, 'created_at': '2023-06-09T23:45:03Z', 'merged_at': '2023-06-12T16:27:46Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_385,2023-06-09T21:29:41Z,"Added `weaver completion` bash completion command.\n\nThis PR introduces a `weaver completion` command that spits out a bash completion script that enables tab completion for the weaver command. For example:

```bash
$ weaver <tab><tab>
generate   gke        gke-local  multi      single     ssh        version
$ weaver single <tab><tab>
dashboard  deploy     help       metrics    profile    purge      status     version
$ weaver single p<tab><tab>
profile  purge
```

To enable the tab completion, you run `source <(weaver completion)`. This mirrors [`kubectl completion bash`][3]. Source the file in your `~/.bashrc` if you always want it to be enabled.

I added `weaver completion` selfishly, as I thought it was useful. If others find it useful, we can advertise it to users. There is a bit of overhead in updating it whenever commands change, and the gke commands could be stale, so it would require work to be more robust. Also happy to leave this out of the repo and have it privately for myself.

[3]: https://kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-autocomplete",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/385,"{'number': 385, 'state': 'closed', 'merged': False, 'created_at': '2023-06-09T21:29:41Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_384,2023-06-09T20:03:23Z,Bumped to version 0.14.0.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/384,"{'number': 384, 'state': 'closed', 'merged': False, 'created_at': '2023-06-09T20:03:23Z', 'merged_at': '2023-06-09T20:11:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_382,2023-06-09T04:32:26Z,"Add more workshops, and the Google I/O Extended talk\n\n",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/382,"{'number': 382, 'state': 'closed', 'merged': False, 'created_at': '2023-06-09T04:32:26Z', 'merged_at': '2023-06-09T16:18:46Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_380,2023-06-08T23:27:49Z,"Declare listeners as fields in the component implementation.\n\nThis will allow us to build a static map of component -> listeners, which a deployer may read from a binary to initialize the listeners ahead of time (e.g., a Kube deployer).

Other changes:
  * Listeners are customized in the application config file.
  * The weavelet no longer knows about listener options.
  * Slight simplifying changes to the envelope protocol.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/380,"{'number': 380, 'state': 'closed', 'merged': False, 'created_at': '2023-06-08T23:27:49Z', 'merged_at': '2023-06-12T17:18:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_379,2023-06-08T19:18:59Z,"Move prometheus files to runtime\n\nIn the current implementation, we are using prometheus to export metrics from the single/multi/ssh deployer, which are part of the weaver repo.

However, in the upcoming kubernetes deployer (that's in a different repo), we will rely on prometheus to export the metrics as well. However, we can't (shouldn't) depend on internal files from /weaver.

Given that the prometheus metric translator will be used in other repos, we should move it to runtime/prometheus (we already have runtime/perfetto).",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/379,"{'number': 379, 'state': 'closed', 'merged': False, 'created_at': '2023-06-08T19:18:59Z', 'merged_at': '2023-06-09T16:52:38Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_378,2023-06-07T21:53:56Z,Add instrumentation scope to the read span\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/378,"{'number': 378, 'state': 'closed', 'merged': False, 'created_at': '2023-06-07T21:53:56Z', 'merged_at': '2023-06-08T00:01:20Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_377,2023-06-07T11:20:53Z,Check database/sql Rows.err().\n\n`Rows.next()` returns false if there is no next result row or an error happened while preparing it. So we need to check it.,6f7dafd7ed8b6a0c,https://github.com/ServiceWeaver/weaver/pull/377,"{'number': 377, 'state': 'closed', 'merged': False, 'created_at': '2023-06-07T11:20:53Z', 'merged_at': '2023-06-07T15:21:53Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_376,2023-06-06T16:14:31Z,"Add a test for the examples\n\nThis PR was originally written by @dnephin in https://github.com/ServiceWeaver/weaver/pull/287. The tests were
working locally but not on GitHub Actions. After some debugging, I found
that running subcommands using ""sh -c"" was causing things to hang. I
still have no idea why that is, but things are working now :)

I also tweaked logger_test.go because it was printing a lot (and I mean
a LOT) of stuff. When debugging on GitHub Actions, these logs were very
annoying.

Original commit messages from @dnephin:

> This commit adds a test case for running each of the examples as both a
> single deploy and multi-deploy. This test should ensure that the
> examples are always in a working state, and provide some end-to-end
> coverage of the single and multi deployers.
>
> It also provides some test coverage of the integration of codegen with a
> real application.
>
> Register signal handler before listening
>
> TestExamples only waits for a listener to be listening and handling HTTP
> requests.
>
> The signal handler must be registered before the listener is started,
> otherwise a test waiting on the listener could send a SIGTERM before
> the signal handler is registered.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/376,"{'number': 376, 'state': 'closed', 'merged': False, 'created_at': '2023-06-06T16:14:31Z', 'merged_at': '2023-06-09T17:12:52Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_373,2023-06-01T22:42:07Z,"Only push website changes when a tag is created.\n\nBefore this PR, every commit merged into main would trigger an update to our public website. This meant that the docs would reference code that wasn't yet merged into a stable release. This led to a lot of confusion as people tried to follow along with the docs, but nothing worked.

This PR changes the GitHub Action to only update the website when we make a new tag for a release. You can also manually trigger the action if you want. In the future, we should consider versioning our documentation and allowing people to view old versions?

Related to #369.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/373,"{'number': 373, 'state': 'closed', 'merged': False, 'created_at': '2023-06-01T22:42:07Z', 'merged_at': '2023-06-02T17:00:20Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_372,2023-06-01T22:28:55Z,"Fixed args + env bug in ""weaver single deploy"".\n\nThis PR fixes two bugs. First, `weaver single deploy <config>` was not actually passing the config file to the underlying Service Weaver app, completely defeating the purpose of the command (d'oh). Second, I was incorrectly passing arguments using `Cmd.Args` instead of `exec.Command`.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/372,"{'number': 372, 'state': 'closed', 'merged': False, 'created_at': '2023-06-01T22:28:55Z', 'merged_at': '2023-06-01T22:38:35Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_371,2023-06-01T21:12:39Z,Propagate the internal listener port\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/371,"{'number': 371, 'state': 'closed', 'merged': False, 'created_at': '2023-06-01T21:12:39Z', 'merged_at': '2023-06-01T22:26:14Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_370,2023-06-01T16:03:13Z,Add reflection.Type[T]() helper and use it.\n\nPreviously we would have to write complicated code to get the reflect.Type for an interface since an interface cannot have a concrete value and therefore reflect.TypeOf() did not work. Encapsulated this logic into a single generic function.,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/370,"{'number': 370, 'state': 'closed', 'merged': False, 'created_at': '2023-06-01T16:03:13Z', 'merged_at': '2023-06-01T16:36:34Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-06-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_367,2023-05-31T22:20:53Z,"Add test for examples/chat server.\n\nAdded a way for tests to get the host:port for a listener.

Reduce weavertest time spent waiting for weaver.Main.Main to exit to make tests run faster.

Run weaver.Main Init before starting test code.

Added examples/chat/server_test.go.

Allow chat server to accept GET requests for new threads and posts (for testing purposes).",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/367,"{'number': 367, 'state': 'closed', 'merged': False, 'created_at': '2023-05-31T22:20:53Z', 'merged_at': '2023-06-01T15:34:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-31. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_366,2023-05-31T08:51:54Z,"Made a gramatical correction to the March 1 Blog Post\n\nPlease I made a grammatical correction to the ""A Quick Introduction to Service Weaver"" blog post on march 1st. ",18c89c20cf63c950,https://github.com/ServiceWeaver/weaver/pull/366,"{'number': 366, 'state': 'closed', 'merged': False, 'created_at': '2023-05-31T08:51:54Z', 'merged_at': '2023-05-31T16:32:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-31. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_365,2023-05-30T21:17:13Z,"Revamped 'weaver version' commands.\n\n```console
$ weaver version
weaver 0.13.0
target: linux/amd64
commit: ea2a43e272d709a8e6d866d3dbc456885a5f55af
deployer API: 0.13.0
codegen API: 0.11.0
```

This PR does three things:

1. It adds the module version and codegen API version to the output of the weaver version commands.
2. It reformats the output of the weaver version commands to be multiple lines instead of one.
3. It adds a 'weaver version' command (fixes #360).",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/365,"{'number': 365, 'state': 'closed', 'merged': False, 'created_at': '2023-05-30T21:17:13Z', 'merged_at': '2023-06-02T17:49:44Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_364,2023-05-30T20:54:07Z,"Added test to catch incorrect version updates.\n\nRecall that we hardcode the deployer API version into every weaver application binary. The hardcoded string is called version. Additionally, we have constants for the Major, Minor, and Patch of the deployer API version. These two need to stay in sync, but because version has to be hardcoded, there is no way to programmatically keep them in sync. This makes it easy to change Major, Minor, and Patch but forget to update version. This PR adds a unit test that fails if you forget to change version.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/364,"{'number': 364, 'state': 'closed', 'merged': False, 'created_at': '2023-05-30T20:54:07Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_363,2023-05-30T20:47:32Z,"Miscellanous cleanups.\n\nThis PR makes two small cleanups I encountered. First, I deleted a big stale comment in weavelet.go. Second, I fixed an error log in call.go that was always printing, regardless of whether there was actually an error.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/363,"{'number': 363, 'state': 'closed', 'merged': False, 'created_at': '2023-05-30T20:47:32Z', 'merged_at': '2023-05-31T16:00:58Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_362,2023-05-30T20:35:34Z,"Fixed bug in logic deciding when to run main.\n\nPreviously, a weavelet decided to run the main component's Main method if it had a registered main component that was marked local. This worked for the single process deployers but broke all other deployers. For weavelets not started in singleprocess mode, the weavelet receives an explicit `RunMain` field in `EnvelopeOptions` that signals it to start running main.

This bug also re-emphasizes the importance of tests that automatically run all the deployers. I'll prioritize this and finish up PR #287.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/362,"{'number': 362, 'state': 'closed', 'merged': False, 'created_at': '2023-05-30T20:35:34Z', 'merged_at': '2023-05-30T20:44:45Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_361,2023-05-30T18:29:05Z,"Added ""weaver single deploy <config>"" command.\n\nThis PR introduces a `weaver single deploy <config>` command that acts like `go run .` The new command has two benefits. First, it makes the weaver tool's UI more uniform, as there's already a `weaver multi deploy`, `weaver ssh deploy`, etc. Second, it makes it easier to provide config files to single process deployments. Previously, you had to use the `SERVICEWEAVER_CONFIG` environment variable, which was unergonomic and easy to forget.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/361,"{'number': 361, 'state': 'closed', 'merged': False, 'created_at': '2023-05-30T18:29:05Z', 'merged_at': '2023-05-31T16:08:07Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_359,2023-05-26T22:35:05Z,"Move app initialization code to a weaver.Main method.\n\nPreviously, application startup code was wrapped up in a function passed to weaver.Run. However this made it hard to test startup code. We now have a `Main` method in `weaver.Main` and place the startup code in the implementation of this method.

Refactored startup the internal API used by weavertest to separate out starting the application from running its startup code.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/359,"{'number': 359, 'state': 'closed', 'merged': False, 'created_at': '2023-05-26T22:35:05Z', 'merged_at': '2023-05-30T19:27:40Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-26. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_358,2023-05-25T22:27:49Z,"Remove local_address from GetListenerAddressRequest\n\nWhen the weavelet sends a `GetListenerRequest` to the deployer, it also propagates the local address. However, the local address is not used by any deployer on this path. I found passing local address on `GetListenerRequest` very confusing, but then I realized that this field is never used.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/358,"{'number': 358, 'state': 'closed', 'merged': False, 'created_at': '2023-05-25T22:27:49Z', 'merged_at': '2023-05-30T20:09:11Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_357,2023-05-25T20:39:43Z,"weavertest now supports fake component implementations.\n\nSome of the components in a Service Weaver application can now be replaced with fake test-specific implementations when using weavertest. The test code registers a set of such fake implementations with weavertest.Runner. When the test runs, the real component implementations are replaced by the supplied fakes.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/357,"{'number': 357, 'state': 'closed', 'merged': False, 'created_at': '2023-05-25T20:39:43Z', 'merged_at': '2023-05-25T21:54:02Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_356,2023-05-25T18:03:40Z,Make weavertest.Runner fields public and drop chained setters.\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/356,"{'number': 356, 'state': 'closed', 'merged': False, 'created_at': '2023-05-25T18:03:40Z', 'merged_at': '2023-05-25T18:17:26Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_354,2023-05-24T20:41:07Z,"Fold sub-test creation into weavertest.\n\nPreviously, we required users to use a double-lambda: one to get a sub-test per Runner, and another to pass as the weaver test body to weavertest.Run. We now make weavertest responsible for creating the sub-test. This simplifies application code from two nested lambdas to a single lambda.

Split weavertest.Run() into weavertest.Test() and weavertest.Bench(), which gives us better type-checking.

Dropped TestFailer from diverge_test.go since we no longer have a way to catch component initialization erorrs (they cause a testing.T.Fatal error).",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/354,"{'number': 354, 'state': 'closed', 'merged': False, 'created_at': '2023-05-24T20:41:07Z', 'merged_at': '2023-05-24T21:12:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_353,2023-05-23T21:23:20Z,"Fixed single process pretty printer bug.\n\nThis PR fixes a bug where the single process deployer was using a separate pretty printer for every component. This leads to bad highlighting and tabularization. Now, every component shares a pretty printer.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/353,"{'number': 353, 'state': 'closed', 'merged': False, 'created_at': '2023-05-23T21:23:20Z', 'merged_at': '2023-05-31T15:54:33Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_352,2023-05-19T17:50:08Z,Add DevOps Pro Europe news\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/352,"{'number': 352, 'state': 'closed', 'merged': False, 'created_at': '2023-05-19T17:50:08Z', 'merged_at': '2023-05-22T16:56:55Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_351,2023-05-19T11:23:22Z,"Change component interface name separator character to slash on Windows.\n\n`\` character is the path separator on Windows. This is different from the `/` separator on Linux. The component `Name` and `RefData` generated by `weaver generate` on Windows will have `\`, not `/`. Such as `github.com\ServiceWeaver\weaver\Main`. It will cause two problems:
1. differenet from runtime.Main
 ```go
// Main is the name of the main component.
const Main = ""github.com/ServiceWeaver/weaver/Main""
 ```
2. `ExtractEdges` cannot match refData containing `\` characters, because the regexp only matches `/`. 

If deploy by weaver multi, it will fali. See issue:https://github.com/ServiceWeaver/weaver/issues/350",6f7dafd7ed8b6a0c,https://github.com/ServiceWeaver/weaver/pull/351,"{'number': 351, 'state': 'closed', 'merged': False, 'created_at': '2023-05-19T11:23:22Z', 'merged_at': '2023-05-23T16:27:09Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_349,2023-05-18T21:17:34Z,Nit edits to blog posts\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/349,"{'number': 349, 'state': 'closed', 'merged': False, 'created_at': '2023-05-18T21:17:34Z', 'merged_at': '2023-05-18T21:46:39Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_347,2023-05-18T00:44:32Z,"Request fresh certificates on every connection establishment.\n\nThis is required as certificates in general have a short validity and typically get rotated. Previously, we would pass the certificate to the weavelet and use it indefinitely. We now request a new (i.e., latest) certificate from the weavelet each time a connection is established, ensuring that the freshest certificate is always used.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/347,"{'number': 347, 'state': 'closed', 'merged': False, 'created_at': '2023-05-18T00:44:32Z', 'merged_at': '2023-05-18T17:07:51Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_346,2023-05-17T21:34:32Z,"Bump to v0.11.0.\n\nv0.11.0 introduces the following changes:

- A new weavertest API (#340, #344).
- ""weaver generate"" now generates code that will not build if you make critical changes to your app but forget to re-run ""weaver generate"" (#337, #338, #339, #343).
- Small changes to the logging.TestLogger API (#330).

It also includes the following bug fixes.

- weavertest now works correctly with benchmarks (*testing.B).
- weavertest repsects the -test.v flag.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/346,"{'number': 346, 'state': 'closed', 'merged': False, 'created_at': '2023-05-17T21:34:32Z', 'merged_at': '2023-05-17T21:46:23Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_345,2023-05-17T20:58:50Z,"Small cleanups of ""weaver generate"" checks.\n\nThis PR changes the interface checks generated by `weaver generate` from

```go
var _ Fooer = &foo{}
```

to

```go
var _ Fooer = (*foo)(nil)
```

Practically, I don't think it makes a big difference, but in theory if `foo` is something like the following, instantiating a `foo` could be expensive.

```go
type foo struct { big [1000000000]byte }
```

I also added unit tests for the various `weaver generate` staleness checks generated by `weaver generate`.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/345,"{'number': 345, 'state': 'closed', 'merged': False, 'created_at': '2023-05-17T20:58:50Z', 'merged_at': '2023-05-18T16:58:46Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_344,2023-05-17T19:27:39Z,"Fold weavertest Mode and Options into a single Runner object.\n\nPreviously, the user would type something like:

```
weavertest.Run(t, weavertest.Local, weavertest.Options{}, func(...) {
  ...
})
```

They can now just get a suitable Runner object and call Run() on it:

```
weavertest.Local.Run(t, func(...) {
  ...
})
```

Options are now set via ""With<OptionName>"" methods on a Runner. These methods return a new Runner and therefore multiple option setting calls can be chained.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/344,"{'number': 344, 'state': 'closed', 'merged': False, 'created_at': '2023-05-17T19:27:39Z', 'merged_at': '2023-05-17T20:43:36Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_343,2023-05-17T17:33:30Z,"Added WithRouter-related ""weaver generate"" checks.\n\nSee commit messages for details.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/343,"{'number': 343, 'state': 'closed', 'merged': False, 'created_at': '2023-05-17T17:33:30Z', 'merged_at': '2023-05-17T20:16:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_342,2023-05-17T00:55:05Z,Change simple_test Getpid() to use cached pid value.\n\nPreviously we called os.Getpid() every time a component was asked to report its pid. We now cache this value in a global variable which makes the component method much faster (from ~750ns to ~16ns) and allows us to focus on runtime overheads when profiling a component call.,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/342,"{'number': 342, 'state': 'closed', 'merged': False, 'created_at': '2023-05-17T00:55:05Z', 'merged_at': '2023-05-17T16:33:56Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_341,2023-05-17T00:46:11Z,"Simplified CONTRIBUTING.md steps.\n\n1. Rely on ""Squash and Merge"" to convert multiple commits into one.
2. Specify command lines for deleting branches when all done.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/341,"{'number': 341, 'state': 'closed', 'merged': False, 'created_at': '2023-05-17T00:46:11Z', 'merged_at': '2023-05-17T16:34:17Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_340,2023-05-16T23:41:02Z,"weavertest tests can now run in a single process mode with RPCs.\n\nThe ""SingleProcess bool"" option has been replaced by a mode that can be either Local or Multi or RPC. The RPC mode places every component in the testing process, but uses RPCs for method calls. This mode is typically useful when collecting profiles or coverage data that should include RPC costs. (Multi runs will also contain RPC costs, but are harder to profile since their execution is split across multiple processes.)

The mode argument has also been moved out of weavertest.Options{} so it no longer has a default value and the caller is forced to specify whether they want a Local or Multi run.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/340,"{'number': 340, 'state': 'closed', 'merged': False, 'created_at': '2023-05-16T23:41:02Z', 'merged_at': '2023-05-17T00:37:38Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_339,2023-05-16T22:43:22Z,"Added WithConfig-related ""weaver generate"" checks.\n\nRecall that a component implementation struct can embed `weaver.WithConfig[T]` to access a config of type `T` parsed from a weaver.toml file. Before this PR, `weaver generate` would generate a `ConfigFn` function for component structs with an embedded `WithConfig`. Here's an example:

```go
ConfigFn: func(i any) any { return i.(*sqlStore).WithConfig.Config() }
```

When a weavelet constructed a component, it would use this function (registered through the registry) to populate the config.

However, imagine you embed a `weaver.WithConfig[T]` inside a struct but then forget to run `weaver generate`. The code will build and run but because there is no generated `ConfigFn`, the config will not be parsed.

This PR removes the `ConfigFn` as it is not needed. Instead a weavelet can use reflection directly to decide whether a component struct has an embedded `weaver.WithConfig[T]`.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/339,"{'number': 339, 'state': 'closed', 'merged': False, 'created_at': '2023-05-16T22:43:22Z', 'merged_at': '2023-05-17T20:00:23Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_338,2023-05-16T16:38:52Z,"Added automarshal-related ""weaver generate"" checks. \n\nSee #337 for context. This PR changes `weaver generate` to prevent changes to a struct with an embedded `AutoMarshal` without re-running `weaver generate`. See commit messages for details.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/338,"{'number': 338, 'state': 'closed', 'merged': False, 'created_at': '2023-05-16T16:38:52Z', 'merged_at': '2023-05-17T18:23:57Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_337,2023-05-16T16:36:50Z,"Added component-related ""weaver generate"" checks.\n\nThrough our experience writing Service Weaver apps, we've realized that it's easy to make changes to an app and then to forget to re-run `weaver generate`. Sometimes, this causes the app to not build (:smile:). Sometimes, it causes the app to panic immediately when run (:neutral_face:). Sometimes, the app appears to run smoothly but has some subtle bug (:sob:). 

This PR is the beginning of an effort to generate code that doesn't build if you forget to re-run `weaver generate`. See commit messages for details. I recommend reading the PR one commit at a time.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/337,"{'number': 337, 'state': 'closed', 'merged': False, 'created_at': '2023-05-16T16:36:50Z', 'merged_at': '2023-05-17T18:15:38Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_336,2023-05-15T18:07:36Z,Remove incorrect TODO (we need many handlers per deployer).\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/336,"{'number': 336, 'state': 'closed', 'merged': False, 'created_at': '2023-05-15T18:07:36Z', 'merged_at': '2023-05-15T20:28:58Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_335,2023-05-15T18:03:26Z,"Updated contribution guidelines to avoid encouraging force pushes.\n\nPreviously our guidlines suggested using `git commit --amend` when handling PR comments, followed by `git push --force`. We now suggest normal commits and pushes, followed by a final Squash and merge so that we get a single new commit in the main repository.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/335,"{'number': 335, 'state': 'closed', 'merged': False, 'created_at': '2023-05-15T18:03:26Z', 'merged_at': '2023-05-15T21:02:17Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_334,2023-05-15T17:42:37Z,"Removed logging package's dependency on testing.\n\nAs suggested by Sanjay in #330, this PR removes the logging package's dependency on the testing package. It does so by replacing `testing.TB` with a smaller `logging.TB` interface that includes the `Log` and `Cleanup` methods. It also receives the result of `testing.Verbose` as an argument, rather than calling `testing.Verbose` directly.

The weavertest package is now the only package with a dependency on the testing package.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/334,"{'number': 334, 'state': 'closed', 'merged': False, 'created_at': '2023-05-15T17:42:37Z', 'merged_at': '2023-05-15T23:14:00Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_333,2023-05-15T08:46:44Z,"Upgrade to `golang.org/x/exp v0.0.0-20230510235704-dd950f8aeaea`\n\n- Update `go.mod` to use a newer version of `golang.org/x/exp`
- Refactor `singleprocess.go` to use a different `slog` handler initialization
- Refactor `weavelet.go` to use a different `slog` handler initialization
- Refactor `handler_test.go` to use a different `slog` handler initialization",d520c6e562c5d6f7,https://github.com/ServiceWeaver/weaver/pull/333,"{'number': 333, 'state': 'closed', 'merged': False, 'created_at': '2023-05-15T08:46:44Z', 'merged_at': '2023-05-15T16:09:11Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_332,2023-05-15T08:21:41Z,"Upgrade to `golang.org/x/exp v0.0.0-20230425010034-47ecfdc1ba53`\n\n- Update `go.mod` to use a newer version of `golang.org/x/exp v0.0.0-20230425010034-47ecfdc1ba53`
- Refactor `singleprocess.go` to use a different `slog` handler initialization
- Refactor `weavelet.go` to use a different `slog` handler initialization",d520c6e562c5d6f7,https://github.com/ServiceWeaver/weaver/pull/332,"{'number': 332, 'state': 'closed', 'merged': False, 'created_at': '2023-05-15T08:21:41Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_330,2023-05-12T18:17:11Z,"Made weavertest respect the -test.v flag.\n\nCurrently, weavertest logs do not respect the `-test.v` flag. For example, a single process weavertest logs to stdout whether or not the `-test.v` flag is present. Similarly, benchmarks logs are always shown, which makes it very hard to read the benchmark results. This PR fixes these bugs. Thanks Sanjay for pointing them out. 

**For reviewers**:

- I recommend reading the PR commit-by-commit. 
- Should I delete the `weavertest/internal/logging` tests I added? I'm not sure how useful they are.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/330,"{'number': 330, 'state': 'closed', 'merged': False, 'created_at': '2023-05-12T18:17:11Z', 'merged_at': '2023-05-15T16:23:22Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_329,2023-05-11T22:29:07Z,"Make weavertest handle benchmarks.\n\nweavertest.Run expects either *testing.T or *testing.B which indicates that it should work for benchmarking components. However, the weavertest implementation was always passing a -test.run argument. We now set the -test.bench argument instead (and disable all tests) if we detect that the argument passed to weavetest.Run is a *testing.B.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/329,"{'number': 329, 'state': 'closed', 'merged': False, 'created_at': '2023-05-11T22:29:07Z', 'merged_at': '2023-05-11T23:01:19Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_328,2023-05-10T20:22:39Z,"no duplicate locs allowed for the SSH deployer\n\nAfter PR #257, the SSH locations should contain distinct names/addresses.

This is because now we keep track of the deployment directory at each particular location.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/328,"{'number': 328, 'state': 'closed', 'merged': False, 'created_at': '2023-05-10T20:22:39Z', 'merged_at': '2023-05-12T21:42:14Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_326,2023-05-09T23:43:51Z,"Compile time codegen API version checks.\n\nThis PR introduces code to check, at compile time, that every weaver_gen.go file uses the codegen API version linked into the developer's binary. See runtime/codegen/version.go for more context and an explanation of how the generated code works.

Note that there are many simpler ways to produce a compiler error when versions mismatch. We can [embed version info into the name of a type][1]. We can use a [duplicate key trick][2] I learned from [this discussion][4]. We can use the [array trick][3] in this PR without anything more fancy. However, these approaches don't produce helpful error messages. Something like the following is a bit cryptic:

```
cannot use [0][9][0]int{} (value of type [0][9][0]int) as [0][10][0]int value in variable declaration
```

The approach in this PR is nice because it includes the generated error string in the compile error:

```
cannot use codegen.Version[[0][9][0]int](""You used 'weaver generate' codegen version 0.9.0, but you built your code with an incompatible weaver module version. Try upgrading and re-running 'weaver generate'."") (constant ""You used 'weaver generate' codegen version 0.9.0, but you built your... of type codegen.Version[[0][9][0]int]) as codegen.Version[[0][10][0]int] value in variable declaration                           
```
 This way, users can figure out what went wrong, or at least copy and paste the error message to us so we can figure out what went wrong. This better error message does introduce complexity, but thankfully the complexity is hidden away in the codegen package which users do not interact with directly.

We can alternatively check versions at runtime. An implementation of that is in PR https://github.com/ServiceWeaver/weaver/pull/327. This approach is simple and produces nice error messages, but the errors happen at runtime instead of compile time. For some deployers, like the GKE deployer, waiting to fail at runtime can be very annoying.

[1]: https://go.dev/play/p/w51PCV9LTPr
[2]: https://go.dev/play/p/vWMbtvboe0s
[3]: https://go.dev/play/p/ebfXpODWOy2
[4]: https://groups.google.com/g/golang-nuts/c/w1-JQMaH7c4",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/326,"{'number': 326, 'state': 'closed', 'merged': False, 'created_at': '2023-05-09T23:43:51Z', 'merged_at': '2023-05-11T16:19:25Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_325,2023-05-08T21:49:48Z,"SSH and multiprocess deployers check API version.\n\nThis PR changes the SSH and multiprocess deployers to check the deployer API version embedded in a Service Weaver binary.

A question for reviewers. Weavelets still report their deployer API version via the pipe. Should we get rid of this?",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/325,"{'number': 325, 'state': 'closed', 'merged': False, 'created_at': '2023-05-08T21:49:48Z', 'merged_at': '2023-05-15T16:31:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_324,2023-05-08T21:45:04Z,"Disable mTLS in multi deployer by default.\n\nI noticed the multi deployer was slow to start applications. Before, it started apps almost instantly. Recently, it's been taking about 8 seconds. I profiled the deployer (results below for reference) and found that the slowdown was from generating certificates and keys for mTLS.

Since mTLS is not particularly useful for the multiprocess deployer, I disabled it by default. I think people playing with the multiprocess deployer for the first time will think that the deployer itself is slow. I added a new [multi] section to config files with an mtls option to enable it. The multi deployer is fast again :)

```
File: weaver
Type: cpu
Time: May 8, 2023 at 2:13pm (PDT)
Duration: 6.52s, Total samples = 6.31s (96.81%)
Showing nodes accounting for 6.21s, 98.42% of 6.31s total
Dropped 71 nodes (cum <= 0.03s)
      flat  flat%   sum%        cum   cum%
     5.08s 80.51% 80.51%      5.08s 80.51%  math/big.addMulVVW
     0.89s 14.10% 94.61%      6.11s 96.83%  math/big.nat.montgomery
     0.08s  1.27% 95.88%      0.08s  1.27%  runtime.memclrNoHeapPointers
     0.06s  0.95% 96.83%      0.06s  0.95%  runtime.memmove
     0.04s  0.63% 97.46%      0.04s  0.63%  crypto/internal/bigmod.montgomeryLoop
     0.04s  0.63% 98.10%      0.04s  0.63%  math/big.subVV
     0.01s  0.16% 98.26%      0.05s  0.79%  crypto/internal/bigmod.(*Nat).montgomeryMul
     0.01s  0.16% 98.42%      6.12s 96.99%  math/big.nat.expNNMontgomery
         0     0% 98.42%      0.05s  0.79%  crypto/internal/bigmod.(*Nat).Exp
         0     0% 98.42%      6.22s 98.57%  crypto/rand.Prime
         0     0% 98.42%      0.06s  0.95%  crypto/rsa.(*PrivateKey).Sign
         0     0% 98.42%      6.22s 98.57%  crypto/rsa.GenerateKey (inline)
         0     0% 98.42%      6.22s 98.57%  crypto/rsa.GenerateMultiPrimeKey
         0     0% 98.42%      0.06s  0.95%  crypto/rsa.SignPKCS1v15
         0     0% 98.42%      0.06s  0.95%  crypto/rsa.decrypt
         0     0% 98.42%      0.06s  0.95%  crypto/x509.CreateCertificate
         0     0% 98.42%      3.90s 61.81%  github.com/ServiceWeaver/weaver/internal/envelope/conn.(*EnvelopeConn).Serve.func1
         0     0% 98.42%      3.90s 61.81%  github.com/ServiceWeaver/weaver/internal/envelope/conn.(*EnvelopeConn).handleMessage
         0     0% 98.42%      0.91s 14.42%  github.com/ServiceWeaver/weaver/internal/tool/certs.GenerateCACert (inline)
         0     0% 98.42%      5.37s 85.10%  github.com/ServiceWeaver/weaver/internal/tool/certs.GenerateSignedCert
         0     0% 98.42%      6.26s 99.21%  github.com/ServiceWeaver/weaver/internal/tool/certs.generateLeafCert
         0     0% 98.42%      5.37s 85.10%  github.com/ServiceWeaver/weaver/internal/tool/multi.(*deployer).activateComponent
         0     0% 98.42%      5.37s 85.10%  github.com/ServiceWeaver/weaver/internal/tool/multi.(*deployer).startColocationGroup
         0     0% 98.42%      1.48s 23.45%  github.com/ServiceWeaver/weaver/internal/tool/multi.(*deployer).startMain (inline)
         0     0% 98.42%      3.89s 61.65%  github.com/ServiceWeaver/weaver/internal/tool/multi.(*handler).ActivateComponent
         0     0% 98.42%      2.40s 38.03%  github.com/ServiceWeaver/weaver/internal/tool/multi.deploy
         0     0% 98.42%      0.92s 14.58%  github.com/ServiceWeaver/weaver/internal/tool/multi.newDeployer
         0     0% 98.42%      2.40s 38.03%  github.com/ServiceWeaver/weaver/runtime/tool.Run
         0     0% 98.42%      3.91s 61.97%  golang.org/x/sync/errgroup.(*Group).Go.func1
         0     0% 98.42%      2.40s 38.03%  main.main
         0     0% 98.42%      6.20s 98.26%  math/big.(*Int).ProbablyPrime
         0     0% 98.42%      0.08s  1.27%  math/big.nat.clear (inline)
         0     0% 98.42%      0.05s  0.79%  math/big.nat.div
         0     0% 98.42%      0.05s  0.79%  math/big.nat.divBasic
         0     0% 98.42%      0.05s  0.79%  math/big.nat.divLarge
         0     0% 98.42%      6.12s 96.99%  math/big.nat.expNN
         0     0% 98.42%      0.05s  0.79%  math/big.nat.probablyPrimeLucas
         0     0% 98.42%      6.15s 97.46%  math/big.nat.probablyPrimeMillerRabin
         0     0% 98.42%      2.40s 38.03%  runtime.main
         0     0% 98.42%      0.04s  0.63%  syscall.Syscall
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/324,"{'number': 324, 'state': 'closed', 'merged': False, 'created_at': '2023-05-08T21:45:04Z', 'merged_at': '2023-05-09T22:57:53Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_322,2023-05-08T18:18:17Z,"Embed deployer API version in binary.\n\nRecall that a weavelet communicates with a deployer over a pair of pipes using the deployer API. Every time the deployer API changes, we assign it a new version. When a deployer launches a Service Weaver binary, the deployer checks that the weavelet is running a compatible version.

This PR embeds the deployer API version in Service Weaver binaries, allowing a deployer to check the version of a binary without running it. In some cases, this is very convenient. For example, the ""weaver gke"" tool can check the version of a binary before submitting it to GKE. The GKE controller can also check the version without having to run potentially dangerous user code.

The mechanism to embed and extract versions is the same as the one in PR #316. A string of the form ⟦107c095e:wEaVeRvErSiOn:0.8.0⟧ is included in the generated code. The version.ReadVersion function parses this string from the RO data section of a binary.

In future PRs, I'll update the deployers to use the embedded versions.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/322,"{'number': 322, 'state': 'closed', 'merged': False, 'created_at': '2023-05-08T18:18:17Z', 'merged_at': '2023-05-09T22:24:04Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_321,2023-05-05T19:49:03Z,"[docs fix] Use query param as expected by the example\n\nI've noticed that when following the docs and getting surprised by the result.

Current implementation uses static string, but subsequent examples expect the query param to be used and reversed instead.",4e2dd9cbde2fe475,https://github.com/ServiceWeaver/weaver/pull/321,"{'number': 321, 'state': 'closed', 'merged': False, 'created_at': '2023-05-05T19:49:03Z', 'merged_at': '2023-05-08T02:04:38Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_320,2023-05-05T08:45:03Z,"feat update exp\n\nupdate exp to latest and fixed the method.
relate #319",e9d13e9ac32b1833,https://github.com/ServiceWeaver/weaver/pull/320,"{'number': 320, 'state': 'closed', 'merged': False, 'created_at': '2023-05-05T08:45:03Z', 'merged_at': '2023-05-05T23:32:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_318,2023-05-05T00:38:41Z,Add news about the Workshop on Application Networking\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/318,"{'number': 318, 'state': 'closed', 'merged': False, 'created_at': '2023-05-05T00:38:41Z', 'merged_at': '2023-05-05T22:04:18Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_317,2023-05-03T23:57:10Z,website/blog: fix typo in corba.md\n\nFixed a typo as I was passing by.,415d1e174803bff2,https://github.com/ServiceWeaver/weaver/pull/317,"{'number': 317, 'state': 'closed', 'merged': False, 'created_at': '2023-05-03T23:57:10Z', 'merged_at': '2023-05-04T00:49:51Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_316,2023-05-03T22:36:52Z,"Add package to read component use graph from a Go binary.\n\nweaver generates emits edges as specially delimited strings in the binary. The bin package parses the binary and reads these edges out.

Added a test that builds a sample program for Linux, Windows, Mac, and checks that the expected edges can be read out of them.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/316,"{'number': 316, 'state': 'closed', 'merged': False, 'created_at': '2023-05-03T22:36:52Z', 'merged_at': '2023-05-03T23:13:52Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_315,2023-05-03T00:57:40Z,Removed -e flag from pkill in weaver purge.\n\nThe -e flag isn't supported on mac.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/315,"{'number': 315, 'state': 'closed', 'merged': False, 'created_at': '2023-05-03T00:57:40Z', 'merged_at': '2023-05-09T16:31:22Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_314,2023-05-03T00:37:00Z,"Moved logs back to /tmp/serviceweaver.\n\nThis PR reverts some of the behavior introduced in #309 by moving logs back to `/tmp`, rather than `~/.local/share/serviceweaver`. Thanks Sanjay for the recommendation.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/314,"{'number': 314, 'state': 'closed', 'merged': False, 'created_at': '2023-05-03T00:37:00Z', 'merged_at': '2023-05-09T16:25:24Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_313,2023-05-01T20:17:15Z,"Use the call graph to authorize peers in the multi deployer.\n\nIn this change:
      1. The multi deployer, when constructing colocation groups, also computes
        the set of components each colocation group is allowed to call methods
        on.
      2. When the server receives a new client connection, it calls
        `VerifyClientCertificate` on the multi deployer. The multi deployer
        extracts the colocation group name from the client certificate and
        returns the pre-computed set of components (see step 1 above) the client's
        colocation group is allowed to access.
      3. (Already implemented) The weavelet makes sure that a given connection
        only admits method calls on the allowlisted components (see step 2 above).
    
Other changes:
  * Verify WeaveletInfo inside envelope_conn. This removes a bunch of redundant code.
",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/313,"{'number': 313, 'state': 'closed', 'merged': False, 'created_at': '2023-05-01T20:17:15Z', 'merged_at': '2023-05-10T21:20:04Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-05-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_312,2023-04-28T23:32:29Z,"Change component registration to hold implementation type.\n\nPreviously, codegen.Registration contained a function that created the implementation object and returned a pointer to it. We now store the reflect.Type for the implementation object instead.  This allows us to examine type properties without having to create an unnecessary object.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/312,"{'number': 312, 'state': 'closed', 'merged': False, 'created_at': '2023-04-28T23:32:29Z', 'merged_at': '2023-05-01T16:09:35Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_311,2023-04-28T22:52:31Z,Add codegen method that returns the static call graph of components.\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/311,"{'number': 311, 'state': 'closed', 'merged': False, 'created_at': '2023-04-28T22:52:31Z', 'merged_at': '2023-04-28T23:20:57Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_310,2023-04-28T19:30:40Z,"weaver multi signs and verifies certificates\n\nChange the `weaver multi` deployer to:
  * Mint a new CA certificate for each new deployment.
  * Mint a signed certificate for each colocation group.
  * Verify peer certificates to ensure that:
     1. their identities were assigned by the deployer, and
     2. (TODO) the identities match the call graph.

Adds the certs package used for minting certificates in-process.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/310,"{'number': 310, 'state': 'closed', 'merged': False, 'created_at': '2023-04-28T19:30:40Z', 'merged_at': '2023-05-01T16:15:45Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_309,2023-04-28T18:20:36Z,"Changed deployers to persist data in one spot.\n\nRecall that deployers often have to persist various data to the file system. The ""weaver multi"" deployer, for example, persists logs, registrations, and traces to files.

Before this PR, deployers would store logs in `/tmp` and everything else in `~/.local/share/serviceweaver`. Different deployers would sometimes store their data in the same directory. A `multi_perfetto.db` file would be right next to a `single_perfetto.db` file, for example.

This made purging data files annoying. It was like a scavenger hunt trying to track down the various places that data was stored. This PR changes deployers to store all their data in a single directly. For example, the ""weaver multi"" deployer now stores everything inside `~/.local/share/serviceweaver/multi`. The single process deployer stores everything inside `~/.local/share/serviceweaver/single`.

This makes purging much simpler. It also makes it clearer which files are being used by which deployers.

Note that this PR moves logs out of `/tmp`, which persists them longer. This means that logs won't be garbage collected automatically, but I think that's actually a good thing. We should implement a principled way of garbage collecting logs, rather than leaving it up to `/tmp`. I think it would be surprising and frustrating if an important log file was spuriously deleted by the OS.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/309,"{'number': 309, 'state': 'closed', 'merged': False, 'created_at': '2023-04-28T18:20:36Z', 'merged_at': '2023-05-02T16:36:57Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_308,2023-04-28T18:02:37Z,Silent expected warning messages in generator_test.go.\n\nAdd an Options argument to generate.Generate that contains a function used to report warnings. In generator_test.go fill this with a function that reports the warning via testing.T.Log.,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/308,"{'number': 308, 'state': 'closed', 'merged': False, 'created_at': '2023-04-28T18:02:37Z', 'merged_at': '2023-04-28T19:35:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_305,2023-04-27T22:12:58Z,"Made weavelet instantiate main component directly.\n\nRecall that when a weavelet is created, it receives an `EnvelopeInfo` proto from the envelope that contains a boolean `RunMain` field. When `RunMain` is true, the weavelet creates an instance of the main component and passes it to the user-written function passed to `weaver.Run`.

Before this PR, the weavelet created an instance of the main component by calling `getInstance`. `getInstance` returns either a local implementation of the component or a stub to a remote implementation. This PR changes the weavelet to instead call `getImpl` which always returns a local implementation.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/305,"{'number': 305, 'state': 'closed', 'merged': False, 'created_at': '2023-04-27T22:12:58Z', 'merged_at': '2023-04-28T16:00:10Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_304,2023-04-27T14:14:38Z,"Remove weaver.Get (obsoleted by weaver.Ref).\n\nRemove the obsolete weaver.Get[T] API. Users should now declare weaver.Ref[T] fields in their component implementation struct instead.

Fixed all callers.

Tweaked examples/hello to more closely match the sample code in the documentation.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/304,"{'number': 304, 'state': 'closed', 'merged': False, 'created_at': '2023-04-27T14:14:38Z', 'merged_at': '2023-04-27T20:17:07Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_301,2023-04-27T09:14:12Z,"Fix bug in metrics package's codegen.MethodLatencies.\n\nFix bug in metrics package's codegen.MethodLatencies, converting microseconds to milliseconds.",d520c6e562c5d6f7,https://github.com/ServiceWeaver/weaver/pull/301,"{'number': 301, 'state': 'closed', 'merged': False, 'created_at': '2023-04-27T09:14:12Z', 'merged_at': '2023-04-28T00:25:23Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_299,2023-04-26T23:33:00Z,add discord link to the main page\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/299,"{'number': 299, 'state': 'closed', 'merged': False, 'created_at': '2023-04-26T23:33:00Z', 'merged_at': '2023-04-26T23:38:31Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-26. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_298,2023-04-26T22:44:04Z,"Reorganized examples in the documentation.\n\nTHe first example now has just a single main component.

The ""Multiple Components"" section has been moved earlier in the document, and instead of having three components (main, Reverser, Cache), it has two components (main, Reverser).

Fixed some stale references to ""root"".",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/298,"{'number': 298, 'state': 'closed', 'merged': False, 'created_at': '2023-04-26T22:44:04Z', 'merged_at': '2023-04-26T23:01:28Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-26. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_297,2023-04-26T21:43:09Z,"Added missing ""err"" attribute to slog.Error calls.\n\nSee #250 for background.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/297,"{'number': 297, 'state': 'closed', 'merged': False, 'created_at': '2023-04-26T21:43:09Z', 'merged_at': '2023-04-27T18:05:34Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-26. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_296,2023-04-26T20:41:24Z,"Fixed `weaver multi` and `weaver ssh` main bug.\n\nBefore, `weaver multi` and `weaver ssh` assumed the name of the main component was ""main"". Recently, we switched it to
""github.com/ServiceWeaver/weaver/main"". Both the meaver multi and weaver ssh deployers would instruct a weavelet to start ""main"", but no such component was registered, and the app would immediately crash.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/296,"{'number': 296, 'state': 'closed', 'merged': False, 'created_at': '2023-04-26T20:41:24Z', 'merged_at': '2023-04-26T21:40:15Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-26. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_295,2023-04-26T20:07:00Z,"Automatically fetch needed components.\n\nIf component X needs component Y, X's implementation can contain a field of type `weaver.Ref[Y]` that will be filled in automatically with `Y` when `X` is created.

A future change will fix all code to use this new mechanism and then remove `weaver.Get[T]`",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/295,"{'number': 295, 'state': 'closed', 'merged': False, 'created_at': '2023-04-26T20:07:00Z', 'merged_at': '2023-04-26T21:57:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-26. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_294,2023-04-25T23:52:01Z,"Added inline heading links to website docs.\n\nThis PR adds inline heading links to the website docs which appear when the cursor hovers over the heading. This is a pretty standard feature on a lot of websites (e.g., [GitHub][1], [go docs][2]). The demo video below doesn't show the address bar, but it is updated when the heading link is clicked.

[Heading Links Demo.webm](https://user-images.githubusercontent.com/3654277/234432044-4822bb6b-5935-40ac-9fb0-05cabe492ea2.webm)

[1]: https://github.com/ServiceWeaver/weaver
[2]: https://pkg.go.dev/github.com/ServiceWeaver/weaver",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/294,"{'number': 294, 'state': 'closed', 'merged': False, 'created_at': '2023-04-25T23:52:01Z', 'merged_at': '2023-04-27T17:59:49Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_293,2023-04-25T22:51:49Z,Added reverser server weavertest.\n\nI wanted to understand how a developer could test their HTTP servers using the new `weavertest.Run` API. Let me know if the approach in this PR looks reasonable or if there's a better way!,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/293,"{'number': 293, 'state': 'closed', 'merged': False, 'created_at': '2023-04-25T22:51:49Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_292,2023-04-25T22:42:55Z,"Added `weaver generate` warning for mistyped Init.\n\nA component's `Init` method is supposed to have type `func(context.Context) error`, but it's easy to forget to add a `context.Context` argument or `error` return. If a component's `Init` method has the wrong type, it is silently ignored. This can be very frustrating to debug.

This PR augments `weaver generate` to warn the user if they have a mistyped `Init` function.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/292,"{'number': 292, 'state': 'closed', 'merged': False, 'created_at': '2023-04-25T22:42:55Z', 'merged_at': '2023-04-27T17:54:28Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_291,2023-04-25T22:37:59Z,Re-enable the listener/HTTP-server test in simple_test.go.\n\nAdd a new Server component to simple.go that gets a listener and exports and HTTP server. Make a test create this component and test it by fetching from the HTTP server.,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/291,"{'number': 291, 'state': 'closed', 'merged': False, 'created_at': '2023-04-25T22:37:59Z', 'merged_at': '2023-04-25T22:53:21Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_290,2023-04-25T18:26:35Z,"Introduce main components.\n\nPreviously, a weaver application was started by calling `weaver.Init` and placing the body of the application after the call. An application is now started by placing the body of the application in a main component, calling `weaver.Run` and passing it a function that accepts the main component as an argument.

```
// Old code
root := weaver.Init(ctx)
... application code ...

// New code
type app struct {
  weaver.Implements[weaver.Main]
  ...
}

weaver.Run(ctx, func(ctx context.Context, app *app) {
  ... application code ...
})
```

The motivations for this change:

1. Application setup code will now belong to a component. Previously non-trivial amounts of setup code could run in a non-component context. This code is now part of a component and can therefore use component features (e.g., configuration).
1. A future change will make the component graph (which component uses which component) explicit. Having a main component will allow analysis tools to find the root of the graph.

Details of changes:

1. Replace `weaver.Init` by `weaver.Run`.
1. Add a `weaver.Main` interface that a component implementation can implement (by embedding `weaver.Implements[weaver.Main]`.
1. Update examples to use `weaver.Run`.
1. Replace `weavertest.Init` by `weavertest.Run`.
1. Update tests to use `weavertest.Run` (diverge_test needed some significant changes).
1. Update documentation.
1. Update code generator to allow implementation of `weaver.Main` (which would previously have been disallowed because the interface type was in a separate package).
1. Also update code generator to allow components without methods (weaver.Main does not have any methods, and application components may also not have any methods if all of their functionality is triggered at initialization time.)
1. Add a private package used to expose some weaver internals to other Service Weaver packages.
1. Improve error message when multiple implementations are registered for the same component.",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/290,"{'number': 290, 'state': 'closed', 'merged': False, 'created_at': '2023-04-25T18:26:35Z', 'merged_at': '2023-04-25T22:10:30Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_289,2023-04-24T23:04:42Z,"Send PKI certificates between weavelets.\n\nIn particular, the envelope now has the ability to pass a certificate to its weavelet. In such cases, the weavelet will use the certificate to authenticate itself to its network peers, and to authenticate and authorize those peers.

The intended protocol is as follows:
  * Envelope optionally passes a certificate to the weavelet.
  * (TODO) The weavelet passes the call graph to the envelope.
  * The weavelet establishes a TLS connection with its peers.
  * On every network connection, the weavelet calls an envelope method to verify the peer's certificate.
  * (TODO) If the peer is a server end of a connection, the envelope verifies that the peer has provided the correct identity for the target component.
  * (TODO) If the peer is a client end of a connection, the envelope verifies that the peer is supposed to talk to the weavelet and returns all of the components the peer is allowed to access.

Other minor changes:
  * fold `componentStub` into `component`
  * fold `client` into `component`
  * de-dup `dialAddr` between weavelet and weaveletconn.
  * small cleanups",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/289,"{'number': 289, 'state': 'closed', 'merged': False, 'created_at': '2023-04-24T23:04:42Z', 'merged_at': '2023-04-26T00:48:54Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_288,2023-04-24T22:27:02Z,Small reverser tweaks in preparation for demo.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/288,"{'number': 288, 'state': 'closed', 'merged': False, 'created_at': '2023-04-24T22:27:02Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_287,2023-04-24T17:42:18Z,"Add a test for the examples\n\nRelated to #276. In one of my personal projects I run the examples as part of the test suite. I thought it might be interesting to do the same for ServiceWeaver. My hope is that running the examples in test should:
* help ensure that as weaver changes the examples continue to work
* provide some test coverage of the single and multi deployers
* provide some test coverage of the integration of codegen with a real applicaction

This PR adds `TestExamples`. The test attempts to run the example application in each directory using both the single deployer and multi deployer. The test makes an HTTP request to the application to show that it started successfully and is able to perform its primary function. Finally the test terminates the application and checks that it exited correctly.

Currently the test will will skip any examples that don't have test cases. If you're interested in this approach I can add test cases for the remaining 3 examples and change it to `t.Fatal` so that the addition of a new example will prompt for another test case. 

As part of this test I wanted to check the application exited as expected. In the first commit I used an approach [inspired by bash](https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html#:~:text=When%20a%20command%20terminates%20on,the%20return%20status%20is%20126.) to exit with 128+signum. In the second commit I changed it to exit 0 when it's able to successfully unregister. My thinking is that if the application is asked to terminate, and it's able to unregister, that seems like a successful exit (not an error). I could use a different exit code, but I think it is nice to be able to differentiate a graceful shutdown from some other error.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/287,"{'number': 287, 'state': 'closed', 'merged': False, 'created_at': '2023-04-24T17:42:18Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_286,2023-04-21T22:40:55Z,Two miscellaneous TODO fixes.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/286,"{'number': 286, 'state': 'closed', 'merged': False, 'created_at': '2023-04-21T22:40:55Z', 'merged_at': '2023-04-24T22:49:59Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_285,2023-04-21T21:59:13Z,Improved interface in different package error.\n\nSee #282 for context.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/285,"{'number': 285, 'state': 'closed', 'merged': False, 'created_at': '2023-04-21T21:59:13Z', 'merged_at': '2023-04-24T22:41:43Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_284,2023-04-21T21:14:45Z,"Experiment with generic codegen.Register function.\n\n## Background

Recall that `weaver generate` generates code to register every component. A component's registration includes its name, its interface type, and a handful of functions to create things like client and server stubs. Here's an example:

```go
codegen.Register(codegen.Registration{
    Name:        ""github.com/ServiceWeaver/weaver/examples/collatz/Even"",
    Iface:       reflect.TypeOf((*Even)(nil)).Elem(),
    New:         func() any { return &even{} },
    LocalStubFn: func(impl any, tracer trace.Tracer) any {
        return even_local_stub{impl: impl.(Even), tracer: tracer}
    },
    ClientStubFn: func(stub codegen.Stub, caller string) any {
        return even_client_stub{
            stub: stub,
            doMetrics: codegen.MethodMetricsFor(
                codegen.MethodLabels{
                    Caller: caller,
                    Component: ""github.com/ServiceWeaver/weaver/examples/collatz/Even"",
                    Method: ""Do"",
                },
            ),
        }
    },
    ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
        return even_server_stub{impl: impl.(Even), addLoad: addLoad}
    },
})
```

The generated registration today has some small warts.

- `Name` is redundant. It can be derived from `Iface`.
- It might be more convenient to pass `Iface` as a type argument instead of a `reflect.Type`.
- `New` is redundant. It can be derived from `Iface`.
- `LocalStubFn`, `ClientStubFn`, and `ServerStubFn` use a lot of `any`.

## Proposal

This PR explores the possibility of a generic `codegen.Register` function. The above registration would instead look like this:

```go
codegen.Register(codegen.TypedRegistration[Even, even]{
    LocalStubFn: func(impl *even, tracer trace.Tracer) Even {
        return even_local_stub{impl: impl, tracer: tracer}
    },
    ClientStubFn: func(stub codegen.Stub, caller string) Even {
        return even_client_stub{
            stub: stub,
            doMetrics: codegen.MethodMetricsFor(
                codegen.MethodLabels{
                    Caller:    caller,
                    Component: ""github.com/ServiceWeaver/weaver/examples/collatz/Even"",
                    Method:    ""Do"",
                },
            ),
        }
    },
    ServerStubFn: func(impl *even, addLoad func(uint64, float64)) codegen.Server {
        return even_server_stub{impl: impl, addLoad: addLoad}
    },
})
```

`Name`, `Iface`, and `New` are removed. `LocalStubFn`, `ClientStubFn`, and `ServerStubFn` are typed. Internally, the codegen package erases the types and converts a `TypedRegistration` into a `Registration`.

We could also generate the implementations of `LocalStubFn`, `ClientStubFn`, and `ServerStubFn` standalone functions. That would look like this:

```go
func init() {
    codegen.Register(codegen.TypedRegistration[Even, even]{
        LocalStubFn: new_even_local_stub,
        ClientStubFn: new_even_client_stub,
        ServerStubFn: new_even_server_stub,
    })
}

// Generated next to even_local_stub.
func new_even_local_stub(impl *even, tracer trace.Tracer) Even {
    return even_local_stub{impl: impl, tracer: tracer}
}

// Generated next to even_client_stub.
func new_even_client_stub(stub codegen.Stub, caller string) Even {
    return even_client_stub{
        stub: stub,
        doMetrics: codegen.MethodMetricsFor(
            codegen.MethodLabels{
                Caller:    caller,
                Component: ""github.com/ServiceWeaver/weaver/examples/collatz/Even"",
                Method:    ""Do"",
            },
        ),
    }
}

// Generated next to even_server_stub.
func new_even_server_stub(impl *even, addLoad func(uint64, float64)) codegen.Server {
    return even_server_stub{impl: impl, addLoad: addLoad}
}
```

## Implementation Status

This PR doesn't fully implement the proposal above yet. I introduced a `TypedRegistration` type and a `RegisterTyped` function, but didn't update the code generator to use these. I manually edited a `weaver_gen.go` file to see what it would look like. If we like this idea, I'll finish implementing the PR!

Thanks, Sanjay, for [the suggestion][1].

[1]: https://github.com/ServiceWeaver/weaver/pull/278#issuecomment-1518240169",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/284,"{'number': 284, 'state': 'closed', 'merged': False, 'created_at': '2023-04-21T21:14:45Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_283,2023-04-21T17:48:37Z,"Improved status registry errors + input handling.\n\nRecall that the `weaver single status` command shows the status of every active Service Weaver application run with `go run .`:

```console
$ weaver single status
╭──────────────────────────────────────────────────────╮
│ DEPLOYMENTS                                          │
├─────────┬──────────────────────────────────────┬─────┤
│ APP     │ DEPLOYMENT                           │ AGE │
├─────────┼──────────────────────────────────────┼─────┤
│ collatz │ 62824743-478a-455d-9563-ead17900301a │ 2s  │
╰─────────┴──────────────────────────────────────┴─────╯
...
```

To know the set of all active applications, `weaver single status` leverages a **registry**. A registry is a directory that contains JSON-formatted registration files, one per deployment. When a deployment is launched, a registration file is added to the directory. When the deployment is killed, the registration file is removed.

This PR makes a couple of small changes to the registry:

1. I expanded the error messages returned by a registry. I was getting some error messages like ""unable to decode JSON"" that were hard to understand because they didn't have enough context.

2. I changed the registry to ignore any files in the registry directory that aren't registration files. Sometimes, spurious files are created in the registry directory. For example, if you open a registration file in vim and it crashes, you might get a `.swp` file.

3. I updated some stale documentation.

4. I simplified the implementation of the `Get` method.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/283,"{'number': 283, 'state': 'closed', 'merged': False, 'created_at': '2023-04-21T17:48:37Z', 'merged_at': '2023-04-21T19:25:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_282,2023-04-21T00:11:49Z,"Component interface, struct in different packages.\n\n## Overview

Currently, we require that a component interface and its accompanying implementation be in the same package. We've received a number of requests on GitHub (#98, #224) and on our [Discord][discord] to allow the interface and implementation to be in different packages. For example, one user's application generates gRPC server interfaces in one package, and they want to implement these as components in a different package.

Here are four options for how to deal with this issue in increasing order of complexity. This PR implements the second option, but that doesn't mean I think it's the best option. It was quick to implement, and it helped me understand all the options.

## Option 1: Disallow It

This option is trivial. Don't change anything and continue requiring component interfaces and implementations to be in the same package.

## Option 2: Allow It (this PR)

Allow component interfaces and implementations to be in separate packages. This introduces two issues:

1. A developer may forget to link in a component implementation. Before, if you called `weaver.Get[T]`, you were sure to link in the package containing `T`, and therefore you would link in the corresponding implementation of `T`. With this option, `weaver.Get[T]` is not sufficient. A developer must also link in the package with the implementation of `T`.

2. A developer may link multiple implementations of a component. This is the opposite of the previous problem. Previously, we could detect duplicate implementations of the same interface at code generation time, but with this option, that becomes impossible. A user may generate code separately for two packages, each with an implementation of the same interface.

This option appears to have the advantage that it allows people to swap out different implementations of the same interface, which some users have requested. That's true, but it's not so straightforward. If the two components have different configs, for example, swapping is not so easy.

The benefit of this option is that it's simple, and if we encourage people to place their interfaces and implementations in the same package, they shouldn't run into any problems. Only advanced users, who opt to split their interfaces and implementations have the additional burden of remembering to link in one, and only one, implementation.

## Option 3: `weaver.Get[Impl]`

For this option, we change `weaver.Get`. Rather than writing `weaver.Get[Intf]` for some interface `Intf`, developers write `weaver.Get[Impl]` for some implementation type `Impl`. This makes it impossible for a user to forget to link in an implementation, though it still allows them to link multiple implementations.

Implementing this option is a bit tricky because `weaver.Get` still needs to return the interface type, even if it receives the implementation type. I think this is doable though. Here's a rough sketch: https://go.dev/play/p/2L7R6JibaNN. Note that this doesn't build on go 1.20, but it does build on go 1.21.

## Option 4: Impls Are Components

This option builds on Option 3. `weaver.Get` takes an implementation type. However, we take it a step further and make a radical shift in the way we view components. A component is no longer uniquely identified by its interface, but rather by its implementation. Even if two implementations implement the same interface, we view them as distinct components.

This option avoids forgetting to link a component and avoids double linking a component. It's also not so different from the way we had things way back in the day where we automatically generated interfaces from implementations.

[discord]: https://discord.gg/FzbQ3SM8R5",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/282,"{'number': 282, 'state': 'closed', 'merged': False, 'created_at': '2023-04-21T00:11:49Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_281,2023-04-20T21:56:51Z,"Export healthz URL path and default handler.\n\nAlso, change the URL path to ""/debug/weaver/healthz"", to avoid interference with application handlers.

Based on @ghemawat's suggestions.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/281,"{'number': 281, 'state': 'closed', 'merged': False, 'created_at': '2023-04-20T21:56:51Z', 'merged_at': '2023-04-24T22:22:25Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_280,2023-04-20T21:18:38Z,Deleted wrap app (obsoleted by reverser app).\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/280,"{'number': 280, 'state': 'closed', 'merged': False, 'created_at': '2023-04-20T21:18:38Z', 'merged_at': '2023-04-20T21:26:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_279,2023-04-20T21:15:19Z,"Fixed annoying website wiggles.\n\nBefore this PR, the website header would sometimes shift slightly left or right depending on which page you were on. This caused the site to wiggle if you switched back and forth between two pages.

I spent some time debugging this. At first, I thought it was some super complicated CSS subtlety related flexbox or something. After a while, it dawned on me that it was much simpler. On pages that were long, the scrollbar appeared, which slightly shrunk the width of the page, causing the header to move left.

This PR fixes the problem by setting the body width to `100vw`.

## Before

[Wiggle.webm](https://user-images.githubusercontent.com/3654277/233488948-dff68abd-ea86-4141-90ad-aa739d34a5da.webm)

## After

[No Wiggle.webm](https://user-images.githubusercontent.com/3654277/233488946-1f36a287-5213-429e-af5d-24fc2436c502.webm)",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/279,"{'number': 279, 'state': 'closed', 'merged': False, 'created_at': '2023-04-20T21:15:19Z', 'merged_at': '2023-04-20T21:25:46Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_278,2023-04-20T20:11:17Z,"Experimenting with weaver generate templates.\n\nThis PR experiments with `weaver generate` using templates to generate code. If we think it's more readable, I can covert the whole generator. Otherwise, I'll abandon the change.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/278,"{'number': 278, 'state': 'closed', 'merged': False, 'created_at': '2023-04-20T20:11:17Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_277,2023-04-20T16:09:01Z,Fixed duplicate healthz registration in hello app.\n\nFixes #276.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/277,"{'number': 277, 'state': 'closed', 'merged': False, 'created_at': '2023-04-20T16:09:01Z', 'merged_at': '2023-04-20T20:42:37Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_274,2023-04-20T00:37:50Z,Elaborated on CORBA failure in blog.\n\nThanks vardhan for the suggestion in the Discord!,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/274,"{'number': 274, 'state': 'closed', 'merged': False, 'created_at': '2023-04-20T00:37:50Z', 'merged_at': '2023-04-24T22:32:25Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_273,2023-04-20T00:21:47Z,"Simplified weaver generate's component type.\n\nBefore this PR, `weaver generate` had the following type to represent components:

```go
type component struct {
    name          string           // component interface name
    pos           token.Pos        // Location of component implementation
    fullName      string           // package-prefixed component interface name
    implName      string           // name of the component implementation type
    intf          *types.Interface // component's interface type
    file          *ast.File        // file that contains component's implementation
    methods       []*types.Func    // exported component methods, in deterministic order
    router        *types.Named     // router type for the component, or nil if there is no router.
    hasConfig     bool             // True iff implementation contains a weaver.WithConfig field.
    routingKey    types.Type       // routing key, or nil if there is no router.
    routedMethods map[string]bool  // the set of methods with a routing function
}
```

Many of these fields were either easily derivable from other fields (e.g., `name`, `fullName`, `implName`) or just straight up unused (e.g., `pos`, `file`). This PR simplifies the type to the following.

```go
type component struct {
    intf          *types.Named    // component interface
    impl          *types.Named    // component implementation
    router        *types.Named    // router, or nil if there is no router
    routingKey    types.Type      // routing key, or nil if there is no router
    routedMethods map[string]bool // the set of methods with a routing function
    hasConfig     bool            // implementation embeds weaver.WithConfig?
}
```

In making this change, I also cleaned up a couple of small things here and there (e.g., imprecise `token.Pos`'s in errors, some returns that should have been continues).

Note that some `weaver_gen.go` files changed because I simplified (and made more deterministic I think) the order in which methods are processed. None of the generated code should be different, just shuffled around.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/273,"{'number': 273, 'state': 'closed', 'merged': False, 'created_at': '2023-04-20T00:21:47Z', 'merged_at': '2023-04-24T22:36:23Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_272,2023-04-20T00:18:52Z,"Allow empty component interfaces.\n\nThis PR changes `weaver generate` to allow empty component interfaces. We're in the process of converting main to be an explicit component that implements an empty `weaver.Main` interface. This change will allow that. We've also received [an issue][issue] explaining a use case for an interface without any methods.

[issue]: https://github.com/ServiceWeaver/weaver/issues/270",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/272,"{'number': 272, 'state': 'closed', 'merged': False, 'created_at': '2023-04-20T00:18:52Z', 'merged_at': '2023-04-20T20:37:02Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_271,2023-04-20T00:18:17Z,"Disallow unexported component interface methods.\n\nPreviously, if a Service Weaver application included a component interface with unexported methods, the app would panic at runtime. Thanks to ricardo.jmd.oliveira on our [Discord server][discord] for reporting this bug.

Rather than supporting unexported methods, this PR prohibits them. Unexported methods complicate code generation, as client and server stubs have to implement the unexported methods even though these methods will never get called. Furthermore, we're considering allowing component interfaces and implementations to be in separate packages. If we do allow this, it will be even harder to generate implementations of the interface without resorting to some [tricks][].

[discord]: https://discord.gg/FzbQ3SM8R5
[tricks]: https://stackoverflow.com/a/26181609",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/271,"{'number': 271, 'state': 'closed', 'merged': False, 'created_at': '2023-04-20T00:18:17Z', 'merged_at': '2023-04-20T20:31:28Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_269,2023-04-18T22:47:03Z,Added Warsaw Cloud Developer Day to news.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/269,"{'number': 269, 'state': 'closed', 'merged': False, 'created_at': '2023-04-18T22:47:03Z', 'merged_at': '2023-04-20T20:20:48Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_268,2023-04-18T22:30:36Z,"Prettified News page on website.\n\n## Mobile

| Before | After | 
| - | - | 
| ![7hPYSzkKMmB32J6](https://user-images.githubusercontent.com/3654277/232918893-5002cf6e-60e1-4f02-85cf-40bfa30ad8d0.png) | ![zUSHMgkWMXENsZh](https://user-images.githubusercontent.com/3654277/232918883-63a144e5-5ee9-43d3-86e6-2d0af1219d32.png) |

## Desktop

| Before | After | 
| - | - | 
| ![BTYnR5MVet5gwhp](https://user-images.githubusercontent.com/3654277/232918906-96aa3d4b-75cf-4eca-88bc-07522fe5d2b2.png) | ![BqYHsUfxotTr7SA](https://user-images.githubusercontent.com/3654277/232918891-f473d450-80c2-427b-bed6-4aee0d14d831.png) |
",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/268,"{'number': 268, 'state': 'closed', 'merged': False, 'created_at': '2023-04-18T22:30:36Z', 'merged_at': '2023-04-20T20:17:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_267,2023-04-18T21:38:49Z,"Added CORBA blog post to News page on website.\n\nI also posted the blog on hacker news, reddit, discord, and twitter.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/267,"{'number': 267, 'state': 'closed', 'merged': False, 'created_at': '2023-04-18T21:38:49Z', 'merged_at': '2023-04-20T20:26:51Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_266,2023-04-18T20:49:15Z,"Generator Cleanups\n\n## `weaver generate` Refresher
 
`weaver generate` has two phases. In the first phase, it analyzes and validates the provided code. For example:
    
- It finds every component interface and implementation.
- It checks that the implementation implements the interface and that all method arguments and returns are serializable.
- It finds every router type and checks that the router's methods match the component's methods.
    
In the second phase, it generates code and places it in weaver_gen.go files.
    
## Changes
    
Before this PR, the `generator` type was responsible for both validation and generation. This PR changes validation to use pure functions and makes `generator` responsible solely for generation. I also made a bunch of miscellaneous cleanups.
    
Now that validation is performed as pure functions, the flow of errors is more explicit. Before, all errors were placed in `generator.errors`, which made it a bit confusing to what was failing. For example, code generation almost never fails. I don't think this was clear before.
    
A question to reviewers, would you prefer we place all the validation code in a separate file? Right now, generator.go is pretty long (2100+ lines).",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/266,"{'number': 266, 'state': 'closed', 'merged': False, 'created_at': '2023-04-18T20:49:15Z', 'merged_at': '2023-04-19T18:34:27Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_263,2023-04-18T16:09:52Z,Suppress golangci-lint false positives with Go tip.\n\ngolangci-lint currently gives a couple of false positives (no such field or method) errors when built with an upcoming Go release. Suppress these errors until the next Go release and the corresponding golangci-lint fix.,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/263,"{'number': 263, 'state': 'closed', 'merged': False, 'created_at': '2023-04-18T16:09:52Z', 'merged_at': '2023-04-18T20:15:12Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_262,2023-04-18T16:08:25Z,"Supress two erroneous golangci-lint errors.\n\nEver since our desktops upgraded to Go 1.21, golangci-lint has been reporting two odd typecheck errors even though the code compiles just fine. I added some nolint annotations to supress these errors with some TODOs to remove them once golangci-lint is fixed.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/262,"{'number': 262, 'state': 'closed', 'merged': False, 'created_at': '2023-04-18T16:08:25Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-18. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_261,2023-04-17T18:55:39Z,"Make `weaver generate` resilient to malformed weaver_gen.go files\n\nBackwards incompatible changes such as this [this](https://github.com/ServiceWeaver/weaver/pull/238) can result in new `weaver` CLI failing to compile old `weaver_gen.go` files.  Unfortunately, such compile failures leave the entire application build broken, since `weaver generate` fails to generate new `weaver_gen.go` files.

With this change, `weaver generate` becomes resilient to any malformed `weaver_gen.go` files and overwrites them appropriately.",12eb4a124ebc5701,https://github.com/ServiceWeaver/weaver/pull/261,"{'number': 261, 'state': 'closed', 'merged': False, 'created_at': '2023-04-17T18:55:39Z', 'merged_at': '2023-04-18T22:48:55Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_260,2023-04-17T18:43:23Z,"Delete perfetto.db files on weaver purge\n\nChanges in the schema of perfetto database can result in application crashes such as the following:

`Application bankofanthos error: SQL logic error: no such column: weavelet_id (1)`

These crashes happen because of a schema mismatch between an existing perfetto.db file and that of the running application.  This change thus expands `weaver purge` command to delete the perfetto.db files as well.",12eb4a124ebc5701,https://github.com/ServiceWeaver/weaver/pull/260,"{'number': 260, 'state': 'closed', 'merged': False, 'created_at': '2023-04-17T18:43:23Z', 'merged_at': '2023-04-18T21:54:24Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_257,2023-04-14T10:28:42Z,implemented the solution described by @rgrandl\n\nI have not tested it yet but wanted get some feedback if the code already has issues that can lead to problems in the future. The issue is described in #106.,8449aa7d4100d043,https://github.com/ServiceWeaver/weaver/pull/257,"{'number': 257, 'state': 'closed', 'merged': False, 'created_at': '2023-04-14T10:28:42Z', 'merged_at': '2023-05-10T19:47:44Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_256,2023-04-14T10:17:33Z,solution to the issue-#106 described by @rgrandl\n\nI have implemented the Idea of @rgrandl but have not tested it yet. Just trying to get feedback if anything can be already seen that will build up to an issue.,8449aa7d4100d043,https://github.com/ServiceWeaver/weaver/pull/256,"{'number': 256, 'state': 'closed', 'merged': False, 'created_at': '2023-04-14T10:17:33Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_254,2023-04-13T22:59:10Z,"Update the reverser app for running on GKE.\n\nNamely:
  * Add the /healthz endpoint.
  * Add the public listener to the config.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/254,"{'number': 254, 'state': 'closed', 'merged': False, 'created_at': '2023-04-13T22:59:10Z', 'merged_at': '2023-04-14T22:14:56Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_253,2023-04-12T21:02:49Z,news about SW at Kubecon\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/253,"{'number': 253, 'state': 'closed', 'merged': False, 'created_at': '2023-04-12T21:02:49Z', 'merged_at': '2023-04-12T21:12:07Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-12. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_252,2023-04-11T19:35:01Z,"Added reverser example app, derived from wrap.\n\n## Overview

In PRs #235, #236, and #237, I added an example wrap app that wrapped text. Our plan was to use this app in a demo, explaining how to write and deploy applications. Additionally, we would host an instance of the app on GKE and let people play with it.

After implementing the app, we realized that it was a bit confusing. The text you wrote was getting wrapped naturally by the browser. The text returned by the Wrapper component was also getting wrapped, but in a different way that was imperceptible unless you understood what was going on. Plus, the implementation got a little too complicated.

This PR introduces a much simpler reverser app. It borrows the same UI from the wrap app but reverses text instead of wrapping it, which is easier to understand. The implementation of reversing is also much simpler than wrapping.

We'll continue to iterate on the example app. If we like this one, we can delete the wrap app in the future.

## Demo

[Reverser Demo.webm](https://user-images.githubusercontent.com/3654277/231269714-3dc23b05-974a-4bee-b441-0041a03020ac.webm)",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/252,"{'number': 252, 'state': 'closed', 'merged': False, 'created_at': '2023-04-11T19:35:01Z', 'merged_at': '2023-04-11T22:17:32Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_251,2023-04-11T16:45:29Z,Added basic telemetry to wrap app.\n\nThis PR adds two histograms to the wrap app and enables tracing. We'll show off this telemetry in the demo.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/251,"{'number': 251, 'state': 'closed', 'merged': False, 'created_at': '2023-04-11T16:45:29Z', 'merged_at': '2023-04-11T22:23:10Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_247,2023-04-10T23:25:04Z,"Fixed perfetto stale colocation group bug.\n\nBefore this PR, we arranged for Perfetto to group traces according to colocation group and colocation group replica. However, we no longer have the notion of colocation groups or replicas. As a result, the Perfetto code was silently treating every event as if it had come from group """" replica """".

This PR fixes the bug by using weavelet ids instead of colocation groups. This uglifies the UI a bit, but in a future CL, we can pick something prettier.

![9gvJBeDhkaKmbBc](https://user-images.githubusercontent.com/3654277/231017649-4b726584-d579-460d-9d70-236d7f997ac5.png)

I also simplified the Perfetto DB implementation by removing an unneeded table from the SQLite database. Before, the code had two tables:

```sql
CREATE TABLE IF NOT EXISTS replica_num (
    app TEXT NOT NULL,
    version TEXT NOT NULL,
    cgroup TEXT NOT NULL,
    cgroup_replica_id TEXT NOT NULL,
    num INTEGER NOT NULL,
    PRIMARY KEY(app,version,cgroup,cgroup_replica_id)
);

--- Next replica number for a colocation group.
CREATE TABLE IF NOT EXISTS next_replica_num (
    app TEXT NOT NULL,
    version TEXT NOT NULL,
    cgroup TEXT NOT NULL,
    next INTEGER NOT NULL,
    PRIMARY KEY(app,version,cgroup)
);
```

`replica_num` stored the replica number of every replica. `next_replica_num` was used to compute the next replica number. The `next_replica_num` table is unneeded, as we can compute the next replica number from the `replica_num table` directly.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/247,"{'number': 247, 'state': 'closed', 'merged': False, 'created_at': '2023-04-10T23:25:04Z', 'merged_at': '2023-04-11T16:38:41Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_246,2023-04-10T22:11:58Z,Updated metrics package documentation.\n\nThis PR adds documentation to the metrics package. This text is borrowed heavily from the docs on the website. I also fixed some broken code in the docs that were written before the metrics package was moved out of the core weaver package.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/246,"{'number': 246, 'state': 'closed', 'merged': False, 'created_at': '2023-04-10T22:11:58Z', 'merged_at': '2023-04-10T23:17:14Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_245,2023-04-10T19:48:02Z,"Fixed ""weaver metrics"" histogram average bug.\n\nRecall that the `weaver single metrics` and `weaver multi metrics` commands aggregate and print deployment metrics:

```console
$ weaver single metrics
╭──────────────────────────────────────────────────────────────────────────╮
│ // The line length, n, passed to Wrap                                    │
│ wrap_line_length: HISTOGRAM                                              │
├───────────────────┬────────────────────┬───────────────────────┬─────────┤
│ serviceweaver_app │ serviceweaver_node │ serviceweaver_version │ Average │
├───────────────────┼────────────────────┼───────────────────────┼─────────┤
│ wrap              │ e4f6ebcd           │ 793ac157              │ 40      │
╰───────────────────┴────────────────────┴───────────────────────┴─────────╯
```

Before this PR, the tools were reporting the sum instead of the average of a histogram. This PR fixes the bug.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/245,"{'number': 245, 'state': 'closed', 'merged': False, 'created_at': '2023-04-10T19:48:02Z', 'merged_at': '2023-04-10T23:11:22Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_244,2023-04-10T16:26:23Z,Upgraded to go 1.20.\n\nThis PR upgrades the Service Weaver module to go 1.20. We will no longer support go 1.19 and earlier. This will let us use some nice go 1.20 features like error trees: https://tip.golang.org/doc/go1.20#errors.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/244,"{'number': 244, 'state': 'closed', 'merged': False, 'created_at': '2023-04-10T16:26:23Z', 'merged_at': '2023-04-10T16:57:12Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_243,2023-04-10T15:50:39Z,Added new unexpired Discord link.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/243,"{'number': 243, 'state': 'closed', 'merged': False, 'created_at': '2023-04-10T15:50:39Z', 'merged_at': '2023-04-10T15:53:44Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_242,2023-04-09T12:05:48Z,"website: health check\n\nWhen deploying GKE, I don't see the documentation saying that the health check API is required.

I guess I should add an explanation.",c1b812d896137800,https://github.com/ServiceWeaver/weaver/pull/242,"{'number': 242, 'state': 'closed', 'merged': False, 'created_at': '2023-04-09T12:05:48Z', 'merged_at': '2023-04-12T00:00:58Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_238,2023-04-07T23:13:22Z,"Replaced ErrRetriable with RemoteCallError.\n\n## Retrying, The API

Before this PR, we had an error called `weaver.ErrRetriable`. The idea was that component method calls would sometimes return an error with an embedded `ErrRetriable`. You could detect this error with `errors.Is` and retry the failed method call:

```go
var val string
var err error
for i := 0; i < 5; i++ {
    val, err = cache.Get(ctx, ""key"")
    if errors.Is(err, weaver.ErrRetriable) {
        // Retriable system error! Retry.
        continue
    }
    break
}
```

In theory, this is great, but what exactly does it mean for an error to be retriable? Does it mean that the method call was guaranteed to never have started executing? If so, why don't we just retry the error for the user? Or does it mean that the method call was maybe partially or fully executed? But then, it might not be safe to retry the call. And what about system errors that are not retriable? How do I detect those?

## Retrying the API

This PR throws out `ErrRetriable` and replaces it with a much simpler and more straightforward `weaver.RemoteCallError` error. A `RemoteCallError` indicates that a component method call failed to execute properly (e.g., because of a failed machine or a network partition). That's it. It doesn't imply anything about the retry-ability of a call. Here's an illustrative example:

```go
// Call the foo.Foo method.
err := foo.Foo(ctx)
if errors.Is(err, weaver.RemoteCallError) {
    // foo.Foo did not execute properly.
} else if err != nil {
    // foo.Foo executed properly, but returned an error.
} else {
    // foo.Foo executed properly and did not return an error.
}
```

It is up to the user to retry failed calls carefully. Actually, this was always true, but I think the new API makes that clearer. Internally, if we detect that a method call failed and we are 100% sure it never started executing (e.g., because we failed to make a network connection in the first place), we can retry the call transparently for the user.

The new API is also easier to implement and allows us to remove some ugly `WrapError` related code that I had to introduce to avoid some cyclic dependencies.

In the future, we can extend the API with a set of canonical error codes if we want, similar to [this][1].

[1]: https://cloud.google.com/apis/design/errors",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/238,"{'number': 238, 'state': 'closed', 'merged': False, 'created_at': '2023-04-07T23:13:22Z', 'merged_at': '2023-04-10T23:34:25Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_237,2023-04-07T18:27:29Z,"Added copy button to wrap app.\n\n[Wrap Copy Demo.webm](https://user-images.githubusercontent.com/3654277/230659131-d1126e61-1e7c-4a46-8971-89fb89dc0462.webm)
",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/237,"{'number': 237, 'state': 'closed', 'merged': False, 'created_at': '2023-04-07T18:27:29Z', 'merged_at': '2023-04-10T18:28:31Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_236,2023-04-07T17:55:53Z,"Allow the user to change line length in wrap app.\n\nThis PR adds functionality to the wrap app to allow a user to change the length to which lines are wrapped.

[Wrap Demo.webm](https://user-images.githubusercontent.com/3654277/230654946-430141db-2eb5-4477-bc42-00f8eafa1326.webm)
",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/236,"{'number': 236, 'state': 'closed', 'merged': False, 'created_at': '2023-04-07T17:55:53Z', 'merged_at': '2023-04-10T18:20:23Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_235,2023-04-07T17:49:12Z,"Added example wrap application, which wraps text.\n\n@rgrandl and I have been planning a Service Weaver demo. We wanted to show an app that was simple but interesting. Also, if we could host the app on GKE and let people play with it, that would be a plus. We settled on a text wrapping application with a web frontend.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/235,"{'number': 235, 'state': 'closed', 'merged': False, 'created_at': '2023-04-07T17:49:12Z', 'merged_at': '2023-04-10T18:06:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_234,2023-04-06T23:17:25Z,"Improve the error message about missing WithConfig[T] embedding\n\nWhile we suggest the user to embed an appropriate `WithConfig[T]`, it's easy for users to make that change and retry building their app immediately.

However, without running `weaver generate` again, they'll see the same error message again, which is likely to confuse them.  Hence, this CL improves the error message to also remind the users to run `weaver generate` again after making appropriate changes to their component.",12eb4a124ebc5701,https://github.com/ServiceWeaver/weaver/pull/234,"{'number': 234, 'state': 'closed', 'merged': False, 'created_at': '2023-04-06T23:17:25Z', 'merged_at': '2023-04-07T04:16:21Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_231,2023-04-06T18:43:49Z,"Remove call.NetworkAddress\n\nI noticed that `call.NetworkAddress` was never referenced from the `internal/net/call` package (where it lives), and that it's only use was to parse a `call.NetEndpoint`.  

This PR removes the type, and replaces it with a `ParseNetEndpoint` function. This seems to simplify the code a bit. I find that fewer types in a package can make it easier to understand.

In a couple places I changed a field from `NetworkAddress` to either `string` or `NetEndpoint`.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/231,"{'number': 231, 'state': 'closed', 'merged': False, 'created_at': '2023-04-06T18:43:49Z', 'merged_at': '2023-04-07T16:46:30Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_230,2023-04-06T17:33:36Z,"internal/net/call: close listener before Serve exits\n\nThis PR makes a few small improvements to the `internal/net/call` package.

Primarily it moves the close of `net.Listener` from the caller into `Serve`. This matches the behaviour of https://pkg.go.dev/net/http#Server.Serve, which says ""Serve always returns a non-nil error and closes l"". There are 3 other related `Serve` functions in the `net/http` packakge which don't document this behaviour of closing the listener, but from what I can tell they all behave the same (because they all call `Server.Serve`).

This change allowed me to remove the `listener.Close` call from a number of tests. Notably `TestCancelServe` now behaves correctly. Previously cancelling the context would not cause `Serve` to exit (it was working in production because the caller was closing the listener), the test was passing because it also called `listener.Close`.

The second change was to the initialization of `ClientOptions.Balancer`. Originally I wanted to move the initialization of `opts.Balancer` into `withDefaults` so that all of the initialization happened in the same place, however that caused some tests to fail because the client had a second reference to the balancer. This second commit removes the extra reference. The lock continues to guard calls to `balancer.Pick`. The `balancer` reference itself is never modified after the type is initialized.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/230,"{'number': 230, 'state': 'closed', 'merged': False, 'created_at': '2023-04-06T17:33:36Z', 'merged_at': '2023-04-07T20:38:22Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_229,2023-04-05T23:06:29Z,Abut reference badge and Service Weaver header.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/229,"{'number': 229, 'state': 'closed', 'merged': False, 'created_at': '2023-04-05T23:06:29Z', 'merged_at': '2023-04-06T16:44:51Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_228,2023-04-05T21:39:19Z,"Moved ""weaver version"" into subcommands.\n\nBefore this PR, there was a global `weaver version` command that showed the version of the weaver binary. I realized this was confusing because `weaver gke` invokes a different binary. I moved the `weaver version` command into subcommands: `weaver single version`, `weaver multi version`, and `weaver ssh version`. In a future PR, I'll add a version subcommand for gke and gke-local as well.

## Example

```console
$ weaver single version
weaver single: commit=aa550f0a097180c05b0eb4fb2e20b05bf11b9a1a deployer=v0.2.0 target=linux/amd64
$ weaver multi version
weaver multi: commit=aa550f0a097180c05b0eb4fb2e20b05bf11b9a1a deployer=v0.2.0 target=linux/amd64
$ weaver ssh version
weaver ssh: commit=aa550f0a097180c05b0eb4fb2e20b05bf11b9a1a deployer=v0.2.0 target=linux/amd64
```",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/228,"{'number': 228, 'state': 'closed', 'merged': False, 'created_at': '2023-04-05T21:39:19Z', 'merged_at': '2023-04-05T21:56:54Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_227,2023-04-05T21:25:35Z,"Made purge kill processes as well.\n\n## Example

```console
$ weaver multi purge
WARNING: You are about to kill all processes which match the following regex:

    weaver multi (dashboard|deploy|logs|profile)

This currently includes the following processes:

    291044 /usr/local/google/home/mwhittaker/github/ServiceWeaver/weaver/cmd/weaver/weaver multi deploy weaver.toml
    308483 /usr/local/google/home/mwhittaker/github/ServiceWeaver/weaver/cmd/weaver/weaver multi dashboard

You will also delete the following paths used to store logs and data for
""weaver multi"" Service Weaver applications. This data will be deleted
immediately and irrevocably. Are you sure you want to proceed?""

    - /tmp/serviceweaver/logs/weaver-multi
    - /usr/local/google/home/mwhittaker/.local/share/serviceweaver/multi_registry

Enter (y)es to continue: y

weaver killed (pid 291044)
weaver killed (pid 308483)
Deleting /tmp/serviceweaver/logs/weaver-multi... ✅
Deleting /usr/local/google/home/mwhittaker/.local/share/serviceweaver/multi_registry... ✅
```

## Overview

Before this PR, `weaver multi purge` removed all files and data produced by `weaver multi`. And the same for `weaver single purge`. This PR changes the two commands to kill processes as well. `weaver multi purge`, for example, kills every process matching the following regex:

    weaver multi (dashboard|deploy|logs|profile)

Thanks @rgrandl for the great suggestion!",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/227,"{'number': 227, 'state': 'closed', 'merged': False, 'created_at': '2023-04-05T21:25:35Z', 'merged_at': '2023-04-05T21:49:43Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_226,2023-04-05T21:01:42Z,"Change profiling code to return a nil error when there are no errors.\n\nThis allows the caller to check if the error is nil, as opposed to checking if the error string is empty.

Other changes:
  * Make some NewTestLogger() methods private.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/226,"{'number': 226, 'state': 'closed', 'merged': False, 'created_at': '2023-04-05T21:01:42Z', 'merged_at': '2023-04-05T21:09:32Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_225,2023-04-05T19:20:51Z,Added deployers blog to news.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/225,"{'number': 225, 'state': 'closed', 'merged': False, 'created_at': '2023-04-05T19:20:51Z', 'merged_at': '2023-04-05T19:27:20Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_223,2023-04-04T18:33:36Z,"Performed miscellaneous multi deployer cleanups.\n\nThis PR cleans up the weaver multi deployer.

- I removed the use of `protos.Deployment`. I'm hoping we can remove this proto eventually. It should be obsolete now.
- The deployer now instantiates its own logs and trace databases.
- I renamed some variables and updates some stale comments.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/223,"{'number': 223, 'state': 'closed', 'merged': False, 'created_at': '2023-04-04T18:33:36Z', 'merged_at': '2023-04-06T16:51:40Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-04. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_222,2023-04-03T23:55:37Z,"Factored common functionality to routing package.\n\nBefore this PR, the multi deployer and SSH deployer had duplicate implementations of some routing logic. This PR:

- pulls out the duplicate code into a runtime/routing package,
- simplifies the implementation of the routing algorithm,
- adds a pretty printer&mdash;which is useful when debugging&mdash;and 
- adds some unit tests.

I can move the code to `internal/` if we think other deployers won't use it.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/222,"{'number': 222, 'state': 'closed', 'merged': False, 'created_at': '2023-04-03T23:55:37Z', 'merged_at': '2023-04-06T16:41:04Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_221,2023-04-03T20:59:17Z,"Added ""weaver purge"" command.\n\n## Example

```console
$ weaver multi purge
WARNING: You are about to delete the following directories used to store logs
and data for local Service Weaver applications. This data will be deleted
immediately and irrevocably. Are you sure you want to proceed?

    - /tmp/serviceweaver/logs/weaver-multi
    - /usr/local/google/home/mwhittaker/.local/share/serviceweaver/multi_registry

Enter (y)es to continue: y

Deleting /tmp/serviceweaver/logs/weaver-multi... ✅
Deleting /usr/local/google/home/mwhittaker/.local/share/serviceweaver/multi_registry... ✅
```

## Overview

This PR introduces `weaver single purge` and `weaver multi purge` commands that delete all logs and data produced by locally run Service Weaver applications. In the future, we may also want to kill lingering processes. For example, we could kill the gke-local controller and distributors.

## Motivation

The motivation for this PR is the same as #220. We're seeing some issues (e.g., #179, #154) that I think may be cause by version issues. Users run `weaver multi logs` on logs produced by a different version of Service Weaver, for example. `weaver purge` makes it easier to debug these kinds of issues, as we can tell people to run `weaver purge` before reproducing their reported bug.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/221,"{'number': 221, 'state': 'closed', 'merged': False, 'created_at': '2023-04-03T20:59:17Z', 'merged_at': '2023-04-05T21:17:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_220,2023-04-03T20:31:16Z,"Added ""weaver version"" command.\n\n## Example

```console
$ weaver version
weaver version 0.16.0 254d063fcc5a3c27f95869215dfa6bb36bbfbac6 linux/amd64
```

## Overview

This PR introduces a `weaver version` command which shows the version of the `weaver` tool. The output also includes the git commit at which the tool was built as well as the target OS and architecture.

## Motivation

As described in #219, a Service Weaver deployer and the app it is trying to deploy need to have compatible versions. We're seeing some issues (e.g., #179, #154) that I think may be cause by version issues. `weaver version` makes it easier to debug these kinds of issues, as people can include the output of `weaver version` in their bug reports.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/220,"{'number': 220, 'state': 'closed', 'merged': False, 'created_at': '2023-04-03T20:31:16Z', 'merged_at': '2023-04-05T17:26:17Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_219,2023-04-03T19:45:38Z,"Added prototype versioning system.\n\n## Version Issues

Service Weaver is currently at v0, which means we're making a lot of breaking changes to the code. This has the problem that a deployer and the app its trying to deploy may be at incompatible versions.

For example, imagine someone is trying to learn Service Weaver. They run `go install github.com/ServiceWeaver/weaver@latest`. A couple weeks later, they start writing a new Service Weaver application and run `go mod tidy`. `go mod tidy` picks up the latest version of Service Weaver which is likely incompatible with the stale version of the `weaver` tool they downloaded a couple weeks back. As a result, the `weaver` tool will likely fail to deploy the application, and it won't produce any meaningful error messages explaining why it failed.

## Proposed Solution

This PR introduces a proposed solution. It's not perfect, but hopefully it kickstarts some ideas on how to solve this annoying versioning issue. With this PR, we version the deployer API. A weavelet reports to the
envelope the deployer API version it was built with. The envelope can then check whether it supports the reported version, aborting if not. See `runtime/version.go` for more details.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/219,"{'number': 219, 'state': 'closed', 'merged': False, 'created_at': '2023-04-03T19:45:38Z', 'merged_at': '2023-04-05T17:21:36Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_217,2023-04-03T16:29:44Z,"Removed requirement that ids are RFC 4122 UUIDs.\n\nBefore this PR, we required that both deployment ids and weavelet ids were [RFC 4122 formatted UUIDs][uuid]. This PR lifts that requirement. Ids must be globally unique, but we don't impose any specific format on them. For some deployers, using more readable ids is preferable.

[uuid]: https://github.com/google/uuid",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/217,"{'number': 217, 'state': 'closed', 'merged': False, 'created_at': '2023-04-03T16:29:44Z', 'merged_at': '2023-04-03T19:26:06Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-04-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_215,2023-03-31T23:41:28Z,"Added twitter icon to top of website.\n\nThis PR adds a twitter icon to the top of the website beside the github icon. It, obviously, links to our new twitter!

![image](https://user-images.githubusercontent.com/3654277/229250658-7e1b8186-780c-42b5-b2c8-fa9c27ea8663.png)
",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/215,"{'number': 215, 'state': 'closed', 'merged': False, 'created_at': '2023-03-31T23:41:28Z', 'merged_at': '2023-03-31T23:47:41Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-31. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_214,2023-03-31T20:49:13Z,"Tweaked website's page widths and line heights.\n\nThis PR tweaks the website's page widths and line heights. Specifically, I narrowed the default page width from 80rem to 65rem. I shrunk the blog posts to 50rem. I also increased the line-height from 1 to 1.5. I also some made some miscellaneous cleanups. I removed some unused CSS classes, fixed some padding issues, etc.

| before | after |
| - | - | 
| ![before](https://user-images.githubusercontent.com/3654277/229226688-862bdfcf-74c5-44c5-a24d-564fee9ba1d7.png) | ![after](https://user-images.githubusercontent.com/3654277/229226685-40fedc28-d0ab-409f-8dfd-322fae89baa4.png) |
",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/214,"{'number': 214, 'state': 'closed', 'merged': False, 'created_at': '2023-03-31T20:49:13Z', 'merged_at': '2023-03-31T21:11:19Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-31. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_213,2023-03-31T19:36:01Z,"move internal babysitter under the multi deployer tool\n\nThe internal babysitter is used only by the multi deployer. It makes sense to move it in the tool/multi directory.

Also, renamed babysitter to deployer, because really there is a single babysitter managing everything which is the actual deployer. Some methods can be private now.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/213,"{'number': 213, 'state': 'closed', 'merged': False, 'created_at': '2023-03-31T19:36:01Z', 'merged_at': '2023-03-31T21:24:53Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-31. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_212,2023-03-30T23:44:58Z,add service weaver news\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/212,"{'number': 212, 'state': 'closed', 'merged': False, 'created_at': '2023-03-30T23:44:58Z', 'merged_at': '2023-03-30T23:50:33Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_211,2023-03-30T21:23:18Z,Add news section and discord channel\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/211,"{'number': 211, 'state': 'closed', 'merged': False, 'created_at': '2023-03-30T21:23:18Z', 'merged_at': '2023-03-30T22:56:42Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-30. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_210,2023-03-29T12:58:09Z,"Enable misspell linter and fix typos\n\nThis PR enables `misspell` linter in `golangci-lint` config. Also, correct typos in comments, tests, and error messages.",9aa12348931d2903,https://github.com/ServiceWeaver/weaver/pull/210,"{'number': 210, 'state': 'closed', 'merged': False, 'created_at': '2023-03-29T12:58:09Z', 'merged_at': '2023-03-30T15:01:24Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-29. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_207,2023-03-28T22:42:17Z,"Allow envelope RPCs to proceed even before Serve() is called.\n\nThis prevents a deadlock in the following situation.

```
  e, err := NewEnvelope(ctx, wlet, config)
  e.UpdateComponents([]string{""foo"", ""bar""})
  err = e.Serve()
```

Based on discussions with mwhittaker@.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/207,"{'number': 207, 'state': 'closed', 'merged': False, 'created_at': '2023-03-28T22:42:17Z', 'merged_at': '2023-03-28T23:34:26Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_206,2023-03-28T22:17:48Z,Replace the unsafe use of the runtime.FuncForPC\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/206,"{'number': 206, 'state': 'closed', 'merged': False, 'created_at': '2023-03-28T22:17:48Z', 'merged_at': '2023-03-28T22:25:22Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_205,2023-03-28T22:13:09Z,"Replace logger.Logger with slog (#203)\n\nGiven that slog has been accepted as part of go stdlib, we can get rid of our custom logger and use slog instead.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/205,"{'number': 205, 'state': 'closed', 'merged': False, 'created_at': '2023-03-28T22:13:09Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_204,2023-03-28T20:21:26Z,"Added GitHub action for uncommitted changes.\n\n`./dev/build_and_test generate` generates and modifies a number of files. It generates code for all the protos, it generates `weaver_gen.go` files, it updates `godeps.txt`, and it adds licenses to the tops of files. You're supposed to run `./build_and_test generate` before opening a PR, but it's easy to forget (I forget all the time).

This PR adds a GitHub action to check that you've run `./build_and_test generate`. Specifically, it runs the script and makes sure that no file has changed.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/204,"{'number': 204, 'state': 'closed', 'merged': False, 'created_at': '2023-03-28T20:21:26Z', 'merged_at': '2023-03-28T21:12:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_202,2023-03-28T01:00:02Z,"Don't call os.Cmd.Wait() before os.Cmd pipe operations are done.\n\nThis is part of the os.Cmd spec, and also fixes a bunch of races in envelope_test. Suggested by mwhittaker@.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/202,"{'number': 202, 'state': 'closed', 'merged': False, 'created_at': '2023-03-28T01:00:02Z', 'merged_at': '2023-03-28T16:50:01Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_201,2023-03-28T00:18:05Z,"Cleaned up runtime.proto.\n\nThis PR cleans up the protobufs in the deployer API. This PR shouldn't introduce any behavior changes. I mostly renamed things and moved things around to be clearer. For example, StartComponent was renamed to EnsureComponent since it doesn't always start a component. I also added documentation explaining the pipe API.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/201,"{'number': 201, 'state': 'closed', 'merged': False, 'created_at': '2023-03-28T00:18:05Z', 'merged_at': '2023-03-30T16:18:43Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_200,2023-03-27T23:42:18Z,"Remove conn.send and use conn.rpc consistently\n\nThis PR applies a couple of the cleanups found while working on #193

The `EnvelopeConn.send` and `WeaveletConn.send` methods can be removed. These methods were only adding a call to `conn.cleanup` on error, but the underlying `conn.send` already did this, so the extra cleanup was a no-op.

A couple new RPC methods were calling `conn.rpc` instead of `EnvelopeConn.rpc` which required them to repeat the error handling already available in `EnvelopeConn.rpc`. A commit in this PR corrects that usage, and renames `conn.rpc` to `conn.doBlockingRPC` to make the method names more distinct. The shorter `{EnvelopeConn, WeavletConn}.rpc` should be more convenient to use than the longer `conn.doBlockingRPC`.

Also moves some response checks from  `Envelope.RunProfiling` to `EnvelopeConn.DoProfilingRPC` so that all the checks happen in the same place.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/200,"{'number': 200, 'state': 'closed', 'merged': False, 'created_at': '2023-03-27T23:42:18Z', 'merged_at': '2023-03-28T15:58:07Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_199,2023-03-27T23:18:19Z,"Merge envelope Serve() and Wait() methods.\n\nThis simplifies the API and makes errors less likely (e.g., Wait() on an envelope without calling Serve() beforehand). Suggested by mwhittaker@.

Other changes:
  * Simplified the code for envelope/envelope-conn.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/199,"{'number': 199, 'state': 'closed', 'merged': False, 'created_at': '2023-03-27T23:18:19Z', 'merged_at': '2023-03-27T23:58:40Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_198,2023-03-27T22:36:19Z,"Remove unused parameters and remote-only methods from env interface\n\nFor your consideration, this PR removes a few things from the `env` interface.

The `CreateLogSaver` args were not used. Both callers use `newAttrLogger` to add attributes to the logger. This seems like a nice way to handle attributes. The error return from `CreateTraceExporter` was also not used.

The primary change is to remove the two remote-only methods from the interface. These methods are called from a block that is only used when not single process.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/198,"{'number': 198, 'state': 'closed', 'merged': False, 'created_at': '2023-03-27T22:36:19Z', 'merged_at': '2023-03-27T23:05:21Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_197,2023-03-27T21:50:45Z,"Unflaked weavelet race condition.\n\nBefore this PR, there was a race condition in starting the weavelet. The weavelet created a `WeaveletConn` with itself as a handler. This `WeaveletConn` would immediately start serving requests and calling into the handler. However, the handler (i.e. the weavlet) wasn't yet fully constructed. There was a race between initializing some fields of the weavelet and those fields being used by the handler.

This PR fixes the race by delaying when the `WeaveletConn` starts serving until after the weavelet is fully initialized.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/197,"{'number': 197, 'state': 'closed', 'merged': False, 'created_at': '2023-03-27T21:50:45Z', 'merged_at': '2023-03-27T22:15:47Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_196,2023-03-27T21:01:02Z,Removed unused LoadReportInterval global variable.\n\nThe variable was obsoleted by PR #182.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/196,"{'number': 196, 'state': 'closed', 'merged': False, 'created_at': '2023-03-27T21:01:02Z', 'merged_at': '2023-03-28T21:34:45Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_195,2023-03-27T19:37:53Z,"Added multiple components to step-by-step tutorial\n\nBefore this PR, it wasn't clear from our docs how a component could get a handle to another component. This PR expands the step-by-step tutorial with a new `Cache` component used by the `Reverser` component. The step-by-step guide now explains `Init` methods and how components can get handles to one another. I also moved some text around so that components are now introduced before listeners.

See also #188 and #185.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/195,"{'number': 195, 'state': 'closed', 'merged': False, 'created_at': '2023-03-27T19:37:53Z', 'merged_at': '2023-03-31T21:19:44Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_194,2023-03-27T18:17:18Z,"Graceful cleanup of babysitter, envelope, and envelope conn.\n\nIn particular, we allow the caller of the above APIs to:
  * Stop the babysitter/envelope/envelope-conn early by closing the context.
  * Wait for the babysitter/envelope/envelope-conn to terminate.

By the time the babysitter/envelope/envelope-conn is terminated, we guarantee that all of the internal state has been cleaned up.

Other changes:
  * After discussion with mwhittaker@, changed the envelope/envelope-conn APIs to pass EnvelopeHandler to a call to Serve(), instead of the constructor.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/194,"{'number': 194, 'state': 'closed', 'merged': False, 'created_at': '2023-03-27T18:17:18Z', 'merged_at': '2023-03-27T22:30:43Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_193,2023-03-26T20:06:02Z,"Reduce overlap between Envelope and EnvelopeConn\n\nHello service weaver team! This PR explores another option for the relationship between `internal/envelope/conn.Conn`, `internal/envelope/conn.EnvelopeConn` and `runtime/envelope.Envelope`. Currently `internal/envelope` contains a `conn.Conn` used for communicating over pipes, and both an envelope and weavlet specific type for handling messages on either side of that connection. This approach has some nice properties, but also seems to result in a lot of method mirroring between `Envelope` and `EnvelopeConn` and similarly between `remoteEnv` and `WeaveletConn`.

The approach explored in this PR is to first export `Conn` and a few of its methods. The exported type has an interface that looks like this:

```go
type conn interface {
  Send(msg proto.Message) error
  Recv(msg Resp) error
  RPC(request proto.Message) (Resp, error)
  Cleanup(err error)
}
```

By exporting `Conn` the `EnvelopeConn` type can be moved into `runtime/envelope` next to `Envelope`. Moving `EnvelopeConn` allows for the removal of the duplicate `EnvelopeHandler` type, and also some of the mirrored methods (`HealthStatusRPC`, `GetLoadInfoRPC`, etc).

Along the way I noticed two things:
1. The `EnvelopeConn.send` and `WeavletConn.send` methods can be removed (6c78a73a2e85dfc3253948bb186590ea4db51b3a). These methods were only adding a call to `Conn.Cleanup` on error, but the underlying `Conn.Send` already did this, so the extra `Cleanup` was a no-op.
2. The `EnvelopeConn.RPC` and `WeaveletConn.RPC` methods can be removed (2a15611ad92e4bd1aac583281ce2faab9682b0d7) by adding a type parameter to `Conn`.

These two changes could be implemented without moving `EnvelopeConn`. I could cherry-pick those changes onto main if the rest of this change is not accepted.

This PR only moves `EnvelopeConn`, but I think a similar change could be made with `WeaveletConn`. That's probably better off after #191 is merged.

~I think the biggest disadvantage to this approach is that now the `runtime/envelope` package has an `EnvelopeConn` type exported with a couple methods on it.~

I was able to un-export `EnvelopeConn` by smuggling the reader and writer through `context.Context`. So now tests can use `NewEnvelope` and don't need to be aware of `EnvelopeConn`. This part of the change probably needs some better comments. 

With these changes `EnvelopeConn` becomes exclusively a type to receive messages on the `Conn` and call the appropriate `EnvelopeHandler` method when the message is received.

I've made this PR a draft initially to gather feedback, and wait for #191 to merge.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/193,"{'number': 193, 'state': 'closed', 'merged': False, 'created_at': '2023-03-26T20:06:02Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-26. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_192,2023-03-24T23:38:26Z,"Removed groups entirely from deployer API!\n\nRecently, we've been doing a lot of refactoring to remove co-location groups from the deployer API: #184, #182, #181. This PR caps this effort off by removing them entirely. Now, the weavelet is completely unaware of groups. It starts whatever components the deployer tells it to start.

To enable this change, I added a boolean `Local` field to the `RoutingInfo` proto. When this field is set, a weavelet routes requests locally. Otherwise, it routes requests over the network. Note that this is orthogonal to whether or not a component is running locally. A weavelet may want to call a remote instance of a component even if it has a local instance running. Routed objects, for example, do this to respect sharding.

This also changes the flow of weaver.Get. Before, when a weavelet called `weaver.Get[T]`, if `T` was local and unrouted, the weavelet would create a local instance and route to it immediately. Now, `Get[T]` blocks until it receives a `RoutingInfo` from the deployer to learn whether it should be routing locally or remote.

Right now, the decision to route locally is rigid. For a given component, you either always route locally or always don't. In the future, we could make this more flexible.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/192,"{'number': 192, 'state': 'closed', 'merged': False, 'created_at': '2023-03-24T23:38:26Z', 'merged_at': '2023-03-27T16:33:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_191,2023-03-24T20:08:52Z,"Made envelopes push components and routing info.\n\nBefore this PR, a weavelet issued [blocking gets][1] to the envelope to learn which components to run and to get updated routing information. This version-based long polling API was complicated to explain. People had to understand what long polling was and learn the details of our version semantics. I also felt that it was a bit tricky to implement a deployer using this API.

This PR replaces the long polling with envelope-initiated RPCs: `UpdateComponents` and `UpdateRoutingInfo`. Now, whenever the set of components changes or a component's routing info changes, the deployer pushes an update to the weavelet.

I think this API is simpler, but a deployer implementer does have to be careful not to forget to call `UpdateComponents` or `UpdateRoutingInfo`. This can be tricky when events happen in unexpected orders. For example, a weavelet may subscribe to a component before the component exists.

With this API, our weavelet also has to be careful about how it handles `UpdateComponents` and `UpdateRoutingInfo`. In general, a weavelet handler should never block or touch the pipe. Doing so makes it easy for a deployer to deadlock. For example, imagine an envelope receives a `StartComponent` request. It grabs a lock and then issues an `UpdateComponents` request. If the weavelet then issues another RPC over the pipe, and the envelope handles this RPC by grabbing the same lock, there is deadlock.

### Future Work

Note that there are still lingering artifacts in the pipe API. There are still co-location groups here and there despite the work in PR #181. The weavelet still assumes placement based on groups. I'll continue to fix these issues in future PRs.

### Details

I removed versioned.Versioned from the weavertest and weaver multi deployers. The SSH deployer still uses it, but we can remove that in the future.

[1]: https://javascript.info/long-polling",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/191,"{'number': 191, 'state': 'closed', 'merged': False, 'created_at': '2023-03-24T20:08:52Z', 'merged_at': '2023-03-27T16:14:17Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_190,2023-03-24T19:22:04Z,Hello Example return on error\n\nNoticed in the error handling block that the func did not return when an error would occur from the reverser.,6432c6a613864550,https://github.com/ServiceWeaver/weaver/pull/190,"{'number': 190, 'state': 'closed', 'merged': False, 'created_at': '2023-03-24T19:22:04Z', 'merged_at': '2023-03-24T20:07:02Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_189,2023-03-24T11:51:03Z,Fix status cmd error on windows\n\nA dead deployment `Registry.dead()` will return `true` because the `syscall.ECONNREFUSED` doesn't work on Windows. So there will be problems when running the status command. Same issue https://github.com/ServiceWeaver/weaver/issues/111 https://github.com/ServiceWeaver/weaver/issues/130 https://github.com/ServiceWeaver/weaver/issues/187,6f7dafd7ed8b6a0c,https://github.com/ServiceWeaver/weaver/pull/189,"{'number': 189, 'state': 'closed', 'merged': False, 'created_at': '2023-03-24T11:51:03Z', 'merged_at': '2023-03-24T16:00:02Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_186,2023-03-23T22:41:23Z,"Fix the babysitter deadlock caused by double-locking.\n\nThis breakage was introduced in my PR:
  https://github.com/ServiceWeaver/weaver/pull/184",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/186,"{'number': 186, 'state': 'closed', 'merged': False, 'created_at': '2023-03-23T22:41:23Z', 'merged_at': '2023-03-23T23:49:27Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_184,2023-03-23T00:05:44Z,"Remove RegisterReplica method from the envelope <-> weavelet protocol.\n\nInstead, we get the weavelet's runtime information immediately after creating the weavelet.

Suggested by mwhittaker@.

Other changes:
  * Minor Envelope cleanup.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/184,"{'number': 184, 'state': 'closed', 'merged': False, 'created_at': '2023-03-23T00:05:44Z', 'merged_at': '2023-03-23T21:15:09Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_183,2023-03-22T23:11:35Z,"Fixed subtle potential EnvelopeConn deadlock.\n\n###  The Bug

Recall that an envelope and a weavelet issue RPCs to one another via a pair of pipes. Before this PR, the envelope's main loop looked something like this:

```go
for {
    msg := &protos.WeaveletMsg{}
    e.conn.recv(msg)
    e.handleMessage(msg)
}
```

An envelope receives both RPC requests and RPC responses from the weavelet. `conn.recv` handles the RPC responses internally but returns all RPC requests, which are then handled by `handleMessage`.

This code is susceptible to a subtle deadlock. Consider what happens when, in the process of handling an RPC *from* the weavelet, `handleMessage` issues an RPC *to* the weavelet. `handleMessage` sends an RPC request to the weavelet and then blocks waiting for a response. The weavelet receives and responds to the request. Because `handleMessage` is blocking, `conn.recv` is never called, but `conn.recv` needs to be called to wake up `handleMessage`.

Currently, our code does not deadlock because none of our deployers issue RPCs to a weavelet when processing an RPC from a weavelet. However, [our pending deployer API changes][1] will make this communication pattern very common. When an envelope receives a request to start a component for example, the envelope will issue `UpdateComponent` RPCs to all the weavelets that should start the component.

### A Broken Fix

My first thought to fix the bug was to run every invocation of `handleMessage` in its own goroutine. This is similar to how our RPC server is implemented (see [`internal/net/call/call.go`][2]). However, the envelope is required to process RPCs from the weavelet in order. Among many reasons, this strict ordering guarantee ensures that logs are reported chronologically.

### This PR's Fix

This PR fixes the bug by instead running one goroutine to receive messages and another goroutine to handle them. Messages are exchanged between the two goroutines using a channel to preserve their order.

### A Proposed Fix

This PR works (I think), but I think the code is now a bit complicated. I think we may be able to simplify things if we used four pipes instead of two. The four pipes will be divided into two pairs. One pair will be used for RPCs from the envelope to the weavelet, and the other pair will be used for RPCs from the weavelet to the envelope.

[1]: https://github.com/ServiceWeaver/weaver/pull/162
[2]: https://github.com/ServiceWeaver/weaver/blob/dbe6df4ba8c063a18d41c5f51f9b70f47af67abc/internal/net/call/call.go#L716",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/183,"{'number': 183, 'state': 'closed', 'merged': False, 'created_at': '2023-03-22T23:11:35Z', 'merged_at': '2023-03-23T21:55:52Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-22. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_182,2023-03-21T23:52:46Z,Change load report from push to pull\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/182,"{'number': 182, 'state': 'closed', 'merged': False, 'created_at': '2023-03-21T23:52:46Z', 'merged_at': '2023-03-22T15:57:57Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_181,2023-03-21T19:56:47Z,"Removed co-location groups from bulk of pipe API.\n\nRecall that, before this PR, the deployer API had four methods related to weavelets and components: `RegisterReplica`, `StartComponent`, `GetComponentsToStart`, and `GetRoutingInfo`. The notion of a co-location group was baked into these APIs. A weavelet would ask for a group's routing info, not a component's, for example.

This PR removes the idea of a co-location group from the APIs and makes them component-centric instead. This is desirable because co-location groups are implementation details and should not be forced into the API. Deployers are still free to use the notion of a co-location group internally---and right now, all our deployers do---but they do not have to.

Note that this change does not eliminate co-location groups from the API entirely. There are still some message that reference groups, and the weavelet still uses the idea of a group. Future changes to the pipe API should eliminate these entirely.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/181,"{'number': 181, 'state': 'closed', 'merged': False, 'created_at': '2023-03-21T19:56:47Z', 'merged_at': '2023-03-22T21:39:25Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_180,2023-03-21T15:59:12Z,"tool/generate: error if two types implement the same component interface\n\nWhen there are two implementations of the same component the generated code is not valid. The changes in this PR prevent the problem by checking for duplicate implementations in `tool/generate` and printing an informative error to help the user fix the problem.

Fixes #153
",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/180,"{'number': 180, 'state': 'closed', 'merged': False, 'created_at': '2023-03-21T15:59:12Z', 'merged_at': '2023-03-21T17:28:04Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_178,2023-03-20T23:30:39Z,Don't restart weavelets in the envelope.\n\nRelated code cleanup.,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/178,"{'number': 178, 'state': 'closed', 'merged': False, 'created_at': '2023-03-20T23:30:39Z', 'merged_at': '2023-03-21T18:00:58Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_177,2023-03-20T21:38:42Z,Terminate the multi deployment when the weavelet fails with error.\n\nPart of a series of changes where the envelope no longer restarts the weavelet automatically.,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/177,"{'number': 177, 'state': 'closed', 'merged': False, 'created_at': '2023-03-20T21:38:42Z', 'merged_at': '2023-03-20T21:44:19Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_176,2023-03-20T21:30:45Z,"Cleaned up SSH deployer's manager.\n\nThis PR cleans up the SSH deployer's manager. Specifically, I ported the changes we made to the `weaver multi` babysitter in #172 and #174. These cleanups will make it easier to make some of the deployer API changes we've been working on.

I noticed that the SSH babysitter re-uses a lot of the same code as the `weaver multi` babysitter. I don't think we should merge the two into one mega babysitter. In fact, I recently split the `weaver multi` babysitter from the weavertest babysitter, so I think there's value in having things separate. But, maybe we can pull out some of the common code without having a frankenstein babysitter API.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/176,"{'number': 176, 'state': 'closed', 'merged': False, 'created_at': '2023-03-20T21:30:45Z', 'merged_at': '2023-03-20T21:57:28Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_175,2023-03-20T20:48:27Z,"Fix some typos. When we did the big renaming, some identifiers were n…\n\n…ot updated as well.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/175,"{'number': 175, 'state': 'closed', 'merged': False, 'created_at': '2023-03-20T20:48:27Z', 'merged_at': '2023-03-20T20:56:08Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-20. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_174,2023-03-19T23:24:46Z,"Implement the versioned.Versioned type with locks.\n\nJoint work with mwhittaker@.

Other changes:
  * Converted babysitter to finer-grained locking, to remove the possible lock inversion w.r.t. b.mu.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/174,"{'number': 174, 'state': 'closed', 'merged': False, 'created_at': '2023-03-19T23:24:46Z', 'merged_at': '2023-03-20T16:20:43Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-19. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_173,2023-03-17T21:01:34Z,"Implemented weavertest multiprocess deployer.\n\nBefore this PR, `weaver multi` and weavertest shared the same babysitter. Both `weaver multi` and weavertest deployed applications across multiple processes, so it made sense not to duplicate the code.

However, while we weren't duplicating code, we were also muddying the abstractions of the babysitter, as everything had to work for both `weaver multi` and weavertest. A good example of this is how we dealt with pipes. For a multiprocess weavertest, the main component runs in the same process as the babysitter. The babysitter doesn't expect this, so weavertest created its own `EnvelopeConn` and used a babysitter as an `EnvelopeHandler`. This worked but it wasn't easy to understand why. It really broke the abstraction of the babysitter.

This PR implements a new weavertest multiprocess deployer. The deployer does duplicate *some* code from the old babysitter, but much of the babysitter's implementation wasn't needed (e.g., code for handling metrics, routing, tracing). The new weavertest deployer has a number of improvements:

- Cleaner handling of pipes. Now, the deployer is very much aware that the main component is running in the same process. I also reworked the Bootstrap API to avoid a particularly nasty garbage collection bug we were facing with pipes.
- Better teardown. The `weaver multi` babysitter doesn't expect to get shut down, but a weavertest deployer does. The new deployer is more careful about killing all subprocesses and stopping all goroutines when a unit test ends.
- We're in the process of cleaning up the deployer API. As I was implementing some of these changes, I realized they made it very hard to share code between `weaver multi` and weavertest. This was again because the abstractions were being tortured to work across the two.
- Enables future testing innovations. We've been toying with the idea of implementing more sophisticated testing. For example, we may randomly fail a component. Now that weavertest has its own deployer, these changes will be much easier to make.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/173,"{'number': 173, 'state': 'closed', 'merged': False, 'created_at': '2023-03-17T21:01:34Z', 'merged_at': '2023-03-20T17:37:04Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_172,2023-03-16T22:17:57Z,"Cleaned up the multi/weavertest babysitter.\n\nThis PR cleans up the babysitter used by weaver multi and weavertest. The changes don't impact the behavior of the babysitter; they simply clean up the code. I made these changes in preparation for some bigger changes I'm making in an effort to simplify the deployer API.

I made the following changes:

- I replaced the babysitter's use of `versioned.Map` with a new `versioned.Versioned` abstraction (first introduced in #162). Previously, a babysitter was storing a single piece of state in a map, which was a bit confusing. The new `Versioned` abstraction allows for the next change.

- I introduced a `group` struct to store all the information about a group. Previously, the state was spread across a couple different fields, and in some `versioned.Map`s.

- I removed `babysitter.proto`. I realized that there was no need to be using protos. Now, everything is vanilla Go.

- I moved the code in `profile.go` to `babysitter.go`, so the babysitter is now a single file.

Ironically, a lot of the changes introduced in this PR will be deleted in future PRs as we transition to the new deployer API, but these changes will help that transition.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/172,"{'number': 172, 'state': 'closed', 'merged': False, 'created_at': '2023-03-16T22:17:57Z', 'merged_at': '2023-03-17T16:08:57Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_170,2023-03-16T16:27:44Z,Ran clang-format on runtime.proto.\n\nI ran clang-format on `runtime.proto` to fix up the formatting. I reworded a couple of comments to avoid some awkward line wrapping.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/170,"{'number': 170, 'state': 'closed', 'merged': False, 'created_at': '2023-03-16T16:27:44Z', 'merged_at': '2023-03-16T16:39:37Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_169,2023-03-16T14:44:44Z,"fix multi deploy on Windows\n\nThis PR fixes a problem with multi-process deployment on Windows. The windows inherit pipe uses handles, cmd.ExtraFiles is not supported on Windows. See issue https://github.com/ServiceWeaver/weaver/issues/127",6f7dafd7ed8b6a0c,https://github.com/ServiceWeaver/weaver/pull/169,"{'number': 169, 'state': 'closed', 'merged': False, 'created_at': '2023-03-16T14:44:44Z', 'merged_at': '2023-03-20T15:42:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_168,2023-03-16T01:10:29Z,docs: add homebrew installation note\n\n- Add a homebrew installation note.,d8b9afeddc737fb4,https://github.com/ServiceWeaver/weaver/pull/168,"{'number': 168, 'state': 'closed', 'merged': False, 'created_at': '2023-03-16T01:10:29Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_167,2023-03-15T22:58:01Z,"Website copy button only copies commands, if present.\n\nOtherwise, it copies the entire text.

This fixes the reported issue where the commands were copied with ""$"" prefix, and as a result can't be just pasted into the terminal.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/167,"{'number': 167, 'state': 'closed', 'merged': False, 'created_at': '2023-03-15T22:58:01Z', 'merged_at': '2023-03-15T23:24:27Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_166,2023-03-15T21:44:48Z,"Update the website with the new GKE instructions.\n\nThese new instructions work on other platforms, in addition to Linux.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/166,"{'number': 166, 'state': 'closed', 'merged': False, 'created_at': '2023-03-15T21:44:48Z', 'merged_at': '2023-03-15T21:55:46Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_164,2023-03-14T23:38:19Z,"Only run cloud build when pushing to main.\n\nBefore this PR, a GitHub action built the code whenever it was pushed or whenever a pull request was created. If you pushed a branch and opened a pull request for it, all the checks would run twice. This PR changes the GitHub action to run when pushed to main or when a pull request is opened. This should prevent the actions from running twice.

See [here][1] for more information.

[1]: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#push",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/164,"{'number': 164, 'state': 'closed', 'merged': False, 'created_at': '2023-03-14T23:38:19Z', 'merged_at': '2023-03-15T22:59:42Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_163,2023-03-14T23:32:33Z,"Added a footer to the website for spacing.\n\nBefore this PR, our website had no padding at the bottom. This meant that the end of page was at the very bottom of the screen. This made reading the end of a page---like the end of a blog post---a little irritating. This PR adds a footer to the bottom of every page. In the future, we may want to add some contents to the footer, but for now it exists just to add a bit of space.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/163,"{'number': 163, 'state': 'closed', 'merged': False, 'created_at': '2023-03-14T23:32:33Z', 'merged_at': '2023-03-15T22:31:30Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_162,2023-03-14T23:11:48Z,"Wrote ""How to Implement a Deployer"" blog.\n\nIn this PR, I write a ""How to Implement a Deployer"" blog post that describes what deployers are and how to write one. The blog post includes a fully working multiprocess deployer, a fully working single process deployer, and a trivial deployer that interacts with pipes directly. Writing this blog post also induced us to make [a number of improvements to the deployer API](https://github.com/ServiceWeaver/weaver/pulls?q=is%3Apr+is%3Aclosed+label%3Adeployer-api). Hopefully, this blog post will encourage community contributed deployer implementations!",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/162,"{'number': 162, 'state': 'closed', 'merged': False, 'created_at': '2023-03-14T23:11:48Z', 'merged_at': '2023-04-05T19:16:00Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_161,2023-03-14T22:34:36Z,"Update workflow to ""fork and branch""\n\n",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/161,"{'number': 161, 'state': 'closed', 'merged': False, 'created_at': '2023-03-14T22:34:36Z', 'merged_at': '2023-03-14T23:18:08Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_160,2023-03-14T10:51:44Z,Refactor example/collatz/colocated.toml right colocate\n\n,ce33ddcb8fb35d9f,https://github.com/ServiceWeaver/weaver/pull/160,"{'number': 160, 'state': 'closed', 'merged': False, 'created_at': '2023-03-14T10:51:44Z', 'merged_at': '2023-03-14T16:25:58Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_158,2023-03-14T02:04:19Z,"fix crash when failed to open Perfetto database on DashboardCommand()\n\nHi @mwhittaker, I make a new PR for #129.",72383f00d7e08920,https://github.com/ServiceWeaver/weaver/pull/158,"{'number': 158, 'state': 'closed', 'merged': False, 'created_at': '2023-03-14T02:04:19Z', 'merged_at': '2023-03-14T16:02:24Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_157,2023-03-13T21:48:43Z,"Rename method receiver and small improvements to routelet\n\nThe first commit removes the `env` field from `routelet`, and updates `routelet.watchRoutingInfo` to use the `env` argument. Previously it was using the argument for one call, and the field for two others. Now it uses the arg consistently for all 3.

The second commit removes an unused `error` return from `weavelet.onNewRoutingInfo` (found using the `unused` linter), which simpifies the caller by removing the need to log an error.

The third commit addresses this comment (https://github.com/ServiceWeaver/weaver/pull/155#discussion_r1134600757) by fixing the method receiver name.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/157,"{'number': 157, 'state': 'closed', 'merged': False, 'created_at': '2023-03-13T21:48:43Z', 'merged_at': '2023-03-14T16:09:30Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_156,2023-03-13T20:09:53Z,"Fixed UseLocalhost bug introduced in PR #115.\n\nBefore PR #115, the `WeaveletInfo` proto had a `UseLocalhost` field. When true, weavelets would listen on localhost for external listeners (the kind returned by the `Instance.Listener` method). In PR #115, I removed the `UseLocalhost` field and replaced it with a `GetAddress` API.

However, I didn't actually remove the field, and the field was being used for more than I initially thought. The `UseLocalhost` field was still in `WeaveletInfo` and was being used for internal listeners (the kind that a weavelet uses to execute RPCs). The PR changed 'weaver multi' to not set the `UseLocalhost` field which led to weavelets listening on `$HOSTNAME` rather than localhost.

This PR fixes the bug. I replace `UseLocalhost` with `SingleMachine` since it parallels the existing `SingleProcess` field better and I think it's a bit clearer (use localhost for what?).

I also removed some related unused fields from the `WeaveletInfo` proto.

Fixes #154.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/156,"{'number': 156, 'state': 'closed', 'merged': False, 'created_at': '2023-03-13T20:09:53Z', 'merged_at': '2023-03-13T20:32:35Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_155,2023-03-13T18:40:25Z,"Remove the circular reference between ssh/impl.babysitter and Envelope\n\nThank you for all the prompt reviews on my pull requests! This one is a few small changes I noticed while reading over the code.

The first commit simplifies the relationship between `internal/tool/ssh/impl.babysitter` and `runtime/envelope.Envelope`. Currently `babysitter` has a reference to `Envelope` and is passed to Envelope as the implementation of `EnvelopeHandler`. In this commit I extracted the metrics collection to a new `metricsCollector` type. The result is `babysitter` becomes only the implementation of `EnvelopeHandler`, and `Envelope` is passed to the `metricsCollector` so that it can perform operations.

I've found that often code can be easier to read when there aren't circular references between types. My hope is that this change makes the `ssh` deployer implementation a bit easier to read.

**Before**

```mermaid
flowchart LR
  Run --> babysitter --> Envelope --> babysitter
  Run --> Envelope
```

**After**
```mermaid
flowchart LR
  Run --> Envelope --> babysitter
  Run --> metricsCollector --> Envelope
```

The second commit fixes some typos and removes some unused code in `generate`.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/155,"{'number': 155, 'state': 'closed', 'merged': False, 'created_at': '2023-03-13T18:40:25Z', 'merged_at': '2023-03-13T19:35:04Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_152,2023-03-11T23:59:37Z,"Remove from runtime/envelope\n\nThis PR is a small collection of cleanups in the `runtime/envelope` package for your consideration. There may be good reasons not to make these changes. I'm happy to remove any of the commits in this PR.  

I've made each change in a separate commit, and provided more detail in the commit messages, so may be best viewed by individual commit. Two of the changes are very small, the the larger changes are:

1. Use `type EnvelopeHandler conn.EnvelopeHandler` to remove the duplicate definition of `EnvelopeHandler`.
2. Replace `Options.GetEnvelopeConn` with an exported `SetConn`.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/152,"{'number': 152, 'state': 'closed', 'merged': False, 'created_at': '2023-03-11T23:59:37Z', 'merged_at': '2023-03-13T17:00:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_151,2023-03-11T22:50:46Z,"Enable errcheck linter on production files\n\nCloses #90

This PR completes the work to enable the `errcheck` linter on non-test files. There are two changes:

1. handle and print errors related to serving the perfetto backend
2. ignore errors from async calls to `conn.send`. `conn.send` captures the error as `conn.failure`, and any subsequent calls to `send` will return the first error. Ignoring the `send` error is these cases should be safe because  because the error will be related a bit later, not completely lost.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/151,"{'number': 151, 'state': 'closed', 'merged': False, 'created_at': '2023-03-11T22:50:46Z', 'merged_at': '2023-03-13T16:46:48Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-11. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_148,2023-03-10T18:58:26Z,"Removed StartColocationGroup from the pipe API.\n\nConsider a component A that calls `weaver.Get` on a different component B. Before this PR, the weavelet hosting A would send two messages over the pipe to the envelope.

1. It would send a `StartComponent` message indicating that the B component should be started by B's colocation group.
2. It would send a `StartColocationGroup` message indicating that B's colocation group should be started, if it hasn't already.

This PR deletes the unneeded `StartColocationGroup` message. When a weavelet sends a `StartComponent` message, the envelope now registers that the component should be started *and* starts its colocation group, if it hasn't already. This simplifies the pipe API and makes implementing deployers a little bit easier.

I also removed some unneeded fields in the `StartComponent` proto.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/148,"{'number': 148, 'state': 'closed', 'merged': False, 'created_at': '2023-03-10T18:58:26Z', 'merged_at': '2023-03-13T16:54:14Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_144,2023-03-10T03:56:45Z,Fix http proxy defaults to avoid running out of requesting address\n\nsee issue described in https://github.com/ServiceWeaver/weaver/issues/131,24f6fbbc51c64d72,https://github.com/ServiceWeaver/weaver/pull/144,"{'number': 144, 'state': 'closed', 'merged': False, 'created_at': '2023-03-10T03:56:45Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_143,2023-03-10T03:40:42Z,"Fix babysitter http proxy defaults to avoid running out of requesting\n\nsee issue described in https://github.com/ServiceWeaver/weaver/issues/131, also need a new Transport to avoid panic",24f6fbbc51c64d72,https://github.com/ServiceWeaver/weaver/pull/143,"{'number': 143, 'state': 'closed', 'merged': False, 'created_at': '2023-03-10T03:40:42Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_141,2023-03-10T00:56:13Z,"Don't treat colocation group replica ids as UUIDs.\n\nGKE deployer uses pod names as replica ids, mostly to be able to quickly determine the set of replicas by reading pod information using Kubernetes APIs.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/141,"{'number': 141, 'state': 'closed', 'merged': False, 'created_at': '2023-03-10T00:56:13Z', 'merged_at': '2023-03-10T00:59:38Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_138,2023-03-09T21:15:12Z,"Move CreateAndRunEnvelopeForMain to weavetest\n\nWhile looking at handling the last few remaining unhandled errors for #90 I noticed that two of those unhandled errors are in `Babysitter.CreateAndRunEnvelopeForMain`. The errors are returned by `Run` functions that run in goroutines (`Envelope.Run`, `EnvelopeConn.Run`). In the production code path these errors are handled (at least logged), but in `weavertest` they are dropped. I'm opening this PR to get your thoughts on one option for handling these errors.

The only caller of `Babysitter.CreateAndRunEnvelopeForMain` was `weavertest.initMultiProcess`, so I started by inlining `CreateAndRunEnvelopeForMain` into the caller. This removed the need for the `dontGC` package-level variable. The references to the unused `os.File` are held by a closure passed to `t.Cleanup`. This should prevent them from being GC'ed (the tests in `weavertest/internal` appear to confirm). 

I'll add some comments inline about how this change might make it easier to manage the lifecycle of goroutine from `weavertest.Init`.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/138,"{'number': 138, 'state': 'closed', 'merged': False, 'created_at': '2023-03-09T21:15:12Z', 'merged_at': '2023-03-11T18:59:54Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_137,2023-03-09T19:36:11Z,"Remove bool return from runWeavelet\n\nWhile browsing the code I noticed that the `bool` return from `Envelope.runWeavelet` was always `false`. Removing the return value simplifies the caller slightly. I'm opening this PR to see if you are interested in this small simplification. Thanks for considering it!

I often try to avoid `(bool, error)` returns, and opt to use a sentinel error value when possible. That may be an option in the future if `runWeavelet` needs to indicate a speicific error case. ",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/137,"{'number': 137, 'state': 'closed', 'merged': False, 'created_at': '2023-03-09T19:36:11Z', 'merged_at': '2023-03-10T18:04:50Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_136,2023-03-09T04:28:39Z,"Use Roboto Mono for code blocks\n\nPer @mwhittaker in #135, it would be better for the code blocks to use Roboto Mono as opposed to the default monospace font chosen by the browser. I've changed the code to use Roboto Mono at an appropriate size accordingly (with a fallback to the default monotspace font if needed).",a42f629e5a05bd7c,https://github.com/ServiceWeaver/weaver/pull/136,"{'number': 136, 'state': 'closed', 'merged': False, 'created_at': '2023-03-09T04:28:39Z', 'merged_at': '2023-03-09T04:51:48Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_135,2023-03-09T03:17:23Z,"Fix usage of Roboto font\n\nI noticed that this website uses the Roboto font without importing it as a web font. This causes it to show up as the default serif font on my system. To remedy this, I've added the code from https://fonts.google.com/specimen/Roboto to import the web font, and I've also modified the CSS to have a sans-serif fallback in case the font fails to load.",a42f629e5a05bd7c,https://github.com/ServiceWeaver/weaver/pull/135,"{'number': 135, 'state': 'closed', 'merged': False, 'created_at': '2023-03-09T03:17:23Z', 'merged_at': '2023-03-09T04:07:30Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_134,2023-03-09T01:19:51Z,"Remove references to ""process"" from our runtime types.\n\nThe term process is a leftover from when we used to have colocation groups hosting multiple processes.

Other changes:
* Get rid of the colocation-group internal transport.
* Small drive-by changes.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/134,"{'number': 134, 'state': 'closed', 'merged': False, 'created_at': '2023-03-09T01:19:51Z', 'merged_at': '2023-03-09T16:23:18Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_133,2023-03-08T19:31:40Z,Encoding/decoding benchmarks report approximate throughput.\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/133,"{'number': 133, 'state': 'closed', 'merged': False, 'created_at': '2023-03-08T19:31:40Z', 'merged_at': '2023-03-08T21:23:05Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_132,2023-03-08T07:57:04Z,"Add padding on blog post left and right\n\nIt is a subjective opinion, but I find the blog post is hard to read on the mobile 🤔 so I just add the padding and remove the [text-align.](text-align: justify;)

**Before the change:**
![image](https://user-images.githubusercontent.com/1687930/223653607-b805b123-eb89-4401-ae56-c5b2146d54eb.png)

**After the change:**
![image](https://user-images.githubusercontent.com/1687930/223653657-b17f21fa-99c6-4102-aa46-9afac2b3d8e9.png)

",1735bbc9e7f52e34,https://github.com/ServiceWeaver/weaver/pull/132,"{'number': 132, 'state': 'closed', 'merged': False, 'created_at': '2023-03-08T07:57:04Z', 'merged_at': '2023-03-08T17:41:52Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_129,2023-03-08T02:20:42Z,"fix crash when failed to open Perfetto database on DashboardCommand()\n\nThis PR fixs crash when failed to open the TraceDB. From the current execution flow of the code, it seems that the failure to open TraceDB will not interrupt the start of the Dashboard service, so the start of the Trace service is placed in the else branch.",72383f00d7e08920,https://github.com/ServiceWeaver/weaver/pull/129,"{'number': 129, 'state': 'closed', 'merged': False, 'created_at': '2023-03-08T02:20:42Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_128,2023-03-07T18:40:38Z,"Handle or ignore many unhandled errors\n\nRelated to #90 

This PR addresses many of the unhandled errors, there are two common cases not handled here that will be done in a separate PR. This gets us closer to enabling the `errcheck` linter.

I've split up the changes into multiple commits. Each commit groups related changes by how the error is handled (ignored, removed, logged, or returned). Changes may be best viewed by individual commit. I'll leave some comments and questions inline. The last commit has some TODOs. I can remove that commit if we don't have any easy way of addressing those TODOs.

My IDE has sorted some of the import blocks alphabetically. I attempted to turn off that feature, but it was still sorting them. I hope that's not a problem, but I can revert those changes if necessary.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/128,"{'number': 128, 'state': 'closed', 'merged': False, 'created_at': '2023-03-07T18:40:38Z', 'merged_at': '2023-03-10T18:00:27Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_124,2023-03-07T07:39:06Z,"handle routinginfo error\n\nsince it's a blocking loop and either errGetRoutingInfo or errUpdateInfo will skip the loop and wait for next round, we can just simply merge the logic together which can handle the error on one ``if`` condition",89dc29a5afe977af,https://github.com/ServiceWeaver/weaver/pull/124,"{'number': 124, 'state': 'closed', 'merged': False, 'created_at': '2023-03-07T07:39:06Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_123,2023-03-07T01:41:37Z,Add a FAQ on network errors.\n\n,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/123,"{'number': 123, 'state': 'closed', 'merged': False, 'created_at': '2023-03-07T01:41:37Z', 'merged_at': '2023-03-07T17:12:45Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_122,2023-03-07T01:35:41Z,"Fixed some visual bugs on mobile website.\n\n
This PR fixes two bugs that appeared when the website was viewed on mobile. First, the jumbotron on the landing page was squeezed very thin. I fixed this by removing the left and right margins on small pages. Second, the top navigation header had elements overlapping vertically. I fixed this by adjusting padding.

| Before | After |
| --- | --- |
| ![3KtjtCAcCaUrmME](https://user-images.githubusercontent.com/3654277/223296303-f75972b6-a46f-4463-8b33-3d88ac210305.png) | ![5hrdzVnRDefiM7D](https://user-images.githubusercontent.com/3654277/223296301-0d1d338d-8a84-4d83-b793-63591291527c.png) |",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/122,"{'number': 122, 'state': 'closed', 'merged': False, 'created_at': '2023-03-07T01:35:41Z', 'merged_at': '2023-03-07T16:57:34Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_121,2023-03-07T00:43:09Z,Fixing escape issues with curl and zsh\n\nIssue [here](https://github.com/ServiceWeaver/website/issues/2),f442232b34849893,https://github.com/ServiceWeaver/weaver/pull/121,"{'number': 121, 'state': 'closed', 'merged': False, 'created_at': '2023-03-07T00:43:09Z', 'merged_at': '2023-03-07T19:09:32Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_120,2023-03-07T00:14:36Z,Fixed incorrect path in GitHub workflow.\n\nSorry for the spam Robert! I couldn't figure out a nice way to test this stuff out without just opening pull requests.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/120,"{'number': 120, 'state': 'closed', 'merged': False, 'created_at': '2023-03-07T00:14:36Z', 'merged_at': '2023-03-07T00:19:23Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_119,2023-03-07T00:13:09Z,Add a quick paragraph on handling network errors.\n\n,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/119,"{'number': 119, 'state': 'closed', 'merged': False, 'created_at': '2023-03-07T00:13:09Z', 'merged_at': '2023-03-07T00:52:13Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_118,2023-03-07T00:00:02Z,"Added missing addlicense to GitHub page action.\n\nIn PR #117, I added a GitHub workflow to generate the website, but docgen.go (the program that generates the website) requires addlicense to be installed. This PR fixes the bug by installing addlicense.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/118,"{'number': 118, 'state': 'closed', 'merged': False, 'created_at': '2023-03-07T00:00:02Z', 'merged_at': '2023-03-07T00:09:56Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_117,2023-03-06T23:42:09Z,"Added GitHub workflow to generate & publish site.\n\nThis PR adds a GitHub workflow to build and publish the website every time the main branch is pushed to. The website is currently hosted on https://github.com/ServiceWeaver/website, but we'd like to switch to the main weaver repo.

In the future, we may not want to update the website on every change. We might want to update it when we update the version with a new tag?",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/117,"{'number': 117, 'state': 'closed', 'merged': False, 'created_at': '2023-03-06T23:42:09Z', 'merged_at': '2023-03-06T23:52:19Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_116,2023-03-06T21:59:35Z,"Add a section on ""what to contribute to"" to the contrib file.\n\nThis is in response to a request from a community member on how they can get involved.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/116,"{'number': 116, 'state': 'closed', 'merged': False, 'created_at': '2023-03-06T21:59:35Z', 'merged_at': '2023-03-10T17:52:35Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_115,2023-03-06T18:55:39Z,"Improved ExportListener API.\n\nBefore this PR, the flow for exporting a listener was a little complicated. A weavelet would receive two listener related options via a protos.Weavelet: `use_localhost` and `process_picks_ports`. If `use_localhost` was true, a weavelet would listen on localhost. Otherwise, it would listen on `$HOSTNAME`. If `process_picks_ports` was true, the weavelet would listen on port 0. Otherwise, it would call ExportListener to get a port. Thus, ExportListener sometimes exported a listener and sometimes didn't (and returned a port).

This PR simplifies the API by removing `use_localhost` and `process_picks_ports` options completely and by splitting ExportListener in two. First, a weavelet calls GetAddress to get the address it should listen on for a listener.  For example, the single process deployer may return ""localhost:0"", while the SSH deployer may return ""$HOSTNAME:0"". Second, the weavelet listens on this address and calls ExportListener to export the listener.

This flow is much simpler, but it does require an additional RPC over the pipe. However, exporting listeners is not on critical path, plus there is already significant traffic over the pipe (for every log entry, to export metrics, etc.). Overall, I think the performance hit is negligible.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/115,"{'number': 115, 'state': 'closed', 'merged': False, 'created_at': '2023-03-06T18:55:39Z', 'merged_at': '2023-03-07T19:21:37Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_114,2023-03-06T18:49:48Z,"Replaced Weavelet proto with concise WeaveletInfo.\n\nBefore this PR, we had a `Weavelet` proto with an embedded `Deployment` proto, which in turn had an embedded `AppConfig` proto. When you launched a weavelet, you passed it a `Weavelet` proto over the pipe. However, the `Weavelet` proto contained a lot of unnecessary fields that the weavelet never actually used. For example, does a weavelet need to know its binary? No. This made it hard to know which fields were needed and which weren't.

This PR replaces the `Weavelet` proto with a simpler `WeaveletInfo` proto that only contains the fields a weavelet actually uses. With this change, the Deployment proto becomes more of a deployer implementation detail. We could probably remove it from the runtime package if we wanted to, though I'll defer that.

In future CLs, I think we can make the `WeaveletInfo` proto even simpler.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/114,"{'number': 114, 'state': 'closed', 'merged': False, 'created_at': '2023-03-06T18:49:48Z', 'merged_at': '2023-03-07T17:02:55Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_112,2023-03-06T15:51:10Z,Do not remove coverage output files\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/112,"{'number': 112, 'state': 'closed', 'merged': False, 'created_at': '2023-03-06T15:51:10Z', 'merged_at': '2023-03-09T21:36:10Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_110,2023-03-06T12:19:40Z,Fix typos in component.go\n\n,0757103951592af7,https://github.com/ServiceWeaver/weaver/pull/110,"{'number': 110, 'state': 'closed', 'merged': False, 'created_at': '2023-03-06T12:19:40Z', 'merged_at': '2023-03-06T17:28:19Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-06. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_107,2023-03-05T18:57:50Z,Move to a non-cgo SQLite implementation.\n\nThis will help avoid some compilation issues on MacOS and Windows.,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/107,"{'number': 107, 'state': 'closed', 'merged': False, 'created_at': '2023-03-05T18:57:50Z', 'merged_at': '2023-03-06T17:37:59Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_102,2023-03-05T04:17:48Z,fix typos\n\n,171a6d550de707f7,https://github.com/ServiceWeaver/weaver/pull/102,"{'number': 102, 'state': 'closed', 'merged': False, 'created_at': '2023-03-05T04:17:48Z', 'merged_at': '2023-03-06T18:02:06Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-05. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_101,2023-03-04T20:46:27Z,"Fix ssh deployer\n\nWhile renaming to service weaver, we renamed some things that didn't suppose to be renamed.",daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/101,"{'number': 101, 'state': 'closed', 'merged': False, 'created_at': '2023-03-04T20:46:27Z', 'merged_at': '2023-03-06T17:49:25Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-04. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_93,2023-03-03T23:02:59Z,"Run CI on pull requests\n\nre: https://github.com/ServiceWeaver/weaver/pull/91#issuecomment-1454232446

This should get CI running on branches from forked repositories.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/93,"{'number': 93, 'state': 'closed', 'merged': False, 'created_at': '2023-03-03T23:02:59Z', 'merged_at': '2023-03-03T23:31:06Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_91,2023-03-03T21:01:26Z,"fix: weavelet cpu consumption\n\nAfter to run the hello example with `go run .` the cpu consumption was at 100%, this change adds a blocking feature to `getcomponentstostart` in `singleprocess.go`, this prevents the excessive CPU consumption


Before:
```
(pprof) top
Showing nodes accounting for 29.98s, 100% of 29.99s total
Dropped 7 nodes (cum <= 0.15s)
      flat  flat%   sum%        cum   cum%
    15.66s 52.22% 52.22%     29.98s   100%  github.com/ServiceWeaver/weaver.(*weavelet).watchComponentsToStart
     9.71s 32.38% 84.59%     11.14s 37.15%  github.com/ServiceWeaver/weaver/runtime/retry.(*Retry).Continue
     3.18s 10.60% 95.20%      3.18s 10.60%  github.com/ServiceWeaver/weaver.(*singleprocessEnv).GetComponentsToStart
     1.43s  4.77%   100%      1.43s  4.77%  context.(*emptyCtx).Err
         0     0%   100%     29.98s   100%  github.com/ServiceWeaver/weaver.startWork.func1
```

After:
```
(pprof) top
Showing nodes accounting for 90ms, 100% of 90ms total
Showing top 10 nodes out of 27
      flat  flat%   sum%        cum   cum%
      30ms 33.33% 33.33%       30ms 33.33%  runtime/internal/syscall.Syscall6
      10ms 11.11% 44.44%       10ms 11.11%  runtime.(*limiterEvent).stop
      10ms 11.11% 55.56%       50ms 55.56%  runtime.findRunnable
      10ms 11.11% 66.67%       10ms 11.11%  runtime.futex
      10ms 11.11% 77.78%       10ms 11.11%  runtime.nextFreeFast (inline)
      10ms 11.11% 88.89%       10ms 11.11%  runtime.runqget
      10ms 11.11%   100%       10ms 11.11%  time.startTimer
         0     0%   100%       20ms 22.22%  github.com/ServiceWeaver/weaver.(*weavelet).watchComponentsToStart
         0     0%   100%       20ms 22.22%  github.com/ServiceWeaver/weaver.startWork.func1
         0     0%   100%       10ms 11.11%  runtime.futexwakeup
```

fixes #92 ",fe288c1f7761ee23,https://github.com/ServiceWeaver/weaver/pull/91,"{'number': 91, 'state': 'closed', 'merged': False, 'created_at': '2023-03-03T21:01:26Z', 'merged_at': '2023-03-04T00:28:34Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_89,2023-03-03T20:43:26Z,Add weaver installation tips for macOS\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/89,"{'number': 89, 'state': 'closed', 'merged': False, 'created_at': '2023-03-03T20:43:26Z', 'merged_at': '2023-03-03T22:34:55Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_88,2023-03-03T20:42:30Z,"Fix the copy button in the dashboard\n\nI was playing with the dashboard and I noticed the copy button under the ""Commands"" section was copying an empty string to the clipboard instead of the command (Chrome v109.0.5414.119). 

Reading over [these docs](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent#differences_from_innertext) I believe the problem is that `addCopyButtons` runs when the page is first loaded, and at that time the contents  of the ""Commands"" section is hidden, so `innerText` returns the empty string. `textContent` returns the correct value even when the element is hidden from the page.

Another option to fix this would be to lookup the text from the sibling element in the closure passed to `addEventListener('click', ...)`, instead of capturing it when the page loads.

I also noticed that the text of the commands were shifting by a pixel or two on mouseover. By removing the top and bottom padding from the button the text stays in place.

I can squash these commits if you are interested in accepting both and would like them in a single commit.",c33e44347a4c9068,https://github.com/ServiceWeaver/weaver/pull/88,"{'number': 88, 'state': 'closed', 'merged': False, 'created_at': '2023-03-03T20:42:30Z', 'merged_at': '2023-03-03T23:35:25Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_87,2023-03-03T19:03:07Z,add weaver installation tips for macOS\n\nSome users experience issues installing weaver command on macOS.  Added a FAQ question to provide additional info. Thanks to @KadoBOT for the suggestion.,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/87,"{'number': 87, 'state': 'closed', 'merged': False, 'created_at': '2023-03-03T19:03:07Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_85,2023-03-03T15:15:10Z,Fix typo in weaver.go\n\nconjuction -> conjunction,11baf5fa4a58079f,https://github.com/ServiceWeaver/weaver/pull/85,"{'number': 85, 'state': 'closed', 'merged': False, 'created_at': '2023-03-03T15:15:10Z', 'merged_at': '2023-03-03T16:22:24Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-03. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_83,2023-03-02T23:11:27Z,"remove duplicates of default registry dir implementations\n\nextract `DefaultRegistryDir` into the separate package, so that it could be used `/runtime/perfetto` 
btw, there is a possible bug if the storage folder has not cleaned up registry files, then `status` `metrics` and `dashboard` commands will fail to attempt to connect to not accepting port with the error:

```console
Get ""http://127.0.0.1:56018/debug/serviceweaver/status"": dial tcp 127.0.0.1:56018: connectex: No connection could be made because the target machine actively refused it.
```

and won't continue to the next service running

P.S. naming is hard, so open to suggestions of package names. Separate package due to import loop.
",802af47d258f66d4,https://github.com/ServiceWeaver/weaver/pull/83,"{'number': 83, 'state': 'closed', 'merged': False, 'created_at': '2023-03-02T23:11:27Z', 'merged_at': '2023-03-10T18:23:28Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-02. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_82,2023-03-02T21:29:56Z,"add documentation about registry store folder environment variable XD…\n\nadd documentation about the registry store folder environment variable XDG_DATA_HOME.
Otherwise, Windows won't be able to find registry data and all `weaver` commands won't see any deployments",802af47d258f66d4,https://github.com/ServiceWeaver/weaver/pull/82,"{'number': 82, 'state': 'closed', 'merged': False, 'created_at': '2023-03-02T21:29:56Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-02. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_78,2023-03-01T22:40:47Z,fix typo in Storage example code in docs.md\n\n,e8bafadaf96e8369,https://github.com/ServiceWeaver/weaver/pull/78,"{'number': 78, 'state': 'closed', 'merged': False, 'created_at': '2023-03-01T22:40:47Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_77,2023-03-01T21:48:08Z,Fix Storage Example\n\nThe example had a typo referencing the wrong variable `r` instead of the correct variable `a` when accessing `db`.,6e64505bc45eeac7,https://github.com/ServiceWeaver/weaver/pull/77,"{'number': 77, 'state': 'closed', 'merged': False, 'created_at': '2023-03-01T21:48:08Z', 'merged_at': '2023-03-03T16:24:02Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_76,2023-03-01T21:43:18Z,"Add a per-example ""//go:generate"" directive.\n\nPreviously we had a single //go:generate that applied to everything under examples/. However this had several problems:

1. It made each example less self-contained.
2. Examples looked different from what user code should look like.
3. If we need more //go:generate directives for an example it was hard to control the order in which the directives ran. This was turning out to be an issue when I was experimenting with adding protobufs to onlineboutique (the weaver generate command would run before protoc and then fail since protobuf generated code was not available).",21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/76,"{'number': 76, 'state': 'closed', 'merged': False, 'created_at': '2023-03-01T21:43:18Z', 'merged_at': '2023-03-01T22:42:42Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_75,2023-03-01T18:13:59Z,change monolith to binary in the blog post\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/75,"{'number': 75, 'state': 'closed', 'merged': False, 'created_at': '2023-03-01T18:13:59Z', 'merged_at': '2023-03-01T18:21:34Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_74,2023-03-01T18:06:18Z,Add instruction to delete branch on github after merge\n\nAlso fixed instructions for force pushing to only cover the branch in question.,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/74,"{'number': 74, 'state': 'closed', 'merged': False, 'created_at': '2023-03-01T18:06:18Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_73,2023-03-01T17:59:18Z,"Update ""modular"" to ""modular binary"" on the website.\n\nAs was pointed out to us, people may have an aversion to just ""monolith"".",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/73,"{'number': 73, 'state': 'closed', 'merged': False, 'created_at': '2023-03-01T17:59:18Z', 'merged_at': '2023-03-01T18:17:28Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_72,2023-03-01T17:29:04Z,Add instruction to delete branch on github after merge\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/72,"{'number': 72, 'state': 'closed', 'merged': False, 'created_at': '2023-03-01T17:29:04Z', 'merged_at': '2023-03-01T17:54:37Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_71,2023-03-01T17:23:28Z,Add pkg.go.dev badge to github README\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/71,"{'number': 71, 'state': 'closed', 'merged': False, 'created_at': '2023-03-01T17:23:28Z', 'merged_at': '2023-03-01T17:29:25Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_70,2023-03-01T16:19:06Z,Ignore unused field warning caught by golangci-lint v1.51.2\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/70,"{'number': 70, 'state': 'closed', 'merged': False, 'created_at': '2023-03-01T16:19:06Z', 'merged_at': '2023-03-01T16:57:09Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_69,2023-03-01T01:39:16Z,Nit edits to the blog post\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/69,"{'number': 69, 'state': 'closed', 'merged': False, 'created_at': '2023-03-01T01:39:16Z', 'merged_at': '2023-03-01T17:42:26Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_68,2023-03-01T00:22:42Z,"Add tabs to the ""Contact Us"" section.\n\n",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/68,"{'number': 68, 'state': 'closed', 'merged': False, 'created_at': '2023-03-01T00:22:42Z', 'merged_at': '2023-03-01T00:29:30Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_67,2023-03-01T00:06:53Z,nit edits to the website\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/67,"{'number': 67, 'state': 'closed', 'merged': False, 'created_at': '2023-03-01T00:06:53Z', 'merged_at': '2023-03-01T00:22:55Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",early_adoption,unknown,unclear,"Temporal: early_adoption based on 2023-03-01. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_66,2023-02-28T23:54:35Z,Fix the URL link for the weaver package.\n\n,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/66,"{'number': 66, 'state': 'closed', 'merged': False, 'created_at': '2023-02-28T23:54:35Z', 'merged_at': '2023-02-28T23:59:15Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_65,2023-02-28T17:22:31Z,"Add the always-OK healthz handler to the default ServeMux.\n\nThis prevents applications like the Hello example from forgetting to add the /healthz handler explicitly.

Alternatives:
  * We could expect health checks on /debug/weaver/healthz, but that means the user has to use a more complex path to add their own (i.e., whenever they use a custom ServeMux).
  * Somehow inject ourselves into the user-created HTTP server. We explored this and it's tricky, since the only thing in our control is the net.Listener, and that's too low level to inspect the HTTP traffic and take over the handling for health checks.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/65,"{'number': 65, 'state': 'closed', 'merged': False, 'created_at': '2023-02-28T17:22:31Z', 'merged_at': '2023-02-28T21:52:28Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_64,2023-02-28T01:32:05Z,Add contact info to the website\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/64,"{'number': 64, 'state': 'closed', 'merged': False, 'created_at': '2023-02-28T01:32:05Z', 'merged_at': '2023-02-28T21:25:58Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-28. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_62,2023-02-27T20:17:21Z,Fix stale images and other minor fixes.\n\n,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/62,"{'number': 62, 'state': 'closed', 'merged': False, 'created_at': '2023-02-27T20:17:21Z', 'merged_at': '2023-02-27T20:36:37Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_61,2023-02-27T18:52:54Z,Add GKE tracing documentation to the user guide.\n\n,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/61,"{'number': 61, 'state': 'closed', 'merged': False, 'created_at': '2023-02-27T18:52:54Z', 'merged_at': '2023-02-27T20:15:44Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-27. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_60,2023-02-25T00:59:27Z,"Improved ExportListener API.\n\nBefore this PR, the flow for exporting a listener was a little complicated. A weavelet would receive two listener related options via a `protos.Weavelet`: `use_localhost` and `process_picks_ports`. If `use_localhost` was true, a weavelet would listen on localhost. Otherwise, it would listen on `$HOSTNAME`. If `process_picks_ports` was true, the weavelet would listen on port 0. Otherwise, it would call `ExportListener` to get a port. Thus, `ExportListener` sometimes exported a listener and sometimes didn't (and returned a port).

This PR simplifies the API by splitting removing `use_localhost` and `process_picks_ports` options completely and by splitting `ExportListener` in two. First, a weavelet calls `GetAddress` to get the address it should listen on for a listener.  For example, the single process deployer may return `localhost:0`, while the SSH deployer may return `$HOSTNAME:0`. Second, the weavelet listens on this address and calls `ExportListener` to export the listener.

This flow is much simpler, but it does require an additional RPC over the pipe. However, exporting listeners is not on critical path, plus there is already significant traffic over the pipe (for every log entry, to export metrics, etc.). Overall, I think the performance hit is negligible.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/60,"{'number': 60, 'state': 'closed', 'merged': False, 'created_at': '2023-02-25T00:59:27Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-25. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_59,2023-02-24T22:31:14Z,"Attach app and version attributes to our traces.\n\nGoogle Cloud Tracing allows filtering based on the attributes/labels, and so it's a good idea to allow them to filter based on the Service Weaver app/version.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/59,"{'number': 59, 'state': 'closed', 'merged': False, 'created_at': '2023-02-24T22:31:14Z', 'merged_at': '2023-02-24T23:00:18Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_58,2023-02-24T19:03:46Z,"Replaced Weavelet proto with concise WeaveletInfo.\n\nBefore this PR, we had a `Weavelet` proto with an embedded `Deployment` proto, which in turn had an embedded `AppConfig` proto. When you launched a weavelet, you passed it a `Weavelet` proto over the pipe. However, the `Weavelet` proto contained a lot of unnecessary fields that the weavelet never actually used. For example, does a weavelet need to know its binary? No. This made it hard to know which fields were needed and which weren't.

This PR replaces the `Weavelet` proto with a simpler `WeaveletInfo` proto that only contains the fields a weavelet actually uses. With this change, the `Deployment` proto becomes more of a deployer implementation detail. We could probably remove it from the runtime package if we wanted to, though I'll defer that.

In future CLs, I think we can make the `WeaveletInfo` proto even simpler.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/58,"{'number': 58, 'state': 'closed', 'merged': False, 'created_at': '2023-02-24T19:03:46Z', 'merged_at': None, 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_57,2023-02-24T16:55:56Z,Fix the broken GKE local tracing image.\n\nThanks to Robert for finding this out.,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/57,"{'number': 57, 'state': 'closed', 'merged': False, 'created_at': '2023-02-24T16:55:56Z', 'merged_at': '2023-02-24T18:00:55Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-24. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_55,2023-02-23T23:34:07Z,"Made website header fixed width across all pages.\n\nBefore this PR, the header at the top of the website, represented as a `<header>` HTML element, was nested inside a `<div class=""page"">` element where the ""page"" CSS class defined the width of the page. In PR #37, we narrowed the page width for blog posts. This lead to an inconsistent header width.

This PR fixes the problem by hoisting the `<header>` element out of the ""page"" div. In the future, we might want to nest it again and pick a fixed width for all pages.

Note that there's still a weird bug where the header is slightly nudged on the blog page. I can't figure out why it's doing that, but we should fix it in the future too.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/55,"{'number': 55, 'state': 'closed', 'merged': False, 'created_at': '2023-02-23T23:34:07Z', 'merged_at': '2023-02-23T23:40:32Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_54,2023-02-23T22:28:26Z,"Reworked internal/conn handshake abstractions.\n\nRecall that when an envelope and a weavelet establish a connection to one another, they perform a simple handshake. The envelope sends a `protos.Weavelet`, and the weavelet acks it.

Before this PR, the abstractions to perform this handshake were a bit shaky. You would construct an envelope conn and then call `SendWeaveletInfoRPC`:

```go
e := conn.NewEnvelopeConn(...)
e.SendWeaveletInfoRPC(...)
```

However, this wouldn't work because the RPC depends on `e.Run()` having been called. So you need to spawn a goroutine to run `e.Run()`. On the weavelet side, you have to call `GetWeaveletInfo` before you call `w.Run()`:

```go
w := conn.NewWeaveletConn(...)
w.GetWeaveletInfo()
```

If you forgot any of these calls or did them in the wrong order, things would hang or fail.

This PR reworks the abstractions so that you can't forget to perform the handshake. Now, `conn.NewWeaveletConn` automatically sends the `protos.Weavelet` and does not wait for an ack. Similarly, `conn.NewWeaveletConn` blocks until it receives the `protos.Weavelet`. This makes it much harder to forget or mess up the handshake.

This PR is part of a larger effort to clean up the runtime protos and pipe API. There is still a lot of cruft. For example, the `EnvelopeConn` methods will hang unless you call `Run()`. A lot of the protos also pass redundant information. I'll try to clean a lot of this up in future PRs.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/54,"{'number': 54, 'state': 'closed', 'merged': False, 'created_at': '2023-02-23T22:28:26Z', 'merged_at': '2023-02-28T22:06:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_53,2023-02-23T22:15:26Z,"Simplify the Service Weaver main README.md file.\n\nSince we have the website, we can point people there, rather than duplicate a lot of material in the README.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/53,"{'number': 53, 'state': 'closed', 'merged': False, 'created_at': '2023-02-23T22:15:26Z', 'merged_at': '2023-02-24T00:19:13Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_52,2023-02-23T16:26:40Z,Add tracing section for GKE local to the website.\n\n,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/52,"{'number': 52, 'state': 'closed', 'merged': False, 'created_at': '2023-02-23T16:26:40Z', 'merged_at': '2023-02-23T21:52:10Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_51,2023-02-23T01:39:47Z,"Handle empty application and version params in Perfetto server.\n\nThis will allow us to retrieve traces across all application versions in GKE Local UI.

Minor comment fixes.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/51,"{'number': 51, 'state': 'closed', 'merged': False, 'created_at': '2023-02-23T01:39:47Z', 'merged_at': '2023-02-23T15:55:29Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-23. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_50,2023-02-22T21:16:34Z,"Store perfetto traces in a database.\n\nThis is necessary in order to allow GKE-local babysitters to store traces directly, i.e., without sending them through the manager/distributor/controller so that the controller can store them.

While at it, moved the trace-server code to the dashboard.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/50,"{'number': 50, 'state': 'closed', 'merged': False, 'created_at': '2023-02-22T21:16:34Z', 'merged_at': '2023-02-22T22:54:43Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-22. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_49,2023-02-21T17:51:02Z,remove online_boutique binary from the repo\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/49,"{'number': 49, 'state': 'closed', 'merged': False, 'created_at': '2023-02-21T17:51:02Z', 'merged_at': '2023-02-21T22:12:45Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-21. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_47,2023-02-17T19:01:10Z,"Cleaned up website organization.\n\nThis PR tidies ups some cruft in the website's organization.

- I abstracted away some common <head> boilerplate into a `head.html` template.
- I made one template per page (`home.html`, `blog.html`, etc.). Before, multiple pages were sharing a template, but they were including different sets of CSS. This lead to some bugs. The home page, for example, was being styled like a blog entry.
- I renamed `guide.html` to `docs.html` and `guide.css` to `docs.css`.
- I added some missing page titles.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/47,"{'number': 47, 'state': 'closed', 'merged': False, 'created_at': '2023-02-17T19:01:10Z', 'merged_at': '2023-02-17T22:01:03Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_46,2023-02-17T18:49:23Z,"Added yarn emoji favicon.\n\nWhen you open a website in chrome, chrome fetches `/favicon.ico` to use as the little icon in the left of the tab. This adds a yarn emoji favicon for now, but we can update it with something better in the future.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/46,"{'number': 46, 'state': 'closed', 'merged': False, 'created_at': '2023-02-17T18:49:23Z', 'merged_at': '2023-02-17T21:57:07Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_45,2023-02-17T17:57:21Z,"Move the Perfetto code to runtime/, to make it accessible to deployers.\n\nIn particular, we're migrating the GKE local deployer to Perfetto.

Clean up the code somewhat now that it is in a public API.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/45,"{'number': 45, 'state': 'closed', 'merged': False, 'created_at': '2023-02-17T17:57:21Z', 'merged_at': '2023-02-17T22:03:25Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_44,2023-02-17T17:42:42Z,"Added Google Analytics to website.\n\nGoogle Analytics lets you track visits to your website. It lets you monitor things like the number of views every page is getting, how long people spend on each page, etc.

Mechanistically, you copy and paste a little snippet of javascript into your pages, and the code exports metrics to the Google Analytics service. This PR sets up Google Analytics for serviceweaver.dev.

In the future, we should disable metrics when viewing the website locally, but for now, they are always enabled.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/44,"{'number': 44, 'state': 'closed', 'merged': False, 'created_at': '2023-02-17T17:42:42Z', 'merged_at': '2023-02-17T21:59:10Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_43,2023-02-17T16:59:27Z,"Added InstrumentHandlerFunc function.\n\nThis PR adds an `InstrumentHandlerFunc` function that is pretty much identical to `InstrumentHandler`, but takes a `func(http.ResponseWriter, *http.Request)` instead of an `http.Handler`.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/43,"{'number': 43, 'state': 'closed', 'merged': False, 'created_at': '2023-02-17T16:59:27Z', 'merged_at': '2023-02-17T19:06:24Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_42,2023-02-17T16:28:49Z,Increased lint timeout.\n\nThe linter was timing out on GitHub actions.,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/42,"{'number': 42, 'state': 'closed', 'merged': False, 'created_at': '2023-02-17T16:28:49Z', 'merged_at': '2023-02-17T17:02:22Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_41,2023-02-17T14:44:59Z,"Bump golang.org/x/image from 0.3.0 to 0.5.0\n\nBumps [golang.org/x/image](https://github.com/golang/image) from 0.3.0 to 0.5.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/golang/image/commit/e6c2a4cdd539b91fd11131f9eecf9bb5087ab55f""><code>e6c2a4c</code></a> tiff: don't pre-allocate giant slices before reading</li>
<li><a href=""https://github.com/golang/image/commit/3db422c472d5a080580038354d8557357adbdb9c""><code>3db422c</code></a> go.mod: update golang.org/x dependencies</li>
<li>See full diff in <a href=""https://github.com/golang/image/compare/v0.3.0...v0.5.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/image&package-manager=go_modules&previous-version=0.3.0&new-version=0.5.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/ServiceWeaver/weaver/network/alerts).

</details>",21cb8b6e26640c2d,https://github.com/ServiceWeaver/weaver/pull/41,"{'number': 41, 'state': 'closed', 'merged': False, 'created_at': '2023-02-17T14:44:59Z', 'merged_at': '2023-02-17T16:28:59Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-17. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_40,2023-02-16T22:17:21Z,"Parallelized GitHub build action.\n\nBefore this PR, our GitHub action to build and test code ran sequentially. First, we tidied, then we built, etc. This PR changes the actions to run in parallel. This should speed things up. Thanks @ghemawat for the suggestion.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/40,"{'number': 40, 'state': 'closed', 'merged': False, 'created_at': '2023-02-16T22:17:21Z', 'merged_at': '2023-02-16T22:21:31Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_39,2023-02-16T22:03:57Z,"Don't generate code in GitHub actions.\n\nThere is no point to generating code, and it takes up time. In the future, we may want to check that generating code is a noop. This ensures that every PR has generated and checked in the code.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/39,"{'number': 39, 'state': 'closed', 'merged': False, 'created_at': '2023-02-16T22:03:57Z', 'merged_at': '2023-02-16T22:16:22Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_38,2023-02-16T19:12:45Z,Add the external FAQ questions to the user guide.\n\n,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/38,"{'number': 38, 'state': 'closed', 'merged': False, 'created_at': '2023-02-16T19:12:45Z', 'merged_at': '2023-02-16T21:31:44Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_37,2023-02-16T00:43:46Z,Style edits to the blog post\n\n,daecdadf0279271c,https://github.com/ServiceWeaver/weaver/pull/37,"{'number': 37, 'state': 'closed', 'merged': False, 'created_at': '2023-02-16T00:43:46Z', 'merged_at': '2023-02-16T00:52:39Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-16. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_36,2023-02-15T23:32:54Z,"Allow raw HTML in markdown for website.\n\nRecently, we've been writing blog posts. It's convenient to write them in markdown, but we sometimes need to add some custom styling. Allowing raw HTML in the markdown makes this possible. Jekyll supports this by default as well.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/36,"{'number': 36, 'state': 'closed', 'merged': False, 'created_at': '2023-02-15T23:32:54Z', 'merged_at': '2023-02-15T23:34:23Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_35,2023-02-15T22:32:33Z,Add a link to pkg.go.dev to the website.\n\n,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/35,"{'number': 35, 'state': 'closed', 'merged': False, 'created_at': '2023-02-15T22:32:33Z', 'merged_at': '2023-02-16T17:24:20Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_34,2023-02-15T21:54:07Z,"Replaced allmodules with build_and_test.\n\nThis PR updates the `allmodules` script now that the repo has only a single module. I renamed the script `build_and_test`, but I'm open to other naming suggestions!",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/34,"{'number': 34, 'state': 'closed', 'merged': False, 'created_at': '2023-02-15T21:54:07Z', 'merged_at': '2023-02-15T23:12:59Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_33,2023-02-15T21:44:20Z,"Updated hashicorp/golang-lru to v2 (generics).\n\nSome of our examples use the [hashicorp/golang-lru module][1]. Previously, we were using the v0 version. This PR updates the code to use the v2 version, which makes the LRU generic.

[1]: https://github.com/hashicorp/golang-lru",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/33,"{'number': 33, 'state': 'closed', 'merged': False, 'created_at': '2023-02-15T21:44:20Z', 'merged_at': '2023-02-15T22:59:02Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_32,2023-02-15T20:25:57Z,Removed obsolete cloudbuild files.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/32,"{'number': 32, 'state': 'closed', 'merged': False, 'created_at': '2023-02-15T20:25:57Z', 'merged_at': '2023-02-16T19:09:20Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_31,2023-02-15T20:20:56Z,"Merged examples module into main module.\n\nNow, the repo has a single module. I'll update allmodules in a future CL. It's still useful, but it should probably be renamed and tweaked a bit.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/31,"{'number': 31, 'state': 'closed', 'merged': False, 'created_at': '2023-02-15T20:20:56Z', 'merged_at': '2023-02-15T23:07:17Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_30,2023-02-15T20:06:17Z,Update the contrib guide with a paragraph on filing issues before significant changes.\n\n,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/30,"{'number': 30, 'state': 'closed', 'merged': False, 'created_at': '2023-02-15T20:06:17Z', 'merged_at': '2023-02-15T22:00:19Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_29,2023-02-15T18:28:02Z,"Add Robert's initial blog post.\n\nThe content is copied from Robert's Google Doc, with minor changes.",1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/29,"{'number': 29, 'state': 'closed', 'merged': False, 'created_at': '2023-02-15T18:28:02Z', 'merged_at': '2023-02-15T20:53:41Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_28,2023-02-15T17:59:25Z,"Added regex filter argument to ""weaver metrics"".\n\nThis PR adds a regex argument to `weaver single metrics` and `weaver multi metrics` that filters the set of displayed metrics.

    $ weaver single metrics
    Show application metrics

    Usage:
      weaver single metrics [metric regex]

    Flags:
      -h, --help    Print this help message.

    Description:
      ""weaver single metrics"" shows the latest value of every metric. You can filter
      metrics by providing a regular expression. Only the metrics with names that
      match the regular expression are shown. The command expects RE2 regular
      expressions, the same used by the built-in regexp module. See ""go doc
      regexp/syntax"" for details.

    Examples:
      # Show all metrics
      weaver single metrics

      # Show metrics matching the regular expression ""error""
      weaver single metrics error

      # Show metrics matching the regular expression ""http""
      weaver single metrics http

      # Show metrics matching the regular expression ""error"" or ""http""
      weaver single metrics 'error|http'

Before this PR, users could filter which metrics were shown by providing the full metric name. I could never remember the full metric names though, so this wasn't super useful. The regex makes it easier to see the metrics you have in mind without knowing the metric's full name.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/28,"{'number': 28, 'state': 'closed', 'merged': False, 'created_at': '2023-02-15T17:59:25Z', 'merged_at': '2023-02-15T22:36:23Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_27,2023-02-15T16:44:00Z,"Removed examples/ dependency on gorilla mux.\n\nThis PR removes the `examples/` directory's dependecy on the [gorilla mux module][1]. We replace `gorilla.Router` with `http.ServeMux`. The replacement is mostly straightforward, but there were two small hiccups:

1. Both a `gorilla.Router` and an `http.ServeMux` allow you to dispatch requests based on the path of the request (e.g., `""/""`, `""/foo""`). A `gorilla.Router` additionally allows you to dispatch based on the HTTP method (e.g., POST, GET). I implemented this logic manually (it's just a small helper function).
2. A `gorilla.Router` allows you to pattern match paths and extract components of them. Specifically, we had a `""/product/{id}""` pattern that extracted the id of a product. Again, I implemented this logic manually.

This PR is part of an effort to merge the examples module with the core weaver module without blowing up the number of dependencies.

[1]: https://github.com/gorilla/mux",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/27,"{'number': 27, 'state': 'closed', 'merged': False, 'created_at': '2023-02-15T16:44:00Z', 'merged_at': '2023-02-15T22:51:45Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-15. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_26,2023-02-14T23:50:00Z,"Updated ""Highly Performant ⚡"" section of homepage\n\nThis PR updates some stale code in the ""Highly Performant ⚡"" section of the homepage and removes some performance numbers. We'll reintroduce performance numbers when we run a more thorough evaluation.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/26,"{'number': 26, 'state': 'closed', 'merged': False, 'created_at': '2023-02-14T23:50:00Z', 'merged_at': '2023-02-15T17:29:43Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_25,2023-02-14T22:34:54Z,Document the process for making changes to the code base\n\n,21c5733cd1f12916,https://github.com/ServiceWeaver/weaver/pull/25,"{'number': 25, 'state': 'closed', 'merged': False, 'created_at': '2023-02-14T22:34:54Z', 'merged_at': '2023-02-14T23:09:06Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_24,2023-02-14T20:38:21Z,"Added ""weaver help"" subcommand.\n\nThis PR adds a `weaver help` subcommand. For example, `weaver help generate` shows a help message for the `weaver generate command`. The help command takes one of the following forms:

    weaver help
    weaver help generate
    weaver help <single|multi|ssh>
    weaver help <single|multi|ssh> <subcommand>
    weaver help <external>

It does not handle more complex help queries like

    // Flags aren't supported.
    weaver help multi profile --type=cpu

    // Deeper nested subcommands aren't supported.
    weaver help multi store list

    // External subcommands aren't supported.
    weaver help gke profile

In the future, we can improve the help command to support these things if we find it useful.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/24,"{'number': 24, 'state': 'closed', 'merged': False, 'created_at': '2023-02-14T20:38:21Z', 'merged_at': '2023-02-16T21:42:56Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_23,2023-02-14T17:06:39Z,Added weaver.InstrumentHandler calls to examples.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/23,"{'number': 23, 'state': 'closed', 'merged': False, 'created_at': '2023-02-14T17:06:39Z', 'merged_at': '2023-02-16T21:47:20Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_22,2023-02-14T16:38:04Z,Renamed online_boutique to onlineboutique.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/22,"{'number': 22, 'state': 'closed', 'merged': False, 'created_at': '2023-02-14T16:38:04Z', 'merged_at': '2023-02-15T16:37:47Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_21,2023-02-14T16:28:51Z,"Attempted to fix conn_test.go flake.\n\nThe `TestMetricPropagation` test inside `conn_test.go` was flaking on GitHub Actions (e.g., [1] and [2]). I wasn't able to reproduce the error locally, but looking through the code, I think I might understand the flake. This PR attempts to fix it.

`TestMetricPropagation` (and other similar tests) sets up an `EnvelopeConn` and a `WeaveletConn`. These two communicate over a set of OS pipes. They both repeatedly read a message from the pipe (blocking if needed), handle the message, and reply on the pipe.

At the end of the test, the pipes are closed. The tests were failing because the `Conn`s were receiving `io.EOF`s. Playing around with pipes, however, I think this is expected. If you block reading on a pipe and the other end of pipe is closed, you get an `io.EOF`. The tests were checking for `io.ErrClosedPipe`, but from my experimenting, it seems you get that error only when you close *your* end of the pipe, not the other end.

This PR checks for and ignores `io.EOF`s.

[1]: https://github.com/ServiceWeaver/weaver/actions/runs/4168933069
[2]: https://github.com/ServiceWeaver/weaver/actions/runs/4168814674",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/21,"{'number': 21, 'state': 'closed', 'merged': False, 'created_at': '2023-02-14T16:28:51Z', 'merged_at': '2023-02-14T23:30:01Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-14. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_20,2023-02-13T22:01:16Z,"Fixed ""weaver generate"" varargs bug.\n\nBefore this PR, `weaver generate` was not properly handling component methods with variadic arguments. For example:

```go
type MyComponent interface {
    Foo(context.Context, ...int) error
}
```

`weaver generate` would generate code that does not compile. Specifically, it was treating the variadic argument `...t` as a slice `[]t`. They're similar but not quite the same. This PR fixes the bug. `weaver generate` now handles variadic arguments correctly.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/20,"{'number': 20, 'state': 'closed', 'merged': False, 'created_at': '2023-02-13T22:01:16Z', 'merged_at': '2023-02-13T23:12:35Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_19,2023-02-13T20:50:57Z,"Renamed log fields to align with slog.\n\nThis PR renames the following log fields in the log query API:

    - severity    -> level
    - file & line -> source
    - payload     -> msg

This makes the field names align with the soon to be standard [slog][1]. Thanks @ghemawat for the suggestion.

## Attributes

Consider the following debug log.

    c.Logger().Debug(""a debug log"", ""foo"", ""bar"")

Currently, we query the ""foo"" attribute like this.

    attr[""foo""] == ""bar""

Sanjay also suggested we re-work the log query language to make it more convenient to query attributes. Specifically, we hoist the attributes out of the `attrs` map:

    foo == ""bar""

Then, we might move the baked in fields (e.g., app, deployment source) to a field like this:

    weaver.app == ""todo"" && foo == ""bar""

I tried implementing this, but it was hard, given our current implementation. The challenge is that we don't know attribute names ahead of time. Users can log whatever attributes they want. I couldn't figure out how to easily form [CEL queries][2] without knowing the variable names ahead of time. I'm guessing we can make it work, but I'll have to try harder.

There's also an API design question. How do users write a query testing if an attribute exists at all? Today, they can write :

    ""foo"" in attrs

If we hoist attribute names, this breaks. We can maybe replace it with something like:

    has(foo)

Overall, hoisting attributes will require some more thinking.

[1]: https://pkg.go.dev/golang.org/x/exp/slog
[2]: https://github.com/google/cel-spec/blob/master/doc/langdef.md",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/19,"{'number': 19, 'state': 'closed', 'merged': False, 'created_at': '2023-02-13T20:50:57Z', 'merged_at': '2023-02-15T16:56:48Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_18,2023-02-13T17:04:53Z,"Updated DEPLOYERS/REFERENCE sections on website.\n\nThis PR freshens up the DEPLOYERS and REFERENCE sections on the website.

A question for reviewers. Currently, when you run `weaver gke status` or `weaver gke-local status`, we show an estimate of the rollout schedule. With some recent changes, these schedules are inaccurate (they've always been inaccurate actually, but now they're really inaccurate). Should we just remove the schedules from the status commands and the website?",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/18,"{'number': 18, 'state': 'closed', 'merged': False, 'created_at': '2023-02-13T17:04:53Z', 'merged_at': '2023-02-13T23:49:41Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-13. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_17,2023-02-10T23:59:59Z,"Added prototype of ""weaver metrics"" command.\n\nThis PR introduces `weaver single metrics` and `weaver multi metrics` commands that pretty print the current value of all metrics.

![metrics](https://user-images.githubusercontent.com/3654277/218223755-6c9bd1c0-8199-460f-a495-77ac9c2aa657.png)

## Motivation

Currently, we don't have a convenient way to view the metrics of a singleprocess or multiprocess app. You have to run `weaver dashboard` and go to the `/metrics` page. This page exports metrics in prometheus format, which is not intended to be read by humans. Good luck reading this:

    # HELP serviceweaver_http_request_bytes_received Number of bytes received by HTTP request handlers
    # TYPE serviceweaver_http_request_bytes_received histogram
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""1""} 0
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""2""} 0
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""5""} 0
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""10""} 0
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""20""} 0
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""50""} 0
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""100""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""200""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""500""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""1000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""2000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""5000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""10000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""20000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""50000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""100000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""200000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""500000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""1000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""2000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""5000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""10000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""20000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""50000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""100000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""200000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""500000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""1000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""2000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""5000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""10000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""20000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""50000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""100000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""200000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""500000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""1000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""2000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""5000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""10000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""20000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""50000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""100000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""200000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""500000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""1000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""2000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""5000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""10000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""20000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""50000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""100000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""200000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""500000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""1000000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""2000000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""5000000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""10000000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""20000000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""50000000000000000000""} 5
    serviceweaver_http_request_bytes_received_bucket{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124"",le=""+Inf""} 5
    serviceweaver_http_request_bytes_received_sum{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124""} 445
    serviceweaver_http_request_bytes_received_count{host=""localhost:9000"",label=""collatz"",serviceweaver_node=""66263124""} 5

You can hook up the metrics to prometheus, but when tinkering with something locally or debugging something simple, this can be overkill.

This inspired me to add a `weaver metrics` command to make it easier to view metrics. The command is not perfect. In fact, it's arguably not that useful (there's no history, for example), but it is significantly better than the current prometheus formatted metrics.

## Details

This PR also fixes a bug in `singleprocess.go`. Recall that when metrics are exported over the pipe, the pipe injects three labels into every metric: the app name, the version id, and the weavelet id. For single process deployments, metrics do not traverse a pipe, and these labels were not being injected. This made single process metrics diverge from all other metrics. I changed `singleprocess.go` to also inject these metrics.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/17,"{'number': 17, 'state': 'closed', 'merged': False, 'created_at': '2023-02-10T23:59:59Z', 'merged_at': '2023-02-13T23:59:14Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_16,2023-02-10T18:41:16Z,"Added ""Deploying to the Cloud"" section to website.\n\nThis PR adds a ""Deploying to the Cloud"" section to the ""Step by Step Tutorial"" on the website. The main goal of the section is to impress upon readers that

1. you can deploy applications to the cloud easily, and
2. the deployment is really fancy and cool.

The section isn't meant to exaplain the nitty gritty details of how to deploy the application to the cloud. That comes later in the GKE section.

Thanks @rgrandl for the suggestion. I think this makes it much clearer that Service Weaver can be used to run distributed applications; it's not just for running things locally.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/16,"{'number': 16, 'state': 'closed', 'merged': False, 'created_at': '2023-02-10T18:41:16Z', 'merged_at': '2023-02-13T23:36:50Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_15,2023-02-10T17:43:33Z,"Added --watch flag to docgen.\n\nThis PR adds a `--watch` flag to the website generator. When the `--watch` flag is provided, the generator automatically rebuilds the website whenever the source files are changed. This makes it much much more convenient to the edit the website and see your changes. Before this PR, you had to rerun the generator every time you made a change.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/15,"{'number': 15, 'state': 'closed', 'merged': False, 'created_at': '2023-02-10T17:43:33Z', 'merged_at': '2023-02-13T23:28:53Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_13,2023-02-10T00:22:26Z,"Polished ""weaver generator"" output.\n\nThis PR polishes `weaver generate` output in two ways. First, it abbreviates filenames in error messages. Before, we were printing absolute paths, and (for me, at least) the paths were taking up 100+ characters, making almost every error message span multiple lines on my terminal. This PR relativizes the paths to the current working directory, shortening them quite a bit.

Second, I colored the paths red. I think it makes the errors a bit easier to parse, but happy to revert the change if others disagree.

![colored_errors](https://user-images.githubusercontent.com/3654277/217968986-d009d302-2df0-4aca-b23f-c37be30b19c9.png)",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/13,"{'number': 13, 'state': 'closed', 'merged': False, 'created_at': '2023-02-10T00:22:26Z', 'merged_at': '2023-02-13T22:58:11Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-10. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_12,2023-02-09T22:29:22Z,"Made weaver generate enforce interface subtyping.\n\nTo define a component, developers declare the interface and implementation of the component as a go interface and struct respectively. They also embed a `weaver.Implements` struct to indicate the link between the two.

```go
type Adder interface {
    Add(context.Context, int, int) (int, error)
}

type adder struct {
    weaver.Implements[Adder]
}
```

Before this PR, `weaver generate` was not enforcing that the implementing struct (e.g., `adder`) actually implemented the interface (e.g., `Adder`). Worse, it was not caught by `go build` either (that surprised me). Instead, an application would crash at runtime.

This PR augments `weaver generate` to enforce that a component struct implements the corresponding component interface.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/12,"{'number': 12, 'state': 'closed', 'merged': False, 'created_at': '2023-02-09T22:29:22Z', 'merged_at': '2023-02-13T22:49:30Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_11,2023-02-09T21:05:22Z,"Error out for generics with emebedded automarshal.\n\nRecall that named structs are not serializable by default. Instead, developers can embed `weaver.AutoMarshal` inside a struct to indicate that `weaver generate` should generate serialization code for it. For example:

```go
type Pair struct {
    weaver.AutoMarshal
    x int
    y int
}
```

Also recall that `weaver.AutoMarshal` does not work with generic types. See `generator.go` for details.

Before this PR, `weaver generate` would ignore `weaver.AutoMarshal`s embedded in generic structs. This silent ignoring was not user friendly. This PR changes `weaver generate` to error out when it encounters a `weaver.AutoMarshal` embedded in a generic struct.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/11,"{'number': 11, 'state': 'closed', 'merged': False, 'created_at': '2023-02-09T21:05:22Z', 'merged_at': '2023-02-13T22:37:26Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_10,2023-02-09T18:32:26Z,"Made website more tutorial-like.\n\nThis PR makes the website more tutorial-like, in the sense that it should be easy for people to follow along a given section from top to bottom.

Specifically, I revamped all OVERVIEW and FUNDAMENTALS sections.

- I mentioned that Go 1.18+ needs to be installed.
- I renamed ""Getting Started"" to ""Step by Step Tutorial"", inspired by https://jekyllrb.com.
- I added links to the example source code.
- I expanded code snippets to be more stand alone.
- I avoided back referencing to the ""Step by Step Tutorial"" section unless needed.
- I added a Config subsection to the Components section.
- I fixed various stale things.

In a future PR, I'll update the DEPLOYERS sections to be more standalone as well.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/10,"{'number': 10, 'state': 'closed', 'merged': False, 'created_at': '2023-02-09T18:32:26Z', 'merged_at': '2023-02-10T00:33:46Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_9,2023-02-09T00:49:04Z,"Switched from pink code to GitHub-style gray code.\n\nBefore this PR, `<code>` elements on the website were rendered in pink. This PR changes `<code>` to be rendered in gray boxes, similar to how GitHub renders markdown.

![BQeymvngbccQ2Xw](https://user-images.githubusercontent.com/3654277/217685742-fbb733da-b570-4acc-b590-6a88e9faec09.png)",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/9,"{'number': 9, 'state': 'closed', 'merged': False, 'created_at': '2023-02-09T00:49:04Z', 'merged_at': '2023-02-10T00:27:24Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-09. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_8,2023-02-08T22:17:30Z,"Added section headers to table of contents.\n\nThis PR adds section headers to the table of contents on the left side of the user guide on the website. The section headers help divide the long list of sections into OVERVIEW, FUNDAMENTALS, DEPLOYERS, and REFERENCE.

![C57kuzxuwxRgEoH](https://user-images.githubusercontent.com/3654277/217663684-9a54a35a-3a47-46bf-bf89-4254f0dbf8b5.png)",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/8,"{'number': 8, 'state': 'closed', 'merged': False, 'created_at': '2023-02-08T22:17:30Z', 'merged_at': '2023-02-09T16:32:40Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_7,2023-02-08T21:47:05Z,Reduce external dependencies for the examples module.\n\n,1706eaa467556e54,https://github.com/ServiceWeaver/weaver/pull/7,"{'number': 7, 'state': 'closed', 'merged': False, 'created_at': '2023-02-08T21:47:05Z', 'merged_at': '2023-02-08T22:12:09Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_6,2023-02-08T17:55:40Z,"Updated website styling.\n\n[Website Style Demo.webm](https://user-images.githubusercontent.com/3654277/217612600-d1e1685e-beb8-4241-aeec-c7b52b1d7abe.webm)

- Increased font size of landing page jumbotron.
- Changed top navbar buttons from blue backgrounds to red underlines.
- Changed a lot of links from blue/purple to black.
- Increased width of user guide left navbar.
- Shrunk some user guide headings to fit in the navbar.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/6,"{'number': 6, 'state': 'closed', 'merged': False, 'created_at': '2023-02-08T17:55:40Z', 'merged_at': '2023-02-09T16:18:43Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_5,2023-02-08T17:54:39Z,Updated some stale code on the homepage.\n\n,e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/5,"{'number': 5, 'state': 'closed', 'merged': False, 'created_at': '2023-02-08T17:54:39Z', 'merged_at': '2023-02-08T23:25:42Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_4,2023-02-08T00:47:37Z,"Added a skeleton blog to the website.\n\nThis PR adds a very, very minimal blog section to the website. For now, it contains two fake blogs just to exercise the code. I took a lot of inspiration from [Go's blog][1].

For now, there's a lot of boilerplate and repetition in writing blogs. We could augment `docgen.go` to automate some of this, similar to [what Jekyll has][2]. But, since I don't anticipate us writing a ton of blog posts really quickly, I'll defer this until we actually need it.

[1]: https://go.dev/blog/all
[2]: https://jekyllrb.com/docs/step-by-step/08-blogging/",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/4,"{'number': 4, 'state': 'closed', 'merged': False, 'created_at': '2023-02-08T00:47:37Z', 'merged_at': '2023-02-08T17:53:13Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-08. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_3,2023-02-07T22:49:26Z,"Updated stale examples/go.mod.\n\nBefore this PR, the `examples/go.mod` file had some replace statements for weaver/gke and dolt, both of which no longer exist. This PR deletes and regenerates the `go.mod` file.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/3,"{'number': 3, 'state': 'closed', 'merged': False, 'created_at': '2023-02-07T22:49:26Z', 'merged_at': '2023-02-08T17:47:19Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_2,2023-02-07T17:22:11Z,"Added GitHub workflow to build and test Go code.\n\nThis CL adds a GitHub workflow [1] that builds and tests our code every time it is pushed. I mostly copied the instructions in [2] and made some slight modifications.

Some interesting features:

- We build and test with three go versions: 1.18, 1.19, and 1.20.
- We cache golangci-lint, so it installs very quickly.

[1]: https://docs.github.com/en/actions
[2]: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/2,"{'number': 2, 'state': 'closed', 'merged': False, 'created_at': '2023-02-07T17:22:11Z', 'merged_at': '2023-02-07T19:20:01Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
github_pr,gh_pr_1,2023-02-07T17:14:30Z,"Tidied up README.md.\n\nThis CL tidies up README.md, fixing some broken commands and wrapping lines to 80 characters.",e8257755d56877f3,https://github.com/ServiceWeaver/weaver/pull/1,"{'number': 1, 'state': 'closed', 'merged': False, 'created_at': '2023-02-07T17:14:30Z', 'merged_at': '2023-02-07T19:12:47Z', 'comments_count': 0, 'review_comments_count': 0, 'language': 'en'}",pre_launch,unknown,unclear,"Temporal: pre_launch based on 2023-02-07. Resolution: unknown (state=unknown, labels=[]). Root cause: unclear (code=)"
hackernews_story,hn_story_34986267,2023-03-01T18:25:34Z,Service Weaver: A Framework for Writing Distributed Applications\n\n\n\nURL: https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html,1d713d48aab58250,https://news.ycombinator.com/item?id=34986267,"{'story_id': '34986267', 'points': 117, 'num_comments': 39, 'external_url': 'https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html', 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34989457,2023-03-01T19:51:55,"&gt; microservices severely impacted our ability to make cross-binary changes. It made us do things like flag-gate new features in each binary, evolve our data formats carefully, and maintain intimate knowledge of our rollout processes. Finally, having a predetermined number of specific microservices effectively froze our APIs; they became so difficult to change that it was easier to squeeze all of our changes into the existing APIs rather than evolve them.<p>I&#x27;m amused by how the rise of microservices was in part due to the promise of solving some of these problems as they arose in the classic monolith. Independent teams, decoupled deploys, etc.<p>Putting a network request between components doesn&#x27;t decouple them, it just trades one kind of coupling for another. Even worse, some previously explicit coupling becomes hidden, but remains present.",b4b553d9c2a5c158,https://news.ycombinator.com/item?id=34989457,"{'comment_id': 34989457, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34989792,2023-03-01T20:23:24,"OK.<p>We&#x27;ve been here before, the &quot;transparent RPCs&quot; path.<p>SunRPC, Mach Messages and MiG, various even more transparent distributed object systems etc. etc. etc.<p>So it would be <i>awesome</i> to have some reference to these earlier systems and how this project overcomes the problems they encountered.  I checked the FAQ ( <a href=""https:&#x2F;&#x2F;serviceweaver.dev&#x2F;docs.html#faq"" rel=""nofollow"">https:&#x2F;&#x2F;serviceweaver.dev&#x2F;docs.html#faq</a> ) and didn&#x27;t find anything.<p>Or a brief explanation why this is so incredibly different that those issues don&#x27;t apply.  Or a brief explanation that those issues weren&#x27;t problems and everything is just dandy.  Or even we didn&#x27;t consider those systems at all.<p>Just <i>something</i>.<p>Cheers!",b372dec31b8a4024,https://news.ycombinator.com/item?id=34989792,"{'comment_id': 34989792, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35027996,2023-03-05T05:55:59,"&quot;Transparent Networking&quot; achieved. To reach the next level you should unlock an &quot;Actor Model&quot; :)<p>PS for me, it&#x27;s more like reinventing Erlang ideas in Golang. If you want to cut the corner here is the ready-to-use Framework in Golang <a href=""https:&#x2F;&#x2F;github.com&#x2F;ergo-services&#x2F;ergo"">https:&#x2F;&#x2F;github.com&#x2F;ergo-services&#x2F;ergo</a> - implements all Erlang&#x27; neats.",e7b315ef1d70e4cd,https://news.ycombinator.com/item?id=35027996,"{'comment_id': 35027996, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-05. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34989134,2023-03-01T19:18:53,I always dreamed of something like this where functions could be called as normal but they could be an RPC behind the scenes. The compiler would take care of serialization&#x2F;deserialization and routing.<p>But how is it possible to not worry about network. Every function is now able to fail. Why don&#x27;t you need to handle this explicitly? Or is there just a default behaviour that can be overriden?<p>Edit: after reading the docs I think I understand a bit more. You&#x27;ll have have to deal with network errors on anything crossing module boundaries.,9f6e5180b3cb46c5,https://news.ycombinator.com/item?id=34989134,"{'comment_id': 34989134, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34990261,2023-03-01T21:18:02,"There has never been any issues with hiding distributed RPC calls.<p><a href=""https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fallacies_of_distributed_computing"" rel=""nofollow"">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fallacies_of_distributed_compu...</a>",032376bbd4e030e7,https://news.ycombinator.com/item?id=34990261,"{'comment_id': 34990261, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34989373,2023-03-01T19:42:47,"This reminds me of &quot;Distributed Applications&quot; in Erlang (<a href=""https:&#x2F;&#x2F;www.erlang.org&#x2F;doc&#x2F;design_principles&#x2F;distributed_applications.html"" rel=""nofollow"">https:&#x2F;&#x2F;www.erlang.org&#x2F;doc&#x2F;design_principles&#x2F;distributed_app...</a>).",4701949f0dcc5e8b,https://news.ycombinator.com/item?id=34989373,"{'comment_id': 34989373, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34990112,2023-03-01T20:58:54,"This is... EJBs. It is probably less painful to use, but the model is pretty much the same. Fascinating.",94ccee6c9be66c2d,https://news.ycombinator.com/item?id=34990112,"{'comment_id': 34990112, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34993517,2023-03-02T05:49:10,"Using the term microservices here is confusing. The main point of microservices as an architectural pattern is decoupling release cadence between teams in very large organizations.
The scaling&#x2F;redundancy part is not unique to microservices. 
What this framework seem to be doing is allowing a team to deploy a system developed as a single binary monolith as a distributed system.<p>The organizational use case is orthogonal to what microservices were all about.<p>Granted, microservices have been cargoculted like crazy, so this distinction is probably lost on a lot of engs. But for those of us that remember the original meaning, mentioning microservices in the description of this framework, is odd.",9940cbfb6299ef8a,https://news.ycombinator.com/item?id=34993517,"{'comment_id': 34993517, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-02. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34990528,2023-03-01T21:53:11,"Super cool. If I understand correctly:<p>- There&#x27;s no IDL file, like a .proto file. Instead, weaver looks for marker interfaces by embedding weaver.Implements[T].<p>- Weaver interfaces must be serializable, which explicitly support protobufs. Was the intent to be able to port gRPC services to weaver?<p>- Weaver maintains a list of deployments, and each deployment has components. Components may only communicate with components belonging to the same deployment. Sounds like a way to implement atomic deploys.<p>- Named listeners are mapping over a net.Listener?<p>Sidenote: I&#x27;m going to steal the metrics implementation. I haven&#x27;t found a lightweight metrics implementation for GCP.",9fcd11f7f2fdb5eb,https://news.ycombinator.com/item?id=34990528,"{'comment_id': 34990528, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35025747,2023-03-04T21:00:00,"One of the reasons I break code down into smaller pieces ( microservice ) is to have fast edit and compile times.<p>The versioning hell is why so many went to mono repos. There is only one git version and that’s it.<p>Also what about runtime version difference and schema evolution?<p>So many thing come into play.<p>I would rather just buy the bullet and use protobufs with NATS from day one . No load balances and heavy expensive gke &#x2F; k8 stuff<p>Then deploy of fly where I have regions with auto scaling based on metric feedback loops.<p>Then use nats client on all client to get geo physical load balancing out to the nearest region.<p>Then use their postresql multi Region. Cockroach multi Region replication costs big money.<p>I did like their tooling in Weaver though. Even the converged logging was pretty nice.<p><a href=""https:&#x2F;&#x2F;github.com&#x2F;ServiceWeaver&#x2F;weaver&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;logging&#x2F;files.go"">https:&#x2F;&#x2F;github.com&#x2F;ServiceWeaver&#x2F;weaver&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;lo...</a>",514d67ad7dd1897e,https://news.ycombinator.com/item?id=35025747,"{'comment_id': 35025747, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-04. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_37338545,2023-08-31T15:18:08Z,Go ServiceWeaver: Towards Modern Development of Cloud Applications [video]\n\n\n\nURL: https://www.youtube.com/watch?v=Q90osDkqZt0,3840df748c7f206c,https://news.ycombinator.com/item?id=37338545,"{'story_id': '37338545', 'points': 3, 'num_comments': 0, 'external_url': 'https://www.youtube.com/watch?v=Q90osDkqZt0', 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-08-31. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35460079,2023-04-05T20:40:22Z,How to Implement a Service Weaver Deployer\n\n\n\nURL: https://serviceweaver.dev/blog/deployers.html,e8257755d56877f3,https://news.ycombinator.com/item?id=35460079,"{'story_id': '35460079', 'points': 3, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/blog/deployers.html', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-04-05. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_34986317,2023-03-01T18:28:05Z,Service Weaver: A Framework for Writing Distributed Applications\n\n\n\nURL: https://serviceweaver.dev/,32ae543b776e9f94,https://news.ycombinator.com/item?id=34986317,"{'story_id': '34986317', 'points': 3, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35917493,2023-05-12T15:21:21Z,Digging into Service Weaver: Dependency Injection\n\n\n\nURL: https://preslav.me/2023/05/12/golang-dependency-injection-in-google-service-weaver/,2cc2882979e7540f,https://news.ycombinator.com/item?id=35917493,"{'story_id': '35917493', 'points': 2, 'num_comments': 0, 'external_url': 'https://preslav.me/2023/05/12/golang-dependency-injection-in-google-service-weaver/', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-05-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35057110,2023-03-07T16:18:08Z,Service Weaver is a programming framework for writing and deploying cloud apps\n\n\n\nURL: https://serviceweaver.dev/,e1de54c009201a81,https://news.ycombinator.com/item?id=35057110,"{'story_id': '35057110', 'points': 2, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-07. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35015531,2023-03-03T21:51:04Z,Calm down about Service Weaver\n\n\n\nURL: https://newsletter.goodtechthings.com/p/calm-down-about-service-weaver,79723b8a52a92f23,https://news.ycombinator.com/item?id=35015531,"{'story_id': '35015531', 'points': 2, 'num_comments': 0, 'external_url': 'https://newsletter.goodtechthings.com/p/calm-down-about-service-weaver', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_41122468,2024-07-31T19:19:51Z,Calm down about Service Weaver\n\n\n\nURL: https://newsletter.goodtechthings.com/p/calm-down-about-service-weaver,706e080092e75b0d,https://news.ycombinator.com/item?id=41122468,"{'story_id': '41122468', 'points': 1, 'num_comments': 0, 'external_url': 'https://newsletter.goodtechthings.com/p/calm-down-about-service-weaver', 'language': 'en'}",decline,unknown,unclear,Temporal: decline based on 2024-07-31. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_38988781,2024-01-14T09:12:25Z,Service Weaver: a framework for writing and deploying cloud applications\n\n\n\nURL: https://serviceweaver.dev/,b1400cb8d091f689,https://news.ycombinator.com/item?id=38988781,"{'story_id': '38988781', 'points': 1, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/', 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2024-01-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35620151,2023-04-18T21:05:18Z,CORBA vs. the Fallacies of Distributed Computing\n\n\n\nURL: https://serviceweaver.dev/blog/corba.html,e8257755d56877f3,https://news.ycombinator.com/item?id=35620151,"{'story_id': '35620151', 'points': 4, 'num_comments': 5, 'external_url': 'https://serviceweaver.dev/blog/corba.html', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-04-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35622216,2023-04-18T20:54:43,"I liked CORBA, mainly the IDL and IIOP (I didn&#x27;t use many of the parts that other people hated).  It felt like a sequel to Sun RPC and it was easy to move to gRPC.  The main problem I had was the Any type wasn&#x27;t performant.<p>After working with remote call systems for a while I concluded there should only be two RPCs:<p>GetMessage() (which polls for incoming messages) and PutMessage() (which sends a message).  All the method information goes in the payload. There are no verbs or headers (HTTP). There is no relationship between the message and some resource system (REST).   The name &quot;message&quot; is an indicator that a message is being passed, rather than a remote call with function-call-like semantics (similar to MPI).",0f8f92d611d61c44,https://news.ycombinator.com/item?id=35622216,"{'comment_id': 35622216, 'story_id': '35620151', 'parent': 35620151}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-04-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35620622,2023-04-18T18:37:25,"I&#x27;ve done shit all to follow up but Corba retains a huge special place in my mind as the excuse everyone uses for giving up. It&#x27;s the albatross around trying for beat distributed systems neck.<p>This post is just a mild opening, a brief start, in the Speaking for the Dead of CORBA. It&#x27;s still vastly more useful context on a deep issue than we&#x27;ve seen in well over a decade, probably.",f802668b0ee21ef7,https://news.ycombinator.com/item?id=35620622,"{'comment_id': 35620622, 'story_id': '35620151', 'parent': 35620151}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-04-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35620801,2023-04-18T18:49:39,"CORBA did not fail. I don&#x27;t know what the author is trying to push. We used CORBA extensively in its day, nowadays there are better alternatives but to say it failed is completely wrong",4d266723cfb15091,https://news.ycombinator.com/item?id=35620801,"{'comment_id': 35620801, 'story_id': '35620151', 'parent': 35620151}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-04-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35064345,2023-03-08T02:14:09Z,Programming framework for writing and deploying cloud applications\n\n\n\nURL: https://github.com/ServiceWeaver/weaver,20e6896ed772f94f,https://news.ycombinator.com/item?id=35064345,"{'story_id': '35064345', 'points': 3, 'num_comments': 1, 'external_url': 'https://github.com/ServiceWeaver/weaver', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35064362,2023-03-07T23:16:50,"Hi all, thank you for making this dream framework come true. I have been looking forward to this kind of tool in Go for a long time.<p>But sadly I noticed that, in the Serializable Types section of FAQ, chan t type is not supported.<p>I am wondering if there are any current plans or ongoing discussions around supporting it. As it is something that I need, I would be also interested in getting involved and contributing to its development.",567446b99757372f,https://news.ycombinator.com/item?id=35064362,"{'comment_id': 35064362, 'story_id': '35064345', 'parent': 35064345}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-07. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35008048,2023-03-03T10:57:37Z,Programming framework for writing and deploying cloud applications from Google\n\n\n\nURL: https://serviceweaver.dev/,6f3d0593e2fc7340,https://news.ycombinator.com/item?id=35008048,"{'story_id': '35008048', 'points': 2, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_37070067,2023-08-10T00:03:27Z,Using Advanced Go Features to Detect Stale Code\n\n\n\nURL: https://serviceweaver.dev/blog/weaver_generate.html,e8257755d56877f3,https://news.ycombinator.com/item?id=37070067,"{'story_id': '37070067', 'points': 1, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/blog/weaver_generate.html', 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-08-10. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_36958244,2023-08-01T16:27:02Z,Strongly Typed Metric Labels Using Generics in Go\n\n\n\nURL: https://serviceweaver.dev/blog/metric_labels.html,e8257755d56877f3,https://news.ycombinator.com/item?id=36958244,"{'story_id': '36958244', 'points': 1, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/blog/metric_labels.html', 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-08-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_2902500,2011-08-19T06:45:42Z,"Ask HN: Any good BuySellAds(BSA) alternatives?\n\nWe are PSD to HTML/WP agency in Sydney, Australia and the business is pretty stable. http://www.xtmlweaver.com<p>We've been using BSA for awhile and the monthly budget is about $2K for advertisings (cross few different sites).<p>I'd say that BSA is pretty good and hassle free service. But in recent month the CTR has been dropped for us so the money we spent doesn't give us good return.<p>I am wondering that are there any good BuySellAds(BSA) alternatives for tPSD to HTML/WP type business?<p>I don't think there is any wrong about BSA and actually I still really like their service, just want to see the potential for others.<p>Cheers,",9920aa8c956c2ca2,https://news.ycombinator.com/item?id=2902500,"{'story_id': '2902500', 'points': 5, 'num_comments': 3, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2011-08-19. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_2903711,2011-08-19T12:33:47,I run a large Wed design &#38; development related website. I can send you some decent converting traffic.<p>My contact information is in my profile.,18b6314bc9230378,https://news.ycombinator.com/item?id=2903711,"{'comment_id': 2903711, 'story_id': '2902500', 'parent': 2902500}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2011-08-19. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_2903066,2011-08-19T09:12:19,Hi Nelson - maybe we just need to help you find some better spots :),87270fde125e4b93,https://news.ycombinator.com/item?id=2903066,"{'comment_id': 2903066, 'story_id': '2902500', 'parent': 2902500}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2011-08-19. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_2431087,2011-04-11T02:24:12Z,"Ask HN: Any good BuySellAds(BSA) alternatives for the PSD to HTML/WP shop?\n\nWe are PSD to HTML/WP agency in Sydney, Australia and the business is pretty stable.  http://www.xtmlweaver.com<p>We've been using BSA for awhile and the monthly budget is about $1~2K for advertisings (cross few different sites).<p>I'd say that BSA is pretty good and hassle free service. 
But in recent month the CTR has been dropped for us so the money we spent doesn't give us good return.<p>I am wondering that are there any good BuySellAds(BSA) alternatives for tPSD to HTML/WP type business?<p>I don't think there is any wrong about BSA and actually I still really like their service, just want to see the potential for others.<p>Cheers,",9920aa8c956c2ca2,https://news.ycombinator.com/item?id=2431087,"{'story_id': '2431087', 'points': 1, 'num_comments': 0, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2011-04-11. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_8557203,2014-11-04T16:04:00Z,WeaveDNS – A distributed DNS service for a weave network\n\n\n\nURL: http://weaveblog.com/2014/11/04/have-you-met-weavedns/,088809a65a35d323,https://news.ycombinator.com/item?id=8557203,"{'story_id': '8557203', 'points': 43, 'num_comments': 15, 'external_url': 'http://weaveblog.com/2014/11/04/have-you-met-weavedns/', 'language': 'en'}",pre_launch,acknowledged_not_fixed,unclear,Temporal: pre_launch based on 2014-11-04. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_8557611,2014-11-04T14:08:41,"Great work! I was exploring the distributed docker networking space yesterday for an open source project I&#x27;m working on (<a href=""https://github.com/pnegahdar/sporedock"" rel=""nofollow"">https:&#x2F;&#x2F;github.com&#x2F;pnegahdar&#x2F;sporedock</a>) and the ones I have currently found are:<p>Weave - <a href=""https://github.com/zettio/weave"" rel=""nofollow"">https:&#x2F;&#x2F;github.com&#x2F;zettio&#x2F;weave</a><p>Ambassadord - <a href=""https://github.com/progrium/ambassadord"" rel=""nofollow"">https:&#x2F;&#x2F;github.com&#x2F;progrium&#x2F;ambassadord</a><p>Warmhole - <a href=""https://github.com/vishvananda/wormhole"" rel=""nofollow"">https:&#x2F;&#x2F;github.com&#x2F;vishvananda&#x2F;wormhole</a><p>QTunnel (not docker specific) - <a href=""https://github.com/getqujing/qtunnel"" rel=""nofollow"">https:&#x2F;&#x2F;github.com&#x2F;getqujing&#x2F;qtunnel</a><p>Flannel - <a href=""https://github.com/coreos/flannel"" rel=""nofollow"">https:&#x2F;&#x2F;github.com&#x2F;coreos&#x2F;flannel</a><p>I&#x27;d love a comparison write up if you guys ever get to it.",5a98c46ab0d47730,https://news.ycombinator.com/item?id=8557611,"{'comment_id': 8557611, 'story_id': '8557203', 'parent': 8557203}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-11-04. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_8557853,2014-11-04T14:40:32,"&gt; weaveDNS uses weave’s UDP multicast to solicit answers from other servers when it doesn’t know a name. This probably won’t scale up very far, so we’re looking at other ways of doing that;<p>Does weaveDNS&#x27;s use of UDP multicast go beyond simply finding other Weave nodes? i.e. Weave can discover other nodes via UDP multicast but you can also tell it addresses of other nodes if for instance, you are running in an environment that doesn&#x27;t have UDP multicast available. I&#x27;m wondering if this same workaround can be used for weaveDNS.",9b61aa44e4db4a2d,https://news.ycombinator.com/item?id=8557853,"{'comment_id': 8557853, 'story_id': '8557203', 'parent': 8557203}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-11-04. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_8557730,2014-11-04T14:24:15,I&#x27;m disappointed to see Weave adding features instead of fixing the foundation. Userspace encapsulation is garbage; it&#x27;s both slower and more work than using the kernel&#x27;s built-in encapsulation.,08db938b90a46a27,https://news.ycombinator.com/item?id=8557730,"{'comment_id': 8557730, 'story_id': '8557203', 'parent': 8557203}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-11-04. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_8558688,2014-11-04T16:54:26,"Why not just use <a href=""http://en.wikipedia.org/wiki/Multicast_DNS"" rel=""nofollow"">http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Multicast_DNS</a> and Avahi?",f5088153ab9a4c51,https://news.ycombinator.com/item?id=8558688,"{'comment_id': 8558688, 'story_id': '8557203', 'parent': 8557203}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-11-04. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_10185062,2015-09-08T11:33:34Z,Weave 'Gossip' DNS – Service Discovery for Docker\n\n\n\nURL: http://blog.weave.works/2015/09/08/weave-gossip-dns/,d7a7be41ffa28fce,https://news.ycombinator.com/item?id=10185062,"{'story_id': '10185062', 'points': 4, 'num_comments': 0, 'external_url': 'http://blog.weave.works/2015/09/08/weave-gossip-dns/', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2015-09-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_34225669,2023-01-03T00:15:48Z,"Ask HN: A Better Docker Compose?\n\nIn docker compose you have a flat list of services and you manually weave them together with configuration.
Then in an effort to secure things you add on frontend&#x2F;backend networks to isolate containers from each other.<p><pre><code>   services:
     proxy:
       build: .&#x2F;proxy
       networks:
         - frontend   
     app:
       build: .&#x2F;app
       networks:
         - frontend
         - backend   
     db:
       image: mysql
       networks:
         - backend
      </code></pre>
You add config to share credentials between services.<p><pre><code>   services:
     app:
       build: .&#x2F;app
       environment:
         DB_PASSWORD_FILE: &#x2F;run&#x2F;secrets&#x2F;db_root_password
       secrets:
         - db_root_password
     db:
       image: mysql
       environment:
         MYSQL_ROOT_PASSWORD_FILE: &#x2F;run&#x2F;secrets&#x2F;db_root_password
       secrets:
         - db_root_password
         
   secrets:
     db_root_password:
       file: .&#x2F;secrets&#x2F;db_root_password.txt
    
    </code></pre>
Is there a way to abstract away these extra configuration steps and keep it simple yet secure by default?<p>If you would express db as a dependency&#x2F;resource of app, could you infer that you could put it in a seperate network and have the credentials automatically link?
&#x27;As a developer&#x27; I&#x27;m not really interested in the network specifics or which credentials, I just want them to talk securely and minimize any attack vectors and keep any configuration to a minimum.
With tens of apps, their databases and transversal connections, how to do you keep the configuration to a minimum?<p>Googling around I found;<p>humanitec:
https:&#x2F;&#x2F;docs.humanitec.com&#x2F;integrations&#x2F;resource-types&#x2F;mariadb
They express something as &#x27;resources&#x27;, a dependency type that can be provisioned automatically with inputs and outputs that then can be injected in the application env vars:
mysql:&#x2F;&#x2F;${externals.my-db.username}:${externals.my-db.password}@${externals.my-db.host}:${externals.my-db.port}&#x2F;${externals.my-db.name}<p>you&#x27;re limited to a limited set of drivers ofcourse and how would you express an app1 to app2 dependency?<p>juju:
https:&#x2F;&#x2F;juju.is&#x2F;<p>Each app is packaged in a charm which seems to be a yaml declaring inputs, dependencies and other meta data and optional python code that can respond to certain lifecycle hooks<p>https:&#x2F;&#x2F;discourse.charmhub.io&#x2F;t&#x2F;implementing-relations&#x2F;1051<p><pre><code>   name: my-node-app
   ...
   requires:
     database:
       interface: mongodb
   provides:
     website:
       interface: http
    </code></pre>
Things can seemingly be autowired based on what interface they provide and require?
So just make a list of apps until everything resolves?<p>Does anyone have experience with these tools or others like it?<p>How do you stop others and yourself from drowning in credentials, certificates, env vars, jvm params and k8s yaml(times every environment)
How do you do (not the configuration management) but manage an inventory of what configuration is needed to run your environment (or a subset for ci)?",d678a7bc653e8162,https://news.ycombinator.com/item?id=34225669,"{'story_id': '34225669', 'points': 74, 'num_comments': 73, 'external_url': '', 'language': 'en'}",pre_launch,acknowledged_not_fixed,unclear,Temporal: pre_launch based on 2023-01-03. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34241196,2023-01-03T23:27:43,"I find your example simple and easy to understand and I don&#x27;t see any issues with defining everything explicitly.<p>I&#x27;m using docker swarm&#x2F;compose extensively for multiple years and configuration can be a bit verbose sometimes but it&#x27;s very simple system to maintain and write config for.<p>I think, splitting relatively small configs into smaller bits and using additional abstraction can actually increase complexity of the system compared to having everything in a single file as it&#x27;s basically write and forget and not something you modify heavily once system is mature.",3304269382c79b0f,https://news.ycombinator.com/item?id=34241196,"{'comment_id': 34241196, 'story_id': '34225669', 'parent': 34225669}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2023-01-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34240592,2023-01-03T22:15:55,"At the risk of sounding clichè&#x2F;unhelpful.<p>&gt; “you can solve every problem by adding or removing an abstraction layer”<p>Have you considered generating your YAML&#x2F;JSON config with something that composes?<p>If you are open to it you might be interested in dhall [1] as it’s a config language with variables, functions and imports.<p>I have used it for pet projects and I could see how it could offer some tidy encapsulation patterns for larger, more complicated production applications.<p>[1]: <a href=""https:&#x2F;&#x2F;dhall-lang.org&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;dhall-lang.org&#x2F;</a>",a03ffe162df056ea,https://news.ycombinator.com/item?id=34240592,"{'comment_id': 34240592, 'story_id': '34225669', 'parent': 34225669}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2023-01-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34240880,2023-01-03T22:49:14,"Docker compose is a dead end AFAIK, it&#x27;s not deprecated or anything, but the community power behind it has essentially moved to other things (Kubernetes, but also wasmer, nomad, skaffold).<p>While Docker Desktop &#x2F; Podman &#x2F; Rancher Desktop combined with stuff like Skaffold aren&#x27;t exactly a drop-in replacement for docker-compose, it does do a much better job at bringing up and tearing down entire compositions while re-using existing packaging and access controls.<p>If you are running docker-compose for non-development things, it might be a different story; it might be suitable for non-GitOps things, but as posted elsewhere, at that point you&#x27;re better off using something like systemd.<p>When composing really small setups I either do this with a shell script (think 10 lines including trapping exits) or a systemd unit. Whenever it needs to be bigger I nearly always end up with an actual scheduler (K8S, Nomad) and GitOps because you can&#x27;t really deliver something maintainable, available and durable anymore without it (well... I suppose if you have only 1 project to deliver, forever, you could manually manage it).<p>It does get a whole lot easier when you have a common foundation you can re-use. Spinning up an entire stack with security, monitoring, alerting, automatic rollouts&#x2F;rollbacks for even the smallest project is just single-digit minutes work now.<p>Pulling in some other factors: how sharable&#x2F;collaboratable is something these days if it is not built on similar enough technologies and modules? A solo yolo project might not care much about this, but when was the last time someone asked for software that is risky and not durable?",b97cd95f450b725b,https://news.ycombinator.com/item?id=34240880,"{'comment_id': 34240880, 'story_id': '34225669', 'parent': 34225669}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2023-01-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34240958,2023-01-03T22:58:48,"Personally after using docker compose since it came out I’m excited to see the evolution of local Kubernetes development. I’d scrap even dealing with trying to make something as limited as docker compose do what you want. I’d focus on moving towards local Kubernetes development.<p>This will bring you closer to the deployment stack if you are deploying to Kubernetes. Then also let you leverage tools like kustomize to dry out your configurations.<p>There are some great projects like tilt, devspace, skaffold, etc that help facilitate deving on a local or remote cluster.<p>As far as configuration management that can be as simple as cascading kustomize configs or helm. Then leveraging something like vault. The point really is, if you start with Kubernetes you have way more flexibility with tooling and options to do whatever the heck you want.<p>Shameless plug I recently started a series on local Kubernetes development. It covers some of this with tilt and more. If you would like a specific thing covered here I can add an installment to it.  <a href=""https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=Nj55RDVwrIE&amp;si=EnSIkaIECMiOmarE"">https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=Nj55RDVwrIE&amp;si=EnSIkaIECMiOmarE</a>",111dc8c989013be1,https://news.ycombinator.com/item?id=34240958,"{'comment_id': 34240958, 'story_id': '34225669', 'parent': 34225669}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2023-01-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34242073,2023-01-04T01:33:41,"You can use environment variables with error messages<p><a href=""https:&#x2F;&#x2F;docs.docker.com&#x2F;compose&#x2F;environment-variables&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;docs.docker.com&#x2F;compose&#x2F;environment-variables&#x2F;</a><p><pre><code>   - `${VARIABLE:?err}` exits with an error message containing err if `VARIABLE` is unset or empty in the environment.
   - `${VARIABLE?err}` exits with an error message containing err if `VARIABLE` is unset in the environment.</code></pre>",bcd62964e5f40204,https://news.ycombinator.com/item?id=34242073,"{'comment_id': 34242073, 'story_id': '34225669', 'parent': 34225669}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2023-01-04. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34243473,2023-01-04T05:53:01,"Arion is a Nix wrapper tool for docker-compose. Nix is handy for use as a template language. It is actually closer to a general-purpose language than to a template engine, so I guess what you want can be implemented manually, since it only requires config file generation.<p>Arion docs: <a href=""https:&#x2F;&#x2F;docs.hercules-ci.com&#x2F;arion&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;docs.hercules-ci.com&#x2F;arion&#x2F;</a><p>Nix language: <a href=""https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Nix_Expression_Language"" rel=""nofollow"">https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Nix_Expression_Language</a>",7cd2adcb3554f40a,https://news.ycombinator.com/item?id=34243473,"{'comment_id': 34243473, 'story_id': '34225669', 'parent': 34225669}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2023-01-04. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34241524,2023-01-04T00:10:42,"I use a monorepo (turbo) that has a directory: .&#x2F;app&#x2F;&lt;docker workspace or app name&gt;. In it I have a package.json that runs docker-compose up. I use regular .env files and keep a .env.sample in the repo. The docker-compose brings up the services and volume mounts the .env into it&#x27;s local environment (same with &#x2F;data for example postgres, or some other package).<p>I then disable iptables in &#x2F;etc&#x2F;docker&#x2F;daemon.json: &quot;iptables&quot; : false
to prevent docker from poking a hole in my firewall. (This should be on by default..)
I also enable User name spaces with this: &quot;userns-remap&quot; : &quot;default&quot; so that the  docker image runs isolated.  I can disable this in my docker-compose with userns=host
Actual instructions are slightly different, but:
<a href=""https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;security&#x2F;userns-remap&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;security&#x2F;userns-remap&#x2F;</a><p>I also found I could disable networking all together on some services, and just expose a port. Some services don&#x27;t need to connect to the net.<p>Then I run a cloudflare argo tunnel to the application. But you could also use a nginx reverse proxy, some other tunnel, or a one page express.js reverse proxy with pm2.  There&#x27;s a cloudflare argo tunnel docker-compose setup which allows you to type in your tunnel information in the config. I thought that was cool but I did not try it.",c7b21fb9c193fb45,https://news.ycombinator.com/item?id=34241524,"{'comment_id': 34241524, 'story_id': '34225669', 'parent': 34225669}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2023-01-04. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34241073,2023-01-03T23:12:07,"I’ve been spending a week trying to learn how to deploy a collection of containers (my web app, a Postgres DB, and some microservices) to AWS and I am still so lost.<p>The first solution I happened upon was serverless. Specifically SST, which is written with AWS CDK, but you must develop on live services and I just can’t justify paying to develop.<p>Then I found Serverless Framework, which is an abstraction on CloudFormation, but the offline solutions like localstack get a lot of flack for being buggy and localstack charges for some services. I also looked into Architect but the documentation is abysmal.<p>Then I figured serverful might be the easier way to go. I found that docker compose has a built in integration with AWS ECS where it transforms your yaml into Cloudformation to provision the right services. However, it seems to just be missing key parts like custom domain and SSL certificate provisioning which seems to defeat the IaC ethos.<p>Then I figured I might go with Terraform and I found some seemingly good starters like <a href=""https:&#x2F;&#x2F;github.com&#x2F;aws-ia&#x2F;terraform-aws-ecs-blueprints"">https:&#x2F;&#x2F;github.com&#x2F;aws-ia&#x2F;terraform-aws-ecs-blueprints</a> <a href=""https:&#x2F;&#x2F;github.com&#x2F;cloudposse&#x2F;terraform-aws-ecs-web-app"">https:&#x2F;&#x2F;github.com&#x2F;cloudposse&#x2F;terraform-aws-ecs-web-app</a> <a href=""https:&#x2F;&#x2F;github.com&#x2F;turnerlabs&#x2F;terraform-ecs-fargate"">https:&#x2F;&#x2F;github.com&#x2F;turnerlabs&#x2F;terraform-ecs-fargate</a> but the examples are just lacking. They don’t have any examples for multiple containers that can access each others’ resources that I can find. Reading these templates has at least given me a better idea of the resources I need to provision in AWS but the networking and configuration still frighten me. Like do I need to configure nginx with a reverse proxy myself? How do I orchestrate that container with the others? And apparently services can crash and just not restart? And I need to make sure to configure volumes for data that needs to persist. And setting up the CI&#x2F;CD seems daunting.<p>I’ve also heard about docker swarm, kubernetes, pulumi, AWS SAM, etc but it’s a lot to learn. When I go on Discords for web frameworks, mostly everyone including the devs of these frameworks use 2nd tier managed providers like Vercel, Fly, Netlify, Supabase, Cloudflare, etc. But many of those are just not as reliable as core cloud providers, the cost is way higher, and now you’re setting up a local stack that probably wildly differs from how it will work in production between those services. Glad to see I’m not alone in a very reasonable expectation of a simple way to orchestrate multiple containers on AWS, what must be the most common use case web developers have",0b1e1cec0a8796d7,https://news.ycombinator.com/item?id=34241073,"{'comment_id': 34241073, 'story_id': '34225669', 'parent': 34225669}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2023-01-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34240668,2023-01-03T22:24:53,"I find this really annoying. There&#x27;s also no concept of a package like Helm Charts which means you can distribute all your images on Docker Hub but then when it comes to compose files and configurations with templating your up @$%^ creek.<p>I was hoping something like <a href=""https:&#x2F;&#x2F;dagger.io&#x2F;"">https:&#x2F;&#x2F;dagger.io&#x2F;</a> might solve this but they currently don&#x27;t support compose files, or maybe <a href=""https:&#x2F;&#x2F;www.acorn.io&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;www.acorn.io&#x2F;</a> ?<p>It does feel like there is a legitimate space for a multi-container service application standard that isn&#x27;t just kubernetes, unless perhaps things like k3d and docker desktop end up so good at running tiny k8s that docker compose dies.",317edf8168561fdf,https://news.ycombinator.com/item?id=34240668,"{'comment_id': 34240668, 'story_id': '34225669', 'parent': 34225669}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2023-01-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34240485,2023-01-03T22:04:10,"I&#x27;m not really sure what problem you&#x27;re trying to solve here; if you want to follow DRY, there are YAML tricks you can use[0], but if you want docker-compose to &quot;figure it all out&quot; itself, I don&#x27;t think there are a safe set of assumptions it could make to reliably meet your expectations.<p>Also I&#x27;m not sure it really matters; again this would help to understand your question better, because I think you&#x27;re trying to solve a problem that may not exist in your threat model.<p>[0] <a href=""https:&#x2F;&#x2F;medium.com&#x2F;@kinghuang&#x2F;docker-compose-anchors-aliases-extensions-a1e4105d70bd"" rel=""nofollow"">https:&#x2F;&#x2F;medium.com&#x2F;@kinghuang&#x2F;docker-compose-anchors-aliases...</a>",311f358074ecc016,https://news.ycombinator.com/item?id=34240485,"{'comment_id': 34240485, 'story_id': '34225669', 'parent': 34225669}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2023-01-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_12082407,2016-07-12T21:28:37Z,"Farewell from Weave\n\nWeave.in was a service that partnered you with other professionals in your area to meet over coffee&#x2F;etc. I received this email from them ~2PM PST July 12, 2016<p>====<p>Hello,<p>We started Weave to make expanding your professional network easy, productive, and enjoyable. In the last 3 years we&#x27;ve created hundreds of thousands of new professional connections. Connections that became co-founders, investors, mentors, co-workers, and friends. Your stories were what made working on Weave so fun and fulfilling.<p>While Weave became the primary source of new professional connections for many people, we were unable to make it financially viable. As of next Monday, we will be shutting Weave down.<p>Thank you so much for being part of our community. You made time to meet and help complete strangers. You were what made Weave great.<p>The Weave Team<p>PS: If you&#x27;d like to download a list of your matches, respond to this email and let us know. Premium Members will receive a refund for this month.",70504ffbe78bde7a,https://news.ycombinator.com/item?id=12082407,"{'story_id': '12082407', 'points': 3, 'num_comments': 1, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-07-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_12083789,2016-07-13T00:51:20,"I&#x27;m curious to know more about this. Perhaps when the team has some breathing space, zealoustiger or fuJiin could share more about the decision.<p>Also, if you don&#x27;t mind sharing, it would be good to know more about what it would have cost to continue to run the service without any additional features or support.",db256d767234ec86,https://news.ycombinator.com/item?id=12083789,"{'comment_id': 12083789, 'story_id': '12082407', 'parent': 12082407}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-07-13. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_31143847,2022-04-24T13:36:29Z,"Ask HN: Migadu? Postale? Mxroute? Or any other mail services using this model?\n\nI&#x27;m still looking round for an alternative to Google Workspace, when they get rid of the free tier for custom domains, in a month or so&#x27;s time.<p>My needs are pretty basic; I just want a reliable email service that I can run on my own domain, with a couple of addresses for family members. I&#x27;m not bothered about all the other business-related stuff. Privacy and encryption would be preferable, but not an absolute deal-breaker. Anything I want to discuss in private goes by encrypted messenger anyway, not email.<p>One must have is IMAP support. I run a load of email addresses [not all via Gmail or Google Workspaces] so  I want to be able to keep them all in the same place [Thunderbird] and not have to fire up different apps for different accounts.<p>So far, I&#x27;ve checked out most of the oft-recommended options; Protonmail, Tutanota, Mailbox, Mailfence, CTemplar, Runbox, Zoho, etc. and found that there were issues with most of them --whether this was lack of IMAP support, lack of Unicode support [Hello Runbox and Zoho. It&#x27;s 2022!] or just general uneasiness after reading customer reviews.<p>But, by far the biggest no-no with all of these services is that they charge for each separate email address. I have emails set up on my domain for the missus, and a couple of family members. So 4 in all. As each of these services charges per user, that effectively means quadruple the stated price for any of them. For amount of emails sent on the accounts --a handful a week at most, that ends up being prohibitively expensive, for the amount of usage.<p>Which brings me onto the 3 mentioned in the title.  Migadu[0], Postale[1] and MXroute[2] all charge by the amount of emails you send, not by the number of actual addresses you set up on the domain. Which seems a much fairer system. Especially for my use case.  So, unless anyone is aware of another option, I&#x27;m wavering between those three.<p>I still have some doubts though:<p>MIGADU --Probably the best known of this business model and the prices seem reasonable for what I want. But a quick read through their T&amp;Cs is pretty alarming.  Their Acceptable Use policy [3] pretty much says they can suspend your account without warning for a huge range of subjective reasons. Including:<p><pre><code>  &gt;Hate speech, racism, calls for violence, Nazism as well any other immoral, unethical or socially unacceptable activity will be denied service. If illegal, we will report such to the authorities.
</code></pre>
Quite apart from the fact that this implies that Migadu are scanning the content of every email that their users send; what the actual fuck is a bloody email server company doing, taking on the role of arbitrating what is &#x27;Nazi&#x27;, &#x27;immoral&#x27; or &#x27;socially unacceptable&#x27;?<p>This virtue signalling shite is really going too far these days. By all means take down accounts that are indulging in illegal activity, but otherwise just keep your noses the hell out of people&#x27;s private correspondence!<p>So, thats&#x27;s MIGADU ruled out.  Next up...<p>POSTALE --I didn&#x27;t actually find anything too egregious on the Postale website. But that was part of the problem. I couldn&#x27;t find any info about the company at all. ie. where are they based?.. where are their servers?.. etc?  Even on the company &#x27;About&#x27; page[4], all we get is mention of an unnamed &#x27;creator&#x27; and the only contact details are an email address. I have absolutely no idea where this company is based, or what size it is. For all I know, it could be some kid in his bedroom.  A bit dubious about entrusting my email to such an unknown entity.<p>MXROUTE --I hadn&#x27;t heard of these, til I saw a few recommendations on HN. On the face of it, it seems to be a good fit. I&#x27;m not afraid of a bit of setup and configuration.  However, I have noticed people complaining about the company&#x27;s &#x27;attitude&#x27; and, reading through their FAQs they do come across as pretty abrasive --even down to making a point of not offering refunds to anyone who signs up and doesn&#x27;t like the service.<p>CONT&#x27;D --&gt;",cf547e951cb6a8d1,https://news.ycombinator.com/item?id=31143847,"{'story_id': '31143847', 'points': 61, 'num_comments': 60, 'external_url': '', 'language': 'en'}",pre_launch,acknowledged_not_fixed,unclear,Temporal: pre_launch based on 2022-04-24. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_31145197,2022-04-24T12:50:04,"I&#x27;ve used Migadu for several years after switching from Google Apps. Technologically, I&#x27;ve been pretty satisfied. I have a lot of custom domains that I may want to use different users&#x2F;mailboxes on and Migadu&#x27;s pricing model makes that pretty easy.<p>In 2020, there was some turmoil with Migadu where they nearly (or completely) doubled their prices and didn&#x27;t communicate it well. I was paying 45&#x2F;yr then abruptly started paying 90&#x2F;yr on the same&#x2F;equivalent plan. They also took away a couple of features purported to be the cause behind some performance issues they had. During that time, their service was strained. Many users, me included, didn&#x27;t realize there was an issue until no e-mail was received for days. Support just said &quot;sorry&quot; and that there was a post about it on their website. I think this situation soured a lot of users. You can read about it, including some of Migadu&#x27;s response, if you search this site, reddit, and lowendtalk.<p>I agree with you that their speech codes in the TOS are sketchy, ambiguous, and trite. I&#x27;m not sending or receiving any e-mail like that, but I don&#x27;t trust contemporary definitions for those topics. I&#x27;ve been considering another provider when my subscription is due for renewal because of the price change.",dec5ad9db1714654,https://news.ycombinator.com/item?id=31145197,"{'comment_id': 31145197, 'story_id': '31143847', 'parent': 31143847}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-04-24. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_31143865,2022-04-24T10:37:30,"&lt;--CONT&#x27;D<p>[Wow! --first time I&#x27;ve hit HN&#x27;s post character limit!]<p>Now, someone said they have this kind of attitude as a way of targeting their offering towards more tech-minded people and deterring the more needy users. And, at first, I thought; &quot;OK. Fair enough&quot;. But, the more I thought about it the more it started sounding a bit like Steve Jobs.  If I sign up and find it&#x27;s not to my needs, I basically get told to fuck off because I&#x27;m obviously &#x27;holding it wrong&#x27;.<p>That attitude might be fine for someone offering a free product. But it&#x27;s not acceptable for a paid service. As I&#x27;ve said on here before, I think there are far too many developers about these days, who&#x27;ve seen Steve Jobs and Linus Torvalds and think that being an obnoxious arrogant arsehole makes you some kind of techie rock star. When, in fact, it just makes you an obnoxious arrogant arsehole.<p>So there&#x27;s where I&#x27;m up to at the minute. Anyone got any comments re the three mentioned above, or know any other email services which are using this kind of business model, as opposed to per email account charging?<p>The way things are going at the moment, I can see myself ending up spinning up a Mail-in-a-Box[5] server. As nothing I&#x27;ve found out there so far seems worthy of giving my money to.<p>[0] <a href=""https:&#x2F;&#x2F;www.migadu.com"" rel=""nofollow"">https:&#x2F;&#x2F;www.migadu.com</a><p>[1] <a href=""https:&#x2F;&#x2F;postale.io"" rel=""nofollow"">https:&#x2F;&#x2F;postale.io</a><p>[2] <a href=""https:&#x2F;&#x2F;mxroute.com"" rel=""nofollow"">https:&#x2F;&#x2F;mxroute.com</a><p>[3] <a href=""https:&#x2F;&#x2F;www.migadu.com&#x2F;use"" rel=""nofollow"">https:&#x2F;&#x2F;www.migadu.com&#x2F;use</a><p>[4] <a href=""https:&#x2F;&#x2F;postale.io&#x2F;about-us"" rel=""nofollow"">https:&#x2F;&#x2F;postale.io&#x2F;about-us</a><p>[5] <a href=""https:&#x2F;&#x2F;mailinabox.email&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;mailinabox.email&#x2F;</a>",cf547e951cb6a8d1,https://news.ycombinator.com/item?id=31143865,"{'comment_id': 31143865, 'story_id': '31143847', 'parent': 31143847}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-04-24. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_31144373,2022-04-24T11:33:43,"I can vouch for purelymail (<a href=""https:&#x2F;&#x2F;purelymail.com&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;purelymail.com&#x2F;</a>), it&#x27;s simply amazing. Their only rule is basically no marketing emails. It&#x27;s also quite affordable compared to others.",55d8046614f1190e,https://news.ycombinator.com/item?id=31144373,"{'comment_id': 31144373, 'story_id': '31143847', 'parent': 31143847}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-04-24. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_31145638,2022-04-24T13:32:48,"Just host your own mail server and you can have as many accounts you want - I have more than a thousand since I use special addresses when communicating with anyone who is not friend or family. If you worry over reliability - which in my experience is not a problem to be worried over given the tenacity of SMTP in attempting to deliver messages to temporarily off-lined hosts - you could arrange a reciprocal agreement with someone you trust to host a backup (MX) server for your domain(s). You won&#x27;t have to deal with commercial plans, virtue signalling, filtering, bankruptcies (other than your own) or any of the other bothersome irritants which can be encountered when dealing with commercial entities. People will tell you it is impossible to host your own mail, that it takes enormous investments in time, that you&#x27;ll be inundated in spam, that your outgoing mail will not be accepted by the likes of Google and Microsoft and more dire warnings of mayhem and misfortune for those who do not pay someone else to do this work for them. Nearly all of this is untrue, hosting a mail server is no black magic. Just make sure to configure the thing correctly, using a smart host to take care of outgoing mail - this is most likely mandated by your IAP - and DKIM&#x2F;SPF&#x2F;... to please those hosts which require it. Use Spamassassin and (optionally) greylistd for spam filtering, this will take care of the spam problem. All of this can be run on a SBC like a Raspberry Pi.<p>Source: I&#x27;ve hosted my own mail for more than 25 years now, taking it with me from ISP to IAP, from country to country, even through a period where I only had dialup (the consequence of moving to the countryside - now I have gigabit fibre in the same location) by having an arrangement with a friend who ran backup MX for me. Linux + Exim + Spamassassin + greylistd + Dovecot + Sieve is all it takes, all of it is free, running a Raspberry Pi (or similar) costs a pittance. An additional advantage is that you&#x27;ll be ready for the decentralised future of the &#x27;net.",f6b22f3450cb0218,https://news.ycombinator.com/item?id=31145638,"{'comment_id': 31145638, 'story_id': '31143847', 'parent': 31143847}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-04-24. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_31144446,2022-04-24T11:41:26,"I&#x27;ve used Migadu and MXRoute and found Migadu to be the easiest to use by a long shot. MXRoute&#x27;s setup and configuration is full of friction and just odd ways of doing simple things like logging into your account or adding email addresses and the like.<p>It sounds more like you have philosophical differences with these 2 companies, as they are very opinionated right out the gate, as you noted. I think, since they&#x27;re small teams, they&#x27;re trying to scare off users who are going to require a lot of time and effort on the customer service side.<p>That said, my interactions with both companies has been pleasant and professional. But it really does sound like you&#x27;re going to need to roll your own service based on your major complaints.",3994331f67abe05a,https://news.ycombinator.com/item?id=31144446,"{'comment_id': 31144446, 'story_id': '31143847', 'parent': 31143847}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-04-24. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_31145061,2022-04-24T12:37:21,"I&#x27;d advise against MXRoute: <a href=""https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=30225685"" rel=""nofollow"">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=30225685</a><p>Maybe you will have a better time than I, but MXRoute is more <i>opinionated</i> than I&#x27;d like my mail provider to be. If you are ruling out Migadu, you might rule out MXRoute on the same grounds.",0308003a8ba4a44a,https://news.ycombinator.com/item?id=31145061,"{'comment_id': 31145061, 'story_id': '31143847', 'parent': 31143847}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-04-24. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_31144766,2022-04-24T12:10:31,"I’ve been using pobox.com (acquired by Fastmail) for the past 3 months after doing a lot of research just like you. They have very decent pricing, support custom domains and multiple aliases&#x2F;accounts, + addressing etc. So far looks pretty good albeit simple!",433ba12621d7c09e,https://news.ycombinator.com/item?id=31144766,"{'comment_id': 31144766, 'story_id': '31143847', 'parent': 31143847}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-04-24. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_31144972,2022-04-24T12:29:16,"I&#x27;ve used migadu and worked really well. I also have some domains using lunanode - great deal if you have other vps with them but have subjectively experienced more downtime.<p>Migadu just added master password support so can now dsync easily with another dovecot server (ie backups, move, etc). My next config will probably be migadu + selfhosted vps.",1bdfb655f4579d1c,https://news.ycombinator.com/item?id=31144972,"{'comment_id': 31144972, 'story_id': '31143847', 'parent': 31143847}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-04-24. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_31153793,2022-04-25T09:57:30,"Dejan from Migadu here.<p>&gt;Hate speech, racism, calls for violence, Nazism as well any other immoral, unethical or socially unacceptable activity will be denied service. If illegal, we will report such to the authorities.<p>That is not referring to the content of messages but rather general usage of our email service. We <i>never</i> look at the messages except when asked to. If you use our email service for things such as &quot;hate speech, racism, calls for violence&quot;, all being illegal and punishable by law, we would know about it only once we receive a harassment complaint. With a valid proof we would act upon it, first level being asking you politely not to do it because it involves us then.<p>That is rather common sense, and we speak here from experience and past cases.",4c7fecfb8f913f68,https://news.ycombinator.com/item?id=31153793,"{'comment_id': 31153793, 'story_id': '31143847', 'parent': 31143847}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-04-25. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_31145231,2022-04-24T12:53:17,"OVH&#x27;s own &quot;Personal Hosting&quot; provides 10 emails (plus web and domain) for about €24 a year. (add VAT, if you live in a VAT state like me)
<a href=""https:&#x2F;&#x2F;www.ovhcloud.com&#x2F;it&#x2F;web-hosting&#x2F;personal-offer&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;www.ovhcloud.com&#x2F;it&#x2F;web-hosting&#x2F;personal-offer&#x2F;</a><p>Disclaimers:
I don&#x27;t work for OVH; I use it consistently for my customers;
Still, all my own&#x2F;company stuff is <i>self-hosted</i> on my own Colo&#x2F;AS&#x2F;LIR.",f64fb49339214a95,https://news.ycombinator.com/item?id=31145231,"{'comment_id': 31145231, 'story_id': '31143847', 'parent': 31143847}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-04-24. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_11479504,2016-04-12T13:46:30Z,Weave and Docker for Mac: The bridge between local and remote services\n\n\n\nURL: http://blog.runnable.com/post/142665542481/weave-docker-for-mac-the-bridge-between-local,58248c6096a0a9de,https://news.ycombinator.com/item?id=11479504,"{'story_id': '11479504', 'points': 60, 'num_comments': 41, 'external_url': 'http://blog.runnable.com/post/142665542481/weave-docker-for-mac-the-bridge-between-local', 'language': 'en'}",pre_launch,acknowledged_not_fixed,unclear,Temporal: pre_launch based on 2016-04-12. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_11479891,2016-04-12T11:33:51,"Why not just run Linux locally?  Mac OS X is BSD, not Linux, which means its build tools &amp; environment are subtly incompatible.  You&#x27;re always going to be chafing if you develop anywhere other than in your deployment environment.<p>Linux is superlative for desktop &amp; development use.  It supports things like tiling window managers far better than does a Mac.  It&#x27;s free.  The hardware is far more affordable.  Although this is definitely a matter of taste, I find Linux far more <i>usable</i> than a Mac.  I will grant that Mac laptops are lightweight &amp; thin.<p>It just seems weird to me to go through all these contortions to develop software for Linux on a Mac or Windows box when it&#x27;s far easier IMHO to just … run Linux.",4d8b83dd941b5486,https://news.ycombinator.com/item?id=11479891,"{'comment_id': 11479891, 'story_id': '11479504', 'parent': 11479504}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-04-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_11479968,2016-04-12T11:43:07,&gt; sudo curl -L git.io&#x2F;weave -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;weave<p>Do you want ants?  Because that&#x27;s how you get ants.,c22fd464af55d6ba,https://news.ycombinator.com/item?id=11479968,"{'comment_id': 11479968, 'story_id': '11479504', 'parent': 11479504}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-04-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_11480919,2016-04-12T13:21:56,"Hey,<p>We provide an alternate solution ([1]Wormhole) that covers this scenario (and others). The main differences with e.g. Weave are:<p>- Non Docker-specific<p>- Easier to deploy, in my opinion ofc :-)<p>- Based on Open Source (You can just deploy SoftEhter&#x27;s vanilla client as the agent)<p>- We don&#x27;t use vxlan, just SSL encapsulation.<p>- Actually, every client will only generate outbound SSL connections, so chances are you won&#x27;t need to reconfigure any firewalls or network gear for Wormhole to work.<p>- By default, chances are you won&#x27;t overlap with the provided IP addressing (non-public, non-RFC1918 IP space)<p>- Multiplatform Windows &#x2F; Linux &#x2F; Os X<p>- API available to create and deploy networks and clients<p>- Our architecture requires traffic to go up to a central server and down to destination, so there&#x27;s added latency. In my tests I&#x27;ve found this to not penalise performance for most applications as other solutions based on extra layers (I.e. Vxlan) like Weave.<p>Don&#x27;t get me wrong, I think Weave is brilliant. We&#x27;re just an alternative that aims for simplicity. There&#x27;s some overlapping, but we probably have different markets.<p>[1]: <a href=""https:&#x2F;&#x2F;wormhole.network"" rel=""nofollow"">https:&#x2F;&#x2F;wormhole.network</a>",280aec49aa2a9a25,https://news.ycombinator.com/item?id=11480919,"{'comment_id': 11480919, 'story_id': '11479504', 'parent': 11479504}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-04-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_11479687,2016-04-12T11:08:38,"Offtopic, but does anybody know how the diagrams in this article were generated? I&#x27;d love a simple piece of software to generate beautiful, straightforward pictures like this to explain architectural problems.",dd59ca0960f0f22f,https://news.ycombinator.com/item?id=11479687,"{'comment_id': 11479687, 'story_id': '11479504', 'parent': 11479504}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-04-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_11479904,2016-04-12T11:35:12,"Why do you need to connect to remote services using weave? Should the stage environment be separated from you development one?
Anyway nice article.
Thanks",7307530f4ab49ecc,https://news.ycombinator.com/item?id=11479904,"{'comment_id': 11479904, 'story_id': '11479504', 'parent': 11479504}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-04-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_11485487,2016-04-13T00:26:28,"I dream of a company that installs Linux on some of the most popular desktops PROPERLY, and charges users 100$ to install it, and helps you maintain your Linux desktop over the years.<p>Many have tried, no one has succeeded.<p>Canonical had an opportunity to do this... Instead, they had to do &quot;Enterprise&quot; stuff. Bah.",081b859e06b05df9,https://news.ycombinator.com/item?id=11485487,"{'comment_id': 11485487, 'story_id': '11479504', 'parent': 11479504}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-04-13. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_11481552,2016-04-12T14:24:47,"HN discussion about Weave being slow [0]. I dont know if the issue has been addressed since it was first posted.<p>[0] <a href=""https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=9498139"" rel=""nofollow"">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=9498139</a>",2449959b6cbe9937,https://news.ycombinator.com/item?id=11481552,"{'comment_id': 11481552, 'story_id': '11479504', 'parent': 11479504}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-04-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_11484863,2016-04-12T21:50:12,Must admit I thought this was the weave framework google&#x2F;nest are pushing.,67cca36ff9c953b5,https://news.ycombinator.com/item?id=11484863,"{'comment_id': 11484863, 'story_id': '11479504', 'parent': 11479504}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-04-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_10355972,2015-10-08T20:33:26Z,Announcing Weave Scope 'Cloud': hosted Docker visualisation early access program\n\n\n\nURL: http://blog.weave.works/2015/10/08/weave-the-fastest-path-to-docker-on-amazon-ec2-container-service/,d7a7be41ffa28fce,https://news.ycombinator.com/item?id=10355972,"{'story_id': '10355972', 'points': 9, 'num_comments': 1, 'external_url': 'http://blog.weave.works/2015/10/08/weave-the-fastest-path-to-docker-on-amazon-ec2-container-service/', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2015-10-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_10356048,2015-10-08T17:43:02,Sweet!,f60b9aeddd6933ba,https://news.ycombinator.com/item?id=10356048,"{'comment_id': 10356048, 'story_id': '10355972', 'parent': 10355972}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2015-10-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_22914467,2020-04-19T08:45:29Z,"List cloud notifications services with push, SMS, email, slack etc.\n\nWhat are some cloud notifications services that offer an HTTP API to initiate a notification and can send it to push (iOS, Android, browser), SMS, slack etc.<p>Nice to have: support some escalation rules and feedback from the receiver of the notification.<p>Preferable with a free tier or at least low cost tier.<p>Thanks",b50af592c414c689,https://news.ycombinator.com/item?id=22914467,"{'story_id': '22914467', 'points': 8, 'num_comments': 4, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2020-04-19. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_22915390,2020-04-19T09:20:20,I’ve used OneSignal and their generous free tier in the past with great success. It has nifty features like using an external user ID (your backend can just say: send a message to @user123). I had to switch to Firebase Cloud Messaging for compatibility reasons but I still highly recommend OneSignal.,56c9964cdb3c5797,https://news.ycombinator.com/item?id=22915390,"{'comment_id': 22915390, 'story_id': '22914467', 'parent': 22914467}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2020-04-19. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_22914725,2020-04-19T07:05:30,"Since you&#x27;re looking for free or low cost, how about self hosting?<p>Gotify allows push notifications to Android.<p>NodeRED can expose an API and trigger actions such as SMS through plugins.",619034feab230f29,https://news.ycombinator.com/item?id=22914725,"{'comment_id': 22914725, 'story_id': '22914467', 'parent': 22914467}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2020-04-19. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_22914844,2020-04-19T07:37:36,You could try Twilio. Pricing depends on the volume of notifications you send. It supports both apns and gcm. The documentation is good.,9d74e3f6a5059f00,https://news.ycombinator.com/item?id=22914844,"{'comment_id': 22914844, 'story_id': '22914467', 'parent': 22914467}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2020-04-19. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_22917801,2020-04-19T15:32:48,Ifttt,722457a4726648db,https://news.ycombinator.com/item?id=22917801,"{'comment_id': 22917801, 'story_id': '22914467', 'parent': 22914467}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2020-04-19. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_14264297,2017-05-04T12:31:24Z,Why I made a book recommendation service\n\n\n\nURL: https://medium.com/@nicenovelninja/what-book-is-similar-to-weaveworld-f82ddbb12c21,c844646f4ea51e92,https://news.ycombinator.com/item?id=14264297,"{'story_id': '14264297', 'points': 3, 'num_comments': 0, 'external_url': 'https://medium.com/@nicenovelninja/what-book-is-similar-to-weaveworld-f82ddbb12c21', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2017-05-04. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_5858538,2013-06-11T00:03:57Z,"The NSA, CALEA, and the hardware backdoors built into routers (required by law)\n\nEveryone should read this paper in full &quot;CALEA, Carnivore, and Countermeasures&quot; (2000):<p>http:&#x2F;&#x2F;www.dis.org&#x2F;gessel&#x2F;IS2K&#x2F;CALEA_Carnivore.pdf<p>...but not everyone will, so here&#x27;s an excerpt that relates to what I&#x27;m put in the title. The law the excerpt refers to is CALEA (Communications Assistance for Law Enforcement Act), which was passed in the 1990s:<p>&quot;The law, as interpreted by the FBI, requires all companies providing telecommunications services in
the United States to install remote control ports on their routers which allow law enforcement, acting
autonomously and remotely (though theoretically only on a warrant) to easily extract any conversation in it’s entirety, up to 1% of the hub’s total traffic simultaneously. This capability must have been
implemented by 1998, unless a waver until 10&#x2F;24&#x2F;2000 was granted.
Given a large installed base of equipment, there was a controversial element of cost involved. The FBI
played down the cost, asking congress to allocate $500 million. The FBI admits now that the cost
may be 4-8 times that high. Industry estimates the cost at $10 Billion.
Congress was convinced to allocate the original FBI estimate out of tax revenues, meaning the cost of
implementation is borne by taxpayers. The difference in implementation cost is borne by customers
of communication services.&quot;<p>Imagine how far things have come in the past 15 or so years.<p>To imagine that the US has anything less than the full capability to record and data-mine practically every electronically mediated communication is naive.",e2fd7c5283352864,https://news.ycombinator.com/item?id=5858538,"{'story_id': '5858538', 'points': 36, 'num_comments': 4, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2013-06-11. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_5858603,2013-06-10T21:14:07,"PS - an interesting post from slashdot 2010 about this topic:<p><a href=""http:&#x2F;&#x2F;hardware.slashdot.org&#x2F;story&#x2F;10&#x2F;10&#x2F;29&#x2F;1456242&#x2F;hiding-backdoors-in-hardware"" rel=""nofollow"">http:&#x2F;&#x2F;hardware.slashdot.org&#x2F;story&#x2F;10&#x2F;10&#x2F;29&#x2F;1456242&#x2F;hiding-b...</a><p>quartertime writes
&quot;Remember Reflections on Trusting Trust, the classic paper describing how to hide a nearly undetectable backdoor inside the C compiler? Here&#x27;s an interesting piece about how to hide a nearly undetectable backdoor inside hardware. The post describes how to install a backdoor in the expansion ROM of a PCI card, which during the boot process patches the BIOS to patch grub to patch the kernel to give the controller remote root access. Because the backdoor is actually housed in the hardware, even if the victim reinstalls the operating system from a CD, they won&#x27;t clear out the backdoor. I wonder whether China, with its dominant position in the computer hardware assembly business, has already used this technique for espionage. This perhaps explains why the NSA has its own chip fabrication plant.&quot;",e2fd7c5283352864,https://news.ycombinator.com/item?id=5858603,"{'comment_id': 5858603, 'story_id': '5858538', 'parent': 5858538}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2013-06-10. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_5860278,2013-06-11T04:24:50,"I guess any customer using US Equipment in any part of the world is also accessible, even without a local law supporting it?<p>Interestingly I managed to discover a Huawei trojan that installed itself without me granting permission via a hotel router. It wasn&#x27;t particularly well built back in the day which made it easy-ish to identify.<p>Makes me wonder where China is going with all the deals Huawei is making with Govts across the world too.",b511824c9ba9a1a3,https://news.ycombinator.com/item?id=5860278,"{'comment_id': 5860278, 'story_id': '5858538', 'parent': 5858538}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2013-06-11. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_361223,2008-11-12T01:21:56Z,"Ask HN: Impact on sales of using external site for payment processing?\n\nSeems like there's two options for processing payments:<p>1. Integrate a payment system into your app (so the user is actually typing his credit card number on a page within your site)<p>2. Use an external site to process the payment (such as linking the person to a Paypal processing page)<p>PROs of using Paypal:<p>- I don't have to mess w/payment processing<p>- Paypal is viewed as a trusted third party (though some people might think that their credit card info is sent to me through Paypal anyway, which makes this a little weaker)<p>CONs:<p>- People might think they need a Paypal account<p>- Extra step in payment process<p>- More difficult to integrate smoothly into the registration process (my app's customers will register/pay at the same time for use of the service)<p>Has anyone tried both options to see which results in higher completion rates?<p>Edited to add: I suppose it matters a lot who the audience is. In this case the site is geared toward computer savvy people, which makes me lean towards Paypal all things considered. Also, I'm going to just make it a one time payment which will be slightly higher, but I think more people are willing to make a larger one time payment than signing up for a monthly service -- thoughts on that?",121bc7785286a188,https://news.ycombinator.com/item?id=361223,"{'story_id': '361223', 'points': 29, 'num_comments': 17, 'external_url': '', 'language': 'en'}",pre_launch,acknowledged_not_fixed,unclear,Temporal: pre_launch based on 2008-11-12. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_361361,2008-11-12T00:52:23,"Just a word of caution on PayPal, being as unbiased as I can.<p>I have had first-hand experience, on behalf of numerous clients, with problems that can arise with PayPal and some of the crazy things PayPal do out of the blue and without reason (see sites like <a href=""http://www.paypalsucks.com"" rel=""nofollow"">http://www.paypalsucks.com</a> etc. for examples) and always suggest using other methods for anything but low cost products where a chargeback/dispute won't bother you (if you get 2-3 disputes in quick succession, PayPal typically freeze your account and all monies in it for 180 days and even if you jump through all the hoops they set thereafter, will in most cases not unfreeze your account for as long as they possibly can - which is very bad for cash-flow if you are a business).<p>Although low-cost products and small payments for web-services (which being intangible goods are not covered by PayPal seller protections anyway) may be less likely to incur problems with PayPal (especially chargebacks), mainly due to the buyers/users being less likely to complain over what are trivial or easy to resolve matters (e.g. shipping delays or miscommunication) and being more honest in general when compared to those in higher value transactions, I would always suggest using a merchant account or service such as protx for online payment processing and repeated billing.<p>These generally provide a better quality of service anyway, and when things go wrong respond faster, follow legal guidelines and regulations, and are more likely to fight for you than PayPal which <i>will</i> just cave-in and return any monies to the buyer/user on even the smallest issues and with almost no recourse to you or consideration of whether it is the right thing to do in the situation. To PayPal, it is about numbers and money and basically it is cheaper and in their interest for them to hand back money (your money, remember, not theirs) to buyers almost without any seller considerations than fight issues, whereas a merchant account has more legislation and obligation to protect you and will infact dispute chargebacks and other complaints if you so request. Also, unlike PayPal, they will not freeze your account or make other major demands that could affect your business, when customer related issues do occur (and eventually one will occur!).",bdfb83dd715fe636,https://news.ycombinator.com/item?id=361361,"{'comment_id': 361361, 'story_id': '361223', 'parent': 361223}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2008-11-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_361242,2008-11-11T22:38:19,"I offer both options for setting up monthly subscriptions and people go almost exactly 50/50 between the two.  Some people prefer Pay Pal because they feel more secure while others refuse to use Pay Pal for whatever reasons.<p>Setting up a payment system isn't really that difficult.  It seems like if you get even 1% more sign ups because you offer both choices, you should hopefully make out on the extra implementation cost.",6b498e5d10a031b5,https://news.ycombinator.com/item?id=361242,"{'comment_id': 361242, 'story_id': '361223', 'parent': 361223}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2008-11-11. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_361320,2008-11-12T00:02:16,"Have you looked into PayPal Pro? <a href=""https://www.paypal.com/us/cgi-bin/webscr?cmd=_wp-pro-overview-outside"" rel=""nofollow"">https://www.paypal.com/us/cgi-bin/webscr?cmd=_wp-pro-overvie...</a> and <a href=""https://cms.paypal.com/cgi-bin/marketingweb?cmd=_render-content&#38;content_ID=developer/solutions_carts_wp_pro"" rel=""nofollow"">https://cms.paypal.com/cgi-bin/marketingweb?cmd=_render-cont...</a><p>There are a few options you can take, ranging from creating a Google Checkout account, PayPal account or even going as far as a merchant account (where your site is processing a very large amount of transactions a month). Some say PayPal is more buyer-centric and others say Google Checkout is more seller-centric.<p>One thing to consider with PayPal (either Pro or Express Checkout), you need to build into your design and flow the way the customer will purchase the product, enter the product into the shopping cart and then do one of two things:<p>1. If using PayPal pro, continue the transaction all on your site and then return to the product summary/confirmation page.
2. If using Express Checkout, leave your site to PayPal and then return to the product summary/confirmation page.<p>Here's some more information on PayPal Pro, API and integration design: <a href=""https://www.paypalobjects.com/WEBSCR-550-20081103-1/en_US/pdf/PP_WebsitePaymentsPro_IntegrationGuide.pdf"" rel=""nofollow"">https://www.paypalobjects.com/WEBSCR-550-20081103-1/en_US/pd...</a><p>What are you building?",bfbb39dbec65f5fb,https://news.ycombinator.com/item?id=361320,"{'comment_id': 361320, 'story_id': '361223', 'parent': 361223}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2008-11-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_361248,2008-11-11T22:43:21,"We use PayPal for our service (Feedity.com). It works well. But once in a while we have users who simply do not want to pay through PayPal (due to security/privacy issues, or they don't have a credit card). In such cases we generally recommend them to pay with an eCheck. We have perfectly good potential customers waiting for us to provide an alternate payment method. It doesn't happen too often, but at the end of the day, every new customer counts.<p>Another thing we have learned is that you should always offer monthly as well as annual subscriptions. We'll be introducing monthly subscriptions (through PayPal) pretty soon.",589ff773e8c92021,https://news.ycombinator.com/item?id=361248,"{'comment_id': 361248, 'story_id': '361223', 'parent': 361223}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2008-11-11. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_361506,2008-11-12T03:12:43,"You should look at PCI DSS, the new requirements for processing credit card purchases. I haven't looked into it very deeply, but according to the reporting about it you'll no longer be able to use a simple form on your own site to handle credit cards - you'll have to go through an external payment processing site (or implement it yourself and have it audited - expensive!).<p>Compliance with these new rules will be mandatory beginning next year.<p>More info at <a href=""https://www.pcisecuritystandards.org/"" rel=""nofollow"">https://www.pcisecuritystandards.org/</a>",a20c27575ab89e20,https://news.ycombinator.com/item?id=361506,"{'comment_id': 361506, 'story_id': '361223', 'parent': 361223}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2008-11-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_361271,2008-11-11T23:14:11,I think for your audience using paypal will kinda label you amateurish.,005c3a5947b06cf1,https://news.ycombinator.com/item?id=361271,"{'comment_id': 361271, 'story_id': '361223', 'parent': 361223}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2008-11-11. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_361261,2008-11-11T22:57:02,"PayPal is a good alternative checkout method, but less desirable as a billing method. Recurring billing via PayPal, for example, requires your customer to enter a hairy ""User Agreement"" giving you permission to charge them up to several hundred dollars/mo. Try using PayPal at GoDaddy to see what I'm referring to.",598eea516b824fa5,https://news.ycombinator.com/item?id=361261,"{'comment_id': 361261, 'story_id': '361223', 'parent': 361223}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2008-11-11. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_3115048,2011-10-15T16:04:02Z,"House Bill 3011 Disallows Parody of the TSA...Sort of\n\nRead the paragraph of the bill (295) here: http://www.govtrack.us/congress/billtext.xpd?bill=h112-3011&#38;version=ih&#38;nid=t0%3Aih%3A449<p>Excerpt from the bill:<p>‘Whoever, except with the written permission of the Assistant Secretary for Transportation Security (or the Director of the Federal Air Marshal Service for issues involving the Federal Air Marshal Service), knowingly uses the words ‘Transportation Security Administration’, ‘United States Transportation Security Administration’, ‘Federal Air Marshal Service’, ‘United States Federal Air Marshal Service’, ‘Federal Air Marshals’, the initials ‘T.S.A.’, ‘F.A.M.S.’, ‘F.A.M.’, or any colorable imitation of such words or initials, or the likeness of a Transportation Security Administration or Federal Air Marshal Service badge, logo, or insignia on any item of apparel, in connection with any advertisement, circular, book, pamphlet, software, or other publication, or with any play, motion picture, broadcast, telecast, or other production, in a matter that is reasonably calculated to convey the impression that the wearer of the item of apparel is acting pursuant to the legal authority of the Transportation Security Administration or Federal Air Marshal Service, or to convey the impression that such advertisement, circular, book, pamphlet, software, or other publication, or such play, motion picture, broadcast, telecast, or other production, is approved, endorsed, or authorized by the Transportation Security Administration or Federal Air Marshal Service;’.<p>Now, this doesn't necessarily on free speech at first glance. However, I could easily see why someone that is a bit...overzealous...might think they can get away with trying to disallow any parody. Think of the SNL skit about the TSA.",88f718b449e24560,https://news.ycombinator.com/item?id=3115048,"{'story_id': '3115048', 'points': 3, 'num_comments': 1, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2011-10-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_3115103,2011-10-15T13:32:05,"It sounds like a law against impersonating a TSA/FAMS official. Your country probably already has a law against impersonating an FBI / other police officer, but has no trouble producing a wide variety of crime dramas.",7d720128f6705f70,https://news.ycombinator.com/item?id=3115103,"{'comment_id': 3115103, 'story_id': '3115048', 'parent': 3115048}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2011-10-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_2005542,2010-12-14T20:11:30Z,"Ask HN: Forbid users from chosing their own passwords?\n\nWhat if online services did not allow users to chose a custom password, but rather generated a reasonably entropic but easy to remember password/phrase?<p>One way to do it is with synthetic words or phrases that are easy to pronounce in English and optionally, a number or an underscore.<p>These easier to remember passwords would still be weaker than strong custom passwords, but would provide an overall better account security.<p>What do you think?",72c5479f7b1499e3,https://news.ycombinator.com/item?id=2005542,"{'story_id': '2005542', 'points': 1, 'num_comments': 2, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-12-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_2005616,2010-12-14T17:29:25,"There's no such thing as an ""easy-to-remember password"", because people have so many passwords. Do you think your site's password is the only one your customers need to remember? Most people with any kind of online life will have so many logins that memorizing even the more important ones (in their opinion, not yours) is out of the question, no matter how the individual passwords are chosen or generated.<p>(I just checked my own password vault, and I have about 80 of them. This is probably fairly typical for anyone who spends a lot of time on the internet.)<p>""Forbid users from choosing their own passwords"" is functionally equivalent to ""require users to write down their passwords"".",96740abd00fd63c9,https://news.ycombinator.com/item?id=2005616,"{'comment_id': 2005616, 'story_id': '2005542', 'parent': 2005542}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-12-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_2005556,2010-12-14T17:15:16,"If you try hard enough, you can probably get rid of all your users! With no users, you'll have no security risk whatsoever! Brilliant!",b431efa3fd5861aa,https://news.ycombinator.com/item?id=2005556,"{'comment_id': 2005556, 'story_id': '2005542', 'parent': 2005542}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-12-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_3272984,2011-11-24T03:58:04Z,"Google wave is closing sevcie on 30th April 2012\n\nHere is the mail that I just got:<p>Dear Wavers,<p>More than a year ago, we announced that Google Wave would no longer be developed as a separate product. At the time, we committed to maintaining the site at least through to the end of 2010. Today, we are sharing the specific dates for ending this maintenance period and shutting down Wave. As of January 31, 2012, all waves will be read-only, and the Wave service will be turned off on April 30, 2012. You will be able to continue exporting individual waves using the existing PDF export feature until the Google Wave service is turned off. We encourage you to export any important data before April 30, 2012.<p>If you would like to continue using Wave, there are a number of open source projects, including Apache Wave. There is also an open source project called Walkaround that includes an experimental feature that lets you import all your Waves from Google. This feature will also work until the Wave service is turned off on April 30, 2012.<p>For more details, please see our help center.<p>Yours sincerely,<p>The Wave Team",f533c58c95b755ce,https://news.ycombinator.com/item?id=3272984,"{'story_id': '3272984', 'points': 1, 'num_comments': 1, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2011-11-24. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_3272988,2011-11-24T00:59:41,"Here is the URL for the same announcement:<p><a href=""http://www.google.com/support/wave/bin/answer.py?answer=1083134"" rel=""nofollow"">http://www.google.com/support/wave/bin/answer.py?answer=1083...</a>",f533c58c95b755ce,https://news.ycombinator.com/item?id=3272988,"{'comment_id': 3272988, 'story_id': '3272984', 'parent': 3272984}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2011-11-24. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_34781192,2023-02-13T21:50:10Z,"Critique of Recruitment Agencies Part 2: Contracting\n\nCompanies not never, but very nearly almost never, advertise contract work on their web-sites, and as such, recruitment agencies are the only way in which to apply for contract work.<p>I may be wrong, but I think we now run the realtor problem described in Freakonomics.<p>In Freakonomics, the authors found that realtors took much longer to sell their own properties, and by that sold at significantly higher prices, that they did for their clients.<p>The explanation for this is that a realtor is paid a percentage of the sale price, and they can only manage so many properties at any one time, and so it is in fact in their best interest to sell as quickly as possible, rather than waiting what may be some time, for a fractionally better offer (which the client would in fact like very much).<p>To my eye, recruitment agents are in much the same position, because I think they are absolutely flooded with no-hope candidates (typically 25 or more for every even bare-minimum candidate), and so not only is it in their interest to fill the role as soon as possible, to maximize income, it is also very costly for them, in terms of effort, to keep chewing through dozens no-chance CVs per day, and that&#x27;s <i>per open contract</i>.<p>If we imagine there exists a range of quality in candidates, from say 1 to 10, when the higher scores are better and rarer, then it is obvious on the whole we need to wait a certain amount of time, to reliably find a high quality candidate.<p>So what in fact happens is that the first candidate who can possibly fill the role is sent over to the client - usually the day after the contract is advertised.<p>Given that weaker candidates are more common, then on the whole, this method tends toward finding the weakest possible contractor for the role, that the client will accept.<p>Furthermore, I think there is an additional problem with agencies which in fact leads them to <i>actively block</i> high quality contractors.<p>When an exceptional contractor applies and in a timely manner but is not perceived by the agency, and then the client re-advertises the role a week or two later, because the CVs they did receive, all being barely viable candidates, were rejected - the agency is now in a tricky position; if they forward the exceptional CV they already have, the company will find out that contractor did apply and in a timely manner, and was not presented.<p>The upshot of this is that the recruitment agency will now block that contractor and this works as contracts typically go out to only one agency.<p>Finally, recruitment agencies typically are flatly impossible to contact in any way, shape or form, and so it is impossible to ask any questions about a contract - and it is not uncommon for recruitment agencies to omit the most basic, fundamental, necessary information from contract advertisements, such as duration or pay rate.<p>Sometimes the problems are indicative of incompetence, with email addresses bouncing and phone numbers being actually invalid, but I think are actually systemic; agencies actively look to block all communication <i>except</i> for applications, and these only via whatever prescribed route is provided, such as LinkedIn.<p>Moreover, there is no time to ask questions anyway; any CV after the first 50 or so will be ignored, as the one or two minimally-viable candidates by then received will have been forwarded, as quickly as possible, so the agency no longer has to process incoming CVs for that position.<p>You could be <i>God</i>, applying for a role; it just wouldn&#x27;t matter.<p>I may be wrong, but there is only one solution to this problem; make your own web-site, advertise your services, and have clients come to you.  It will take time, but this alternative, contracting through agencies, it&#x27;s a game you lose by playing.",0eba46a8c464adc5,https://news.ycombinator.com/item?id=34781192,"{'story_id': '34781192', 'points': 1, 'num_comments': 0, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2023-02-13. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_11721321,2016-05-18T12:11:49Z,"Having fun attempting to predict announcement at Google I/O 2016\n\nHere are the Google I&#x2F;O predictions for 2016.   These are just predictions and, we&#x27;ll have fun guessing.<p>- Google Weave will be publicly available as part of the Google Cloud Platform to connect and control internet of things.
- Google Project Brillo will be announced exiting beta stage for embedding an Android O&#x2F;S into your embedded device.
- Project Brillo will support range of embedded devices, Intel&#x27;s IoT microcontroller family (ie:  Intel Edison).
- Google Project Tango will further enable development content creation of VR &#x2F; 3D spaces.
- Live 360 video content creation.
- Google services for businesses and other productivity tools.
- Self driving cars and drones demonstrate the future of automation.
- More on Android Pay and NFC &#x2F; Bluetooth enabled payments.
- Additional AI, Machine Learning services for Google Cloud Platform with particular concentration on NLP and chat bot systems.
- Android N, or new Android Platform.
- More on Google Spaces.<p>The goodies and swag!  What do we expect Google I&#x2F;O attendees will receive this year?  Google Nexus phones enabled for Google Fi network and&#x2F;or Project Tango dev kit.   Well thats a wrap.<p>We expect that users will have a lot of open space particularly to see self driving cars and drones in action, possibly with the aid of VR and VR headsets.<p>Let&#x27;s see how well the predictions goes.<p>This is an article from the following post: https:&#x2F;&#x2F;blog.followiot.com&#x2F;2016&#x2F;05&#x2F;18&#x2F;googleio-2016-predictions-followiot&#x2F;",857e4cb3e7cbefaa,https://news.ycombinator.com/item?id=11721321,"{'story_id': '11721321', 'points': 1, 'num_comments': 0, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-05-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_11477471,2016-04-12T05:41:09Z,US Postal Service Promotes Kristin Seaver to CIO\n\n\n\nURL: http://on.wsj.com/1VjLQsl,f34e328882630dd4,https://news.ycombinator.com/item?id=11477471,"{'story_id': '11477471', 'points': 1, 'num_comments': 0, 'external_url': 'http://on.wsj.com/1VjLQsl', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-04-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_12976005,2016-11-17T09:54:33Z,Service for backup and encrypt private data from social networks\n\n\n\nURL: https://techcrunch.com/2016/11/16/kaspersky-eyes-launching-a-real-time-back-up-service-for-social-media-leavers/,a0680907c78c7228,https://news.ycombinator.com/item?id=12976005,"{'story_id': '12976005', 'points': 1, 'num_comments': 0, 'external_url': 'https://techcrunch.com/2016/11/16/kaspersky-eyes-launching-a-real-time-back-up-service-for-social-media-leavers/', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-11-17. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_31735601,2022-06-14T06:58:49Z,"Single beaver caused mass internet, cell service outages in Northern B.C\n\n\n\nURL: https://bc.ctvnews.ca/single-beaver-caused-mass-internet-cell-service-outages-in-northern-b-c-1.5944697",3c681a2cb13527b2,https://news.ycombinator.com/item?id=31735601,"{'story_id': '31735601', 'points': 4, 'num_comments': 0, 'external_url': 'https://bc.ctvnews.ca/single-beaver-caused-mass-internet-cell-service-outages-in-northern-b-c-1.5944697', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-06-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_715067,2009-07-20T20:08:17Z,Building an Email Service in the Cloud\n\n\n\nURL: http://www.slideshare.net/Eweaver/bluerunner-building-an-email-service-in-the-cloud,8de595265995904c,https://news.ycombinator.com/item?id=715067,"{'story_id': '715067', 'points': 3, 'num_comments': 1, 'external_url': 'http://www.slideshare.net/Eweaver/bluerunner-building-an-email-service-in-the-cloud', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2009-07-20. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_715240,2009-07-20T18:22:24,Is there a PDF/PPT link anywhere? I am not in the mood to put up with a flash nightmare.,3fbc6df009c56e1b,https://news.ycombinator.com/item?id=715240,"{'comment_id': 715240, 'story_id': '715067', 'parent': 715067}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2009-07-20. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_30710481,2022-03-17T12:39:50Z,"Launch HN: Plural – Multi-Cloud OSS Application Deployments on Kubernetes\n\nHi HN!<p>Sam and Michael here. We are building an open-source management platform that deploys and operates any open source infra software on kubernetes in a production-ready way: https:&#x2F;&#x2F;www.plural.sh<p>I’ve been in open source for over a decade. I spent 4 years at Red Hat before spending the next 6 years building products at MongoDB. Most recently I was the Head of Product at Unqork where we saw how difficult it was to create a deployment for our app stack and its related services.<p>Michael has spent his career at Vine, Amazon, Frame.io and Facebook where he has built and scaled systems using open source solutions for millions of users.<p>We met each other in early 2021 and got excited to tackle this problem together: making multi-cloud open source infrastructure zero effort to install and manage.<p>We’ve interviewed over 60 development and devops teams and learned that existing solutions always fell short. Either they were too complex to build or too costly to manage. In particular we heard many times that data infrastructure was a complete bear to stand up and integrate. We wanted to build a platform that would supercharge devops team’s capabilities and we wanted to give users the ability to do this all in their own cloud: aws, azure, gcp or bare metal.<p>It was important for us to work with the open source vendors. By making it trivial for users to get going with open source software, we can bring great solutions directly from vendors to the platform, and most importantly, compensate the vendors for their work.<p>Here’s a short demo video if you want to check out how it works when installing something operationally complex like Airflow:
https:&#x2F;&#x2F;www.plural.sh&#x2F;video-plural-product-demo<p>Plural can run on AWS, Azure, GCP and in alpha on Equinix (bare) metal, deploying applications in Kubernetes, with logging and monitoring (prometheus&#x2F;grafana) enabled out of the box. We have built full dashboarding and run books for managing and scaling your cluster and a simple install interface for quickly getting going with apps like Airflow, Kubeflow, Airbyte etc.<p>Today our catalog has over 30 apps ready to solve the most interesting use cases from AI&#x2F;ML &amp; data infrastructure to observability to caching. We hope our community will help us add more solutions to our catalog and we will focus on building our open source product. We will eventually create a paid edition (open core model) with enterprise-level features to address the needs of our most demanding users.<p>Try it out: https:&#x2F;&#x2F;github.com&#x2F;pluralsh&#x2F;plural &amp; app.plural.sh&#x2F; and let us know what you think!",5430a626195572cc,https://news.ycombinator.com/item?id=30710481,"{'story_id': '30710481', 'points': 23, 'num_comments': 7, 'external_url': '', 'language': 'en'}",pre_launch,acknowledged_not_fixed,unclear,Temporal: pre_launch based on 2022-03-17. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_30720069,2022-03-18T06:22:33,"Also, have you considered embedding open source OpenZiti? It would put a zero trust dataplane into the platform so that applications could be deployed anywhere and only require outbound internet. No DNS, no VPNs, no complex FWs or rule, no network engineering skills needed. <a href=""https:&#x2F;&#x2F;openziti.github.io&#x2F;ziti&#x2F;overview.html"" rel=""nofollow"">https:&#x2F;&#x2F;openziti.github.io&#x2F;ziti&#x2F;overview.html</a><p>The team have already &#x27;zitified&#x27; Kubectl, Helm, Prometheus, SSH and more.",6c6c5de6b78f2d3c,https://news.ycombinator.com/item?id=30720069,"{'comment_id': 30720069, 'story_id': '30710481', 'parent': 30710481}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-03-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_30720058,2022-03-18T06:20:05,Very cool. Multi-cloud should be super easy so that we can choose where to put workloads. Have you considered polling the cloud provider APIs to make hosting decisions based on spot pricing etc??,6c6c5de6b78f2d3c,https://news.ycombinator.com/item?id=30720058,"{'comment_id': 30720058, 'story_id': '30710481', 'parent': 30710481}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-03-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_30710556,2022-03-17T09:48:23,Very cool,6d476e2a2307a56c,https://news.ycombinator.com/item?id=30710556,"{'comment_id': 30710556, 'story_id': '30710481', 'parent': 30710481}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-03-17. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_5862748,2013-06-11T16:18:53Z,"Discover, track and get badgered about cool projects or products - 'Hype Badger'\n\nThis is the first public showing of my MVP, so its obviously not completely polished. I have been busy over the last couple of months beavering away to get this from concept to creation, and so far I am fairly pleased with the core workings of it.<p>As an avid web developer &#x2F; geek &#x2F; gamer &#x2F; tech lover I find myself constantly finding projects or products I am interested in and want to follow. Some have social profiles, websites and blogs, but for the majority these are often left untapped in letting the public know about what they are working on. It becomes difficult and time consuming to follow so many different things manually, especially with the likes of kickstarter, indie developers, fast moving technology, and the current trend of innovation announcing awesome new things at a lightning pace.<p>Eventually these things get forgotten or fall into a mass of other saved links and rarely if ever get found again. I therefore tasked myself with creating a web service that would track those projects and then remind myself &#x2F; the user about them at the appropriate times.<p>Thus, Hype Badger (http:&#x2F;&#x2F;www.hypebadger.com) was born<p>Initially I am looking for some feedback from the community, so ideally if you could let me know:
- what you think of the concept of the site &#x2F; service
- what you like best
- what you like least
- what you think its missing
- if its a service you would &#x2F; could use<p>TL;DR - A webapp &#x2F; service that allows you to share, track, and discover upcoming projects, eg games, movies, tech, books, events, etc - http:&#x2F;&#x2F;www.hypebadger.com - Please give me precious feedback :)",d4a8853b08d0195c,https://news.ycombinator.com/item?id=5862748,"{'story_id': '5862748', 'points': 1, 'num_comments': 0, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2013-06-11. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_34986267,2023-03-01T18:25:34Z,Service Weaver: A Framework for Writing Distributed Applications\n\n\n\nURL: https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html,1d713d48aab58250,https://news.ycombinator.com/item?id=34986267,"{'story_id': '34986267', 'points': 117, 'num_comments': 39, 'external_url': 'https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html', 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34989457,2023-03-01T19:51:55,"&gt; microservices severely impacted our ability to make cross-binary changes. It made us do things like flag-gate new features in each binary, evolve our data formats carefully, and maintain intimate knowledge of our rollout processes. Finally, having a predetermined number of specific microservices effectively froze our APIs; they became so difficult to change that it was easier to squeeze all of our changes into the existing APIs rather than evolve them.<p>I&#x27;m amused by how the rise of microservices was in part due to the promise of solving some of these problems as they arose in the classic monolith. Independent teams, decoupled deploys, etc.<p>Putting a network request between components doesn&#x27;t decouple them, it just trades one kind of coupling for another. Even worse, some previously explicit coupling becomes hidden, but remains present.",b4b553d9c2a5c158,https://news.ycombinator.com/item?id=34989457,"{'comment_id': 34989457, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34989792,2023-03-01T20:23:24,"OK.<p>We&#x27;ve been here before, the &quot;transparent RPCs&quot; path.<p>SunRPC, Mach Messages and MiG, various even more transparent distributed object systems etc. etc. etc.<p>So it would be <i>awesome</i> to have some reference to these earlier systems and how this project overcomes the problems they encountered.  I checked the FAQ ( <a href=""https:&#x2F;&#x2F;serviceweaver.dev&#x2F;docs.html#faq"" rel=""nofollow"">https:&#x2F;&#x2F;serviceweaver.dev&#x2F;docs.html#faq</a> ) and didn&#x27;t find anything.<p>Or a brief explanation why this is so incredibly different that those issues don&#x27;t apply.  Or a brief explanation that those issues weren&#x27;t problems and everything is just dandy.  Or even we didn&#x27;t consider those systems at all.<p>Just <i>something</i>.<p>Cheers!",b372dec31b8a4024,https://news.ycombinator.com/item?id=34989792,"{'comment_id': 34989792, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35027996,2023-03-05T05:55:59,"&quot;Transparent Networking&quot; achieved. To reach the next level you should unlock an &quot;Actor Model&quot; :)<p>PS for me, it&#x27;s more like reinventing Erlang ideas in Golang. If you want to cut the corner here is the ready-to-use Framework in Golang <a href=""https:&#x2F;&#x2F;github.com&#x2F;ergo-services&#x2F;ergo"">https:&#x2F;&#x2F;github.com&#x2F;ergo-services&#x2F;ergo</a> - implements all Erlang&#x27; neats.",e7b315ef1d70e4cd,https://news.ycombinator.com/item?id=35027996,"{'comment_id': 35027996, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-05. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34989134,2023-03-01T19:18:53,I always dreamed of something like this where functions could be called as normal but they could be an RPC behind the scenes. The compiler would take care of serialization&#x2F;deserialization and routing.<p>But how is it possible to not worry about network. Every function is now able to fail. Why don&#x27;t you need to handle this explicitly? Or is there just a default behaviour that can be overriden?<p>Edit: after reading the docs I think I understand a bit more. You&#x27;ll have have to deal with network errors on anything crossing module boundaries.,9f6e5180b3cb46c5,https://news.ycombinator.com/item?id=34989134,"{'comment_id': 34989134, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34990261,2023-03-01T21:18:02,"There has never been any issues with hiding distributed RPC calls.<p><a href=""https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fallacies_of_distributed_computing"" rel=""nofollow"">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fallacies_of_distributed_compu...</a>",032376bbd4e030e7,https://news.ycombinator.com/item?id=34990261,"{'comment_id': 34990261, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34989373,2023-03-01T19:42:47,"This reminds me of &quot;Distributed Applications&quot; in Erlang (<a href=""https:&#x2F;&#x2F;www.erlang.org&#x2F;doc&#x2F;design_principles&#x2F;distributed_applications.html"" rel=""nofollow"">https:&#x2F;&#x2F;www.erlang.org&#x2F;doc&#x2F;design_principles&#x2F;distributed_app...</a>).",4701949f0dcc5e8b,https://news.ycombinator.com/item?id=34989373,"{'comment_id': 34989373, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34990112,2023-03-01T20:58:54,"This is... EJBs. It is probably less painful to use, but the model is pretty much the same. Fascinating.",94ccee6c9be66c2d,https://news.ycombinator.com/item?id=34990112,"{'comment_id': 34990112, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34993517,2023-03-02T05:49:10,"Using the term microservices here is confusing. The main point of microservices as an architectural pattern is decoupling release cadence between teams in very large organizations.
The scaling&#x2F;redundancy part is not unique to microservices. 
What this framework seem to be doing is allowing a team to deploy a system developed as a single binary monolith as a distributed system.<p>The organizational use case is orthogonal to what microservices were all about.<p>Granted, microservices have been cargoculted like crazy, so this distinction is probably lost on a lot of engs. But for those of us that remember the original meaning, mentioning microservices in the description of this framework, is odd.",9940cbfb6299ef8a,https://news.ycombinator.com/item?id=34993517,"{'comment_id': 34993517, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-02. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34990528,2023-03-01T21:53:11,"Super cool. If I understand correctly:<p>- There&#x27;s no IDL file, like a .proto file. Instead, weaver looks for marker interfaces by embedding weaver.Implements[T].<p>- Weaver interfaces must be serializable, which explicitly support protobufs. Was the intent to be able to port gRPC services to weaver?<p>- Weaver maintains a list of deployments, and each deployment has components. Components may only communicate with components belonging to the same deployment. Sounds like a way to implement atomic deploys.<p>- Named listeners are mapping over a net.Listener?<p>Sidenote: I&#x27;m going to steal the metrics implementation. I haven&#x27;t found a lightweight metrics implementation for GCP.",9fcd11f7f2fdb5eb,https://news.ycombinator.com/item?id=34990528,"{'comment_id': 34990528, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35025747,2023-03-04T21:00:00,"One of the reasons I break code down into smaller pieces ( microservice ) is to have fast edit and compile times.<p>The versioning hell is why so many went to mono repos. There is only one git version and that’s it.<p>Also what about runtime version difference and schema evolution?<p>So many thing come into play.<p>I would rather just buy the bullet and use protobufs with NATS from day one . No load balances and heavy expensive gke &#x2F; k8 stuff<p>Then deploy of fly where I have regions with auto scaling based on metric feedback loops.<p>Then use nats client on all client to get geo physical load balancing out to the nearest region.<p>Then use their postresql multi Region. Cockroach multi Region replication costs big money.<p>I did like their tooling in Weaver though. Even the converged logging was pretty nice.<p><a href=""https:&#x2F;&#x2F;github.com&#x2F;ServiceWeaver&#x2F;weaver&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;logging&#x2F;files.go"">https:&#x2F;&#x2F;github.com&#x2F;ServiceWeaver&#x2F;weaver&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;lo...</a>",514d67ad7dd1897e,https://news.ycombinator.com/item?id=35025747,"{'comment_id': 35025747, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-04. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_37338545,2023-08-31T15:18:08Z,Go ServiceWeaver: Towards Modern Development of Cloud Applications [video]\n\n\n\nURL: https://www.youtube.com/watch?v=Q90osDkqZt0,3840df748c7f206c,https://news.ycombinator.com/item?id=37338545,"{'story_id': '37338545', 'points': 3, 'num_comments': 0, 'external_url': 'https://www.youtube.com/watch?v=Q90osDkqZt0', 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-08-31. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35460079,2023-04-05T20:40:22Z,How to Implement a Service Weaver Deployer\n\n\n\nURL: https://serviceweaver.dev/blog/deployers.html,e8257755d56877f3,https://news.ycombinator.com/item?id=35460079,"{'story_id': '35460079', 'points': 3, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/blog/deployers.html', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-04-05. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_34986317,2023-03-01T18:28:05Z,Service Weaver: A Framework for Writing Distributed Applications\n\n\n\nURL: https://serviceweaver.dev/,32ae543b776e9f94,https://news.ycombinator.com/item?id=34986317,"{'story_id': '34986317', 'points': 3, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35917493,2023-05-12T15:21:21Z,Digging into Service Weaver: Dependency Injection\n\n\n\nURL: https://preslav.me/2023/05/12/golang-dependency-injection-in-google-service-weaver/,2cc2882979e7540f,https://news.ycombinator.com/item?id=35917493,"{'story_id': '35917493', 'points': 2, 'num_comments': 0, 'external_url': 'https://preslav.me/2023/05/12/golang-dependency-injection-in-google-service-weaver/', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-05-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35057110,2023-03-07T16:18:08Z,Service Weaver is a programming framework for writing and deploying cloud apps\n\n\n\nURL: https://serviceweaver.dev/,e1de54c009201a81,https://news.ycombinator.com/item?id=35057110,"{'story_id': '35057110', 'points': 2, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-07. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35015531,2023-03-03T21:51:04Z,Calm down about Service Weaver\n\n\n\nURL: https://newsletter.goodtechthings.com/p/calm-down-about-service-weaver,79723b8a52a92f23,https://news.ycombinator.com/item?id=35015531,"{'story_id': '35015531', 'points': 2, 'num_comments': 0, 'external_url': 'https://newsletter.goodtechthings.com/p/calm-down-about-service-weaver', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_41122468,2024-07-31T19:19:51Z,Calm down about Service Weaver\n\n\n\nURL: https://newsletter.goodtechthings.com/p/calm-down-about-service-weaver,706e080092e75b0d,https://news.ycombinator.com/item?id=41122468,"{'story_id': '41122468', 'points': 1, 'num_comments': 0, 'external_url': 'https://newsletter.goodtechthings.com/p/calm-down-about-service-weaver', 'language': 'en'}",decline,unknown,unclear,Temporal: decline based on 2024-07-31. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_38988781,2024-01-14T09:12:25Z,Service Weaver: a framework for writing and deploying cloud applications\n\n\n\nURL: https://serviceweaver.dev/,b1400cb8d091f689,https://news.ycombinator.com/item?id=38988781,"{'story_id': '38988781', 'points': 1, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/', 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2024-01-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35620151,2023-04-18T21:05:18Z,CORBA vs. the Fallacies of Distributed Computing\n\n\n\nURL: https://serviceweaver.dev/blog/corba.html,e8257755d56877f3,https://news.ycombinator.com/item?id=35620151,"{'story_id': '35620151', 'points': 4, 'num_comments': 5, 'external_url': 'https://serviceweaver.dev/blog/corba.html', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-04-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35622216,2023-04-18T20:54:43,"I liked CORBA, mainly the IDL and IIOP (I didn&#x27;t use many of the parts that other people hated).  It felt like a sequel to Sun RPC and it was easy to move to gRPC.  The main problem I had was the Any type wasn&#x27;t performant.<p>After working with remote call systems for a while I concluded there should only be two RPCs:<p>GetMessage() (which polls for incoming messages) and PutMessage() (which sends a message).  All the method information goes in the payload. There are no verbs or headers (HTTP). There is no relationship between the message and some resource system (REST).   The name &quot;message&quot; is an indicator that a message is being passed, rather than a remote call with function-call-like semantics (similar to MPI).",0f8f92d611d61c44,https://news.ycombinator.com/item?id=35622216,"{'comment_id': 35622216, 'story_id': '35620151', 'parent': 35620151}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-04-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35620622,2023-04-18T18:37:25,"I&#x27;ve done shit all to follow up but Corba retains a huge special place in my mind as the excuse everyone uses for giving up. It&#x27;s the albatross around trying for beat distributed systems neck.<p>This post is just a mild opening, a brief start, in the Speaking for the Dead of CORBA. It&#x27;s still vastly more useful context on a deep issue than we&#x27;ve seen in well over a decade, probably.",f802668b0ee21ef7,https://news.ycombinator.com/item?id=35620622,"{'comment_id': 35620622, 'story_id': '35620151', 'parent': 35620151}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-04-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35620801,2023-04-18T18:49:39,"CORBA did not fail. I don&#x27;t know what the author is trying to push. We used CORBA extensively in its day, nowadays there are better alternatives but to say it failed is completely wrong",4d266723cfb15091,https://news.ycombinator.com/item?id=35620801,"{'comment_id': 35620801, 'story_id': '35620151', 'parent': 35620151}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-04-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35064345,2023-03-08T02:14:09Z,Programming framework for writing and deploying cloud applications\n\n\n\nURL: https://github.com/ServiceWeaver/weaver,20e6896ed772f94f,https://news.ycombinator.com/item?id=35064345,"{'story_id': '35064345', 'points': 3, 'num_comments': 1, 'external_url': 'https://github.com/ServiceWeaver/weaver', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35064362,2023-03-07T23:16:50,"Hi all, thank you for making this dream framework come true. I have been looking forward to this kind of tool in Go for a long time.<p>But sadly I noticed that, in the Serializable Types section of FAQ, chan t type is not supported.<p>I am wondering if there are any current plans or ongoing discussions around supporting it. As it is something that I need, I would be also interested in getting involved and contributing to its development.",567446b99757372f,https://news.ycombinator.com/item?id=35064362,"{'comment_id': 35064362, 'story_id': '35064345', 'parent': 35064345}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-07. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35008048,2023-03-03T10:57:37Z,Programming framework for writing and deploying cloud applications from Google\n\n\n\nURL: https://serviceweaver.dev/,6f3d0593e2fc7340,https://news.ycombinator.com/item?id=35008048,"{'story_id': '35008048', 'points': 2, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_37070067,2023-08-10T00:03:27Z,Using Advanced Go Features to Detect Stale Code\n\n\n\nURL: https://serviceweaver.dev/blog/weaver_generate.html,e8257755d56877f3,https://news.ycombinator.com/item?id=37070067,"{'story_id': '37070067', 'points': 1, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/blog/weaver_generate.html', 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-08-10. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_36958244,2023-08-01T16:27:02Z,Strongly Typed Metric Labels Using Generics in Go\n\n\n\nURL: https://serviceweaver.dev/blog/metric_labels.html,e8257755d56877f3,https://news.ycombinator.com/item?id=36958244,"{'story_id': '36958244', 'points': 1, 'num_comments': 0, 'external_url': 'https://serviceweaver.dev/blog/metric_labels.html', 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-08-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35917493,2023-05-12T15:21:21Z,Digging into Service Weaver: Dependency Injection\n\n\n\nURL: https://preslav.me/2023/05/12/golang-dependency-injection-in-google-service-weaver/,2cc2882979e7540f,https://news.ycombinator.com/item?id=35917493,"{'story_id': '35917493', 'points': 2, 'num_comments': 0, 'external_url': 'https://preslav.me/2023/05/12/golang-dependency-injection-in-google-service-weaver/', 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-05-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_881941,2009-10-14T19:14:39Z,Thread-Weaver : multi-threaded unit tests in Java\n\n\n\nURL: http://code.google.com/p/thread-weaver/,89aeb835572e6f4e,https://news.ycombinator.com/item?id=881941,"{'story_id': '881941', 'points': 1, 'num_comments': 0, 'external_url': 'http://code.google.com/p/thread-weaver/', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2009-10-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_34986267,2023-03-01T18:25:34Z,Service Weaver: A Framework for Writing Distributed Applications\n\n\n\nURL: https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html,1d713d48aab58250,https://news.ycombinator.com/item?id=34986267,"{'story_id': '34986267', 'points': 117, 'num_comments': 39, 'external_url': 'https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html', 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34989457,2023-03-01T19:51:55,"&gt; microservices severely impacted our ability to make cross-binary changes. It made us do things like flag-gate new features in each binary, evolve our data formats carefully, and maintain intimate knowledge of our rollout processes. Finally, having a predetermined number of specific microservices effectively froze our APIs; they became so difficult to change that it was easier to squeeze all of our changes into the existing APIs rather than evolve them.<p>I&#x27;m amused by how the rise of microservices was in part due to the promise of solving some of these problems as they arose in the classic monolith. Independent teams, decoupled deploys, etc.<p>Putting a network request between components doesn&#x27;t decouple them, it just trades one kind of coupling for another. Even worse, some previously explicit coupling becomes hidden, but remains present.",b4b553d9c2a5c158,https://news.ycombinator.com/item?id=34989457,"{'comment_id': 34989457, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34989792,2023-03-01T20:23:24,"OK.<p>We&#x27;ve been here before, the &quot;transparent RPCs&quot; path.<p>SunRPC, Mach Messages and MiG, various even more transparent distributed object systems etc. etc. etc.<p>So it would be <i>awesome</i> to have some reference to these earlier systems and how this project overcomes the problems they encountered.  I checked the FAQ ( <a href=""https:&#x2F;&#x2F;serviceweaver.dev&#x2F;docs.html#faq"" rel=""nofollow"">https:&#x2F;&#x2F;serviceweaver.dev&#x2F;docs.html#faq</a> ) and didn&#x27;t find anything.<p>Or a brief explanation why this is so incredibly different that those issues don&#x27;t apply.  Or a brief explanation that those issues weren&#x27;t problems and everything is just dandy.  Or even we didn&#x27;t consider those systems at all.<p>Just <i>something</i>.<p>Cheers!",b372dec31b8a4024,https://news.ycombinator.com/item?id=34989792,"{'comment_id': 34989792, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35027996,2023-03-05T05:55:59,"&quot;Transparent Networking&quot; achieved. To reach the next level you should unlock an &quot;Actor Model&quot; :)<p>PS for me, it&#x27;s more like reinventing Erlang ideas in Golang. If you want to cut the corner here is the ready-to-use Framework in Golang <a href=""https:&#x2F;&#x2F;github.com&#x2F;ergo-services&#x2F;ergo"">https:&#x2F;&#x2F;github.com&#x2F;ergo-services&#x2F;ergo</a> - implements all Erlang&#x27; neats.",e7b315ef1d70e4cd,https://news.ycombinator.com/item?id=35027996,"{'comment_id': 35027996, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-05. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34989134,2023-03-01T19:18:53,I always dreamed of something like this where functions could be called as normal but they could be an RPC behind the scenes. The compiler would take care of serialization&#x2F;deserialization and routing.<p>But how is it possible to not worry about network. Every function is now able to fail. Why don&#x27;t you need to handle this explicitly? Or is there just a default behaviour that can be overriden?<p>Edit: after reading the docs I think I understand a bit more. You&#x27;ll have have to deal with network errors on anything crossing module boundaries.,9f6e5180b3cb46c5,https://news.ycombinator.com/item?id=34989134,"{'comment_id': 34989134, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34990261,2023-03-01T21:18:02,"There has never been any issues with hiding distributed RPC calls.<p><a href=""https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fallacies_of_distributed_computing"" rel=""nofollow"">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fallacies_of_distributed_compu...</a>",032376bbd4e030e7,https://news.ycombinator.com/item?id=34990261,"{'comment_id': 34990261, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34989373,2023-03-01T19:42:47,"This reminds me of &quot;Distributed Applications&quot; in Erlang (<a href=""https:&#x2F;&#x2F;www.erlang.org&#x2F;doc&#x2F;design_principles&#x2F;distributed_applications.html"" rel=""nofollow"">https:&#x2F;&#x2F;www.erlang.org&#x2F;doc&#x2F;design_principles&#x2F;distributed_app...</a>).",4701949f0dcc5e8b,https://news.ycombinator.com/item?id=34989373,"{'comment_id': 34989373, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34990112,2023-03-01T20:58:54,"This is... EJBs. It is probably less painful to use, but the model is pretty much the same. Fascinating.",94ccee6c9be66c2d,https://news.ycombinator.com/item?id=34990112,"{'comment_id': 34990112, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34993517,2023-03-02T05:49:10,"Using the term microservices here is confusing. The main point of microservices as an architectural pattern is decoupling release cadence between teams in very large organizations.
The scaling&#x2F;redundancy part is not unique to microservices. 
What this framework seem to be doing is allowing a team to deploy a system developed as a single binary monolith as a distributed system.<p>The organizational use case is orthogonal to what microservices were all about.<p>Granted, microservices have been cargoculted like crazy, so this distinction is probably lost on a lot of engs. But for those of us that remember the original meaning, mentioning microservices in the description of this framework, is odd.",9940cbfb6299ef8a,https://news.ycombinator.com/item?id=34993517,"{'comment_id': 34993517, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-02. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34990528,2023-03-01T21:53:11,"Super cool. If I understand correctly:<p>- There&#x27;s no IDL file, like a .proto file. Instead, weaver looks for marker interfaces by embedding weaver.Implements[T].<p>- Weaver interfaces must be serializable, which explicitly support protobufs. Was the intent to be able to port gRPC services to weaver?<p>- Weaver maintains a list of deployments, and each deployment has components. Components may only communicate with components belonging to the same deployment. Sounds like a way to implement atomic deploys.<p>- Named listeners are mapping over a net.Listener?<p>Sidenote: I&#x27;m going to steal the metrics implementation. I haven&#x27;t found a lightweight metrics implementation for GCP.",9fcd11f7f2fdb5eb,https://news.ycombinator.com/item?id=34990528,"{'comment_id': 34990528, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35025747,2023-03-04T21:00:00,"One of the reasons I break code down into smaller pieces ( microservice ) is to have fast edit and compile times.<p>The versioning hell is why so many went to mono repos. There is only one git version and that’s it.<p>Also what about runtime version difference and schema evolution?<p>So many thing come into play.<p>I would rather just buy the bullet and use protobufs with NATS from day one . No load balances and heavy expensive gke &#x2F; k8 stuff<p>Then deploy of fly where I have regions with auto scaling based on metric feedback loops.<p>Then use nats client on all client to get geo physical load balancing out to the nearest region.<p>Then use their postresql multi Region. Cockroach multi Region replication costs big money.<p>I did like their tooling in Weaver though. Even the converged logging was pretty nice.<p><a href=""https:&#x2F;&#x2F;github.com&#x2F;ServiceWeaver&#x2F;weaver&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;logging&#x2F;files.go"">https:&#x2F;&#x2F;github.com&#x2F;ServiceWeaver&#x2F;weaver&#x2F;blob&#x2F;main&#x2F;runtime&#x2F;lo...</a>",514d67ad7dd1897e,https://news.ycombinator.com/item?id=35025747,"{'comment_id': 35025747, 'story_id': '34986267', 'parent': 34986267}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-04. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_880366,2009-10-13T23:55:22Z,Thread Weaver: Testing Race Conditions in Java\n\n\n\nURL: http://google-opensource.blogspot.com/2009/10/testing-race-conditions-in-java.html,cca83218fa49aa38,https://news.ycombinator.com/item?id=880366,"{'story_id': '880366', 'points': 2, 'num_comments': 0, 'external_url': 'http://google-opensource.blogspot.com/2009/10/testing-race-conditions-in-java.html', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2009-10-13. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_6732383,2013-11-14T14:19:23Z,Master statistician weaves Google images into visual quilts\n\n\n\nURL: http://www.theverge.com/2013/11/14/5103104/make-your-own-collages-straight-from-google-search,b2d35f502a7be9dd,https://news.ycombinator.com/item?id=6732383,"{'story_id': '6732383', 'points': 1, 'num_comments': 1, 'external_url': 'http://www.theverge.com/2013/11/14/5103104/make-your-own-collages-straight-from-google-search', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2013-11-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_6732581,2013-11-14T11:51:25,This is an interesting proof of concept of Tufte&#x27;s ideas around dense imagery and visualization. Beyond that I&#x27;m kinda underwhelmed.,564b9dadc6817447,https://news.ycombinator.com/item?id=6732581,"{'comment_id': 6732581, 'story_id': '6732383', 'parent': 6732383}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2013-11-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_11721321,2016-05-18T12:11:49Z,"Having fun attempting to predict announcement at Google I/O 2016\n\nHere are the Google I&#x2F;O predictions for 2016.   These are just predictions and, we&#x27;ll have fun guessing.<p>- Google Weave will be publicly available as part of the Google Cloud Platform to connect and control internet of things.
- Google Project Brillo will be announced exiting beta stage for embedding an Android O&#x2F;S into your embedded device.
- Project Brillo will support range of embedded devices, Intel&#x27;s IoT microcontroller family (ie:  Intel Edison).
- Google Project Tango will further enable development content creation of VR &#x2F; 3D spaces.
- Live 360 video content creation.
- Google services for businesses and other productivity tools.
- Self driving cars and drones demonstrate the future of automation.
- More on Android Pay and NFC &#x2F; Bluetooth enabled payments.
- Additional AI, Machine Learning services for Google Cloud Platform with particular concentration on NLP and chat bot systems.
- Android N, or new Android Platform.
- More on Google Spaces.<p>The goodies and swag!  What do we expect Google I&#x2F;O attendees will receive this year?  Google Nexus phones enabled for Google Fi network and&#x2F;or Project Tango dev kit.   Well thats a wrap.<p>We expect that users will have a lot of open space particularly to see self driving cars and drones in action, possibly with the aid of VR and VR headsets.<p>Let&#x27;s see how well the predictions goes.<p>This is an article from the following post: https:&#x2F;&#x2F;blog.followiot.com&#x2F;2016&#x2F;05&#x2F;18&#x2F;googleio-2016-predictions-followiot&#x2F;",857e4cb3e7cbefaa,https://news.ycombinator.com/item?id=11721321,"{'story_id': '11721321', 'points': 1, 'num_comments': 0, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-05-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_9619648,2015-05-28T17:23:56Z,Google announced Weave for smart home developers\n\n\n\nURL: http://mindconcepts.net/blog/2015/05/28/google-announced-weave-for-smart-home/,19c1d2d9e7d14f6c,https://news.ycombinator.com/item?id=9619648,"{'story_id': '9619648', 'points': 8, 'num_comments': 0, 'external_url': 'http://mindconcepts.net/blog/2015/05/28/google-announced-weave-for-smart-home/', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2015-05-28. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_7322294,2014-02-28T23:40:46Z,"Google Glass wearer ejected, robbed, seeks out media for attention\n\n\n\nURL: http://www.technologytell.com/gadgets/139970/google-glass-wearer-ejected-robbed-seeks-out-media-for-attention/",82b02ea59f68f291,https://news.ycombinator.com/item?id=7322294,"{'story_id': '7322294', 'points': 1, 'num_comments': 0, 'external_url': 'http://www.technologytell.com/gadgets/139970/google-glass-wearer-ejected-robbed-seeks-out-media-for-attention/', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-02-28. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_12615361,2016-09-30T21:24:40Z,Ask HN: Has anyone been using Google Brillo/Weave?\n\nHow has it been so far?<p>The company I work for has been trying to get an invite to use it but there doesn&#x27;t seem to be any channel to inquire about the status.,5fb22c9da7ef261b,https://news.ycombinator.com/item?id=12615361,"{'story_id': '12615361', 'points': 1, 'num_comments': 0, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-09-30. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_9622000,2015-05-29T00:14:06Z,Google is trying to solve the smart home's biggest problem\n\n\n\nURL: http://www.theverge.com/2015/5/28/8683147/google-brillo-weave-internet-of-things-solution,c11579ab253e441d,https://news.ycombinator.com/item?id=9622000,"{'story_id': '9622000', 'points': 2, 'num_comments': 0, 'external_url': 'http://www.theverge.com/2015/5/28/8683147/google-brillo-weave-internet-of-things-solution', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2015-05-29. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_7131734,2014-01-27T17:39:39Z,Terry laws & Homeland Security: Copped for Wearing Google Glass at the Movies \n\n\n\nURL: http://vdare.com/articles/ice-targets-google-glass-wearer-on-behalf-of-mpaa-ignores-illegals-on-behalf-of-obama-regim,da131e0540ab9ffa,https://news.ycombinator.com/item?id=7131734,"{'story_id': '7131734', 'points': 1, 'num_comments': 0, 'external_url': 'http://vdare.com/articles/ice-targets-google-glass-wearer-on-behalf-of-mpaa-ignores-illegals-on-behalf-of-obama-regim', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-01-27. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_7864726,2014-06-08T14:24:26Z,Why Canada’s banks have weaker passwords than Twitter or Google\n\n\n\nURL: http://theglobeandmail.com/technology/digital-culture/why-canadas-banks-have-weaker-passwords-than-twitter-or-google/article18325257/,f1bf75229a8ed963,https://news.ycombinator.com/item?id=7864726,"{'story_id': '7864726', 'points': 58, 'num_comments': 64, 'external_url': 'http://theglobeandmail.com/technology/digital-culture/why-canadas-banks-have-weaker-passwords-than-twitter-or-google/article18325257/', 'language': 'en'}",pre_launch,acknowledged_not_fixed,unclear,Temporal: pre_launch based on 2014-06-08. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_7865017,2014-06-08T13:11:42,"Their line of &quot;it&#x27;s for user experience&quot; doesn&#x27;t make sense. There&#x27;s nothing stopping them from saying they require a 6 character password, but also allowing much longer, with symbols or other &#x27;forbidden&#x27; characters.<p>More worrisome to me is the bank with case-insensitive passwords. I&#x27;d like to think they are just .lower()ing the password before proper hashing, but I&#x27;d wager they are storing it in clear text (and possibly showing it to bank support agents).",f9cecfc2735c481b,https://news.ycombinator.com/item?id=7865017,"{'comment_id': 7865017, 'story_id': '7864726', 'parent': 7864726}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-06-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_7865474,2014-06-08T15:50:45,"<i>Toronto-Dominion Bank allows case sensitive 8-32 character passwords with special characters.</i><p>Unless TD recently changed their requirements, this is not true. TD Easyweb (lol) stores a password of 5 to 8 characters.<p>What&#x27;s worse is that while TD does allow you to enter passwords greater than 8 characters long and will let you happily believe that it stored the password you entered, it actually only stores the first 8 characters and validates against those. That is to say if when you created your account you entered a password of &quot;Aardvark123zxcv&quot;, Easyweb will not mention anything about your password being too long, but your actual password is truncated to &quot;Aardvark&quot;. When you log in, Easyweb will accept &quot;Aardvark&lt;anything else&gt;&quot; as a valid password [0].<p>It took me a year before I accidentally discovered that my 15 characters password was actually being truncated to 8 and I didn&#x27;t need to type in those last 7 characters as all. There was absolutely no indication from the UI that the extra characters were unnecesary.<p>[0] <a href=""http://forums.redflagdeals.com/td-online-banking-should-i-worry-1165939/"" rel=""nofollow"">http:&#x2F;&#x2F;forums.redflagdeals.com&#x2F;td-online-banking-should-i-wo...</a>",fae47a2897d0e927,https://news.ycombinator.com/item?id=7865474,"{'comment_id': 7865474, 'story_id': '7864726', 'parent': 7864726}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-06-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_7865172,2014-06-08T14:04:27,"Bank security for online banking is in a sad state, but (kind of like credit cards) they have ENOUGH protocols in place to stop virtually all fraud. They do this by being ultra aggressive though - they just CLOSE bank accounts that have weird activity. You probably don&#x27;t know this, but if you travel to India for example and try to log into your online banking, banks outside the top 4 in the US may actually close your account if you don&#x27;t respond when the fraud team calls you. Close as in, here&#x27;s a cashiers check, you need a new account.<p>That&#x27;s a UX problem that&#x27;s hidden from most of us, so to them it&#x27;s a win. To me, it&#x27;s a disaster. We spend a lot of time working to improve this experience, and hopefully the banks will start to change the way they think too. We&#x27;re seeing some movement from them.",7275ac6c254a0800,https://news.ycombinator.com/item?id=7865172,"{'comment_id': 7865172, 'story_id': '7864726', 'parent': 7864726}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-06-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_7865220,2014-06-08T14:17:16,"The funny thing about this issue is that while many banks have ridiculously bad authentication systems from a network security point of view, they generally seem to suffer almost no negative consequences from it, as far as people actually getting hacked and losing money. Perhaps it&#x27;s the level of secondary checks in their systems making it tough to actually monetize a hacked account without leading the law straight to your door.<p>Maybe there&#x27;s a lesson here - a broader approach to security, like implementing checks at every level of operation to make sure nothing bad happens even if an attacker is deep into the system, is better than a singular focus on password length and other login details.",9802fd2cad92f516,https://news.ycombinator.com/item?id=7865220,"{'comment_id': 7865220, 'story_id': '7864726', 'parent': 7864726}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-06-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_7864991,2014-06-08T13:00:10,"Both my Swedish banks require two-factor authentication - you get a physical PIN pad when you sign up, and you can also set up a 2-factor app on your phone. All transfer amounts and account numbers have to be signed on the PIN-pad, securing you from man in the middle attacks that are possible with one-time-codes. They both also have password-only login, but it&#x27;s read-only, you can&#x27;t do transfers.<p>I wonder what makes the banks in the two countries have such different views on security?",69fb0b20315930d1,https://news.ycombinator.com/item?id=7864991,"{'comment_id': 7864991, 'story_id': '7864726', 'parent': 7864726}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-06-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_7864947,2014-06-08T12:44:09,"Lax security by banks is certainly nothing new, nor unique to Canada. I&#x27;ve always wondered about sites that do not allow &quot;special&quot; characters. What could they possibly be doing to not allow that other than storing passwords in plain-text? After all, any secure crypto hash (and even regular hashing algorithms) will not care about special characters in the source content. I suppose it could be any number of components between the user and storage, yet I can&#x27;t think of any system off the top of my head that&#x27;s that shoddy.",1c59881070809bba,https://news.ycombinator.com/item?id=7864947,"{'comment_id': 7864947, 'story_id': '7864726', 'parent': 7864726}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-06-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_7865071,2014-06-08T13:31:13,"Based on the article&#x27;s description of password limits, normalizing maximum password strength into bits for easy comparison:<p>Toronto-Dominion Bank: 210 bits<p>Royal Bank of Canada: 195 bits<p>Bank of Nova Scotia: 83 bits<p>CIBC: 71 bits<p>Bank of Montreal: 36 bits<p>Tangerine: 20 bits",8ff05d4dbaf20820,https://news.ycombinator.com/item?id=7865071,"{'comment_id': 7865071, 'story_id': '7864726', 'parent': 7864726}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-06-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_7865885,2014-06-08T17:58:36,"One thing that tends to be more or less ignored: The defenses that banks deploy to protect themselves against the bad passwords that they force their customers to use are not intended to help the customer, very much the opposite, they are a vulnerability in themselves.<p>Specifically, the tendency to lock an account after a few wrong login attempts is effectively a DoS vulnerability for the customer, as it allows anyone who knows your username (which often even is just the account number, so essentially public information) to trivially prevent you from accessing&#x2F;using your money.<p>Their only focus is on preventing third parties from accessing my money, but my interest is not that third parties can not access my money, my interest is that I can access my money, which means both not having it taken by third parties, but also not having it taken temporarily by the bank who want to protect themselves (if the bank locks me out from my account, that&#x27;s functionally equivalent to them taking all my money out of my account for a day or two (or however long it takes to reactivate the login) - while I am locked out, I can pay just as much as when there is no money in the account).",ba96ad1bff3aa0b3,https://news.ycombinator.com/item?id=7865885,"{'comment_id': 7865885, 'story_id': '7864726', 'parent': 7864726}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-06-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_7865019,2014-06-08T13:13:12,"It&#x27;s ultimately a tradeoff, and for an organization like a bank it&#x27;s a really interesting one.<p>Every added security requirement limits the size of the customer base that&#x27;s going to use the online system.  For myself, a two-factor system with an app or SMS to provide the second factor would work fine, but for my parents it wouldn&#x27;t.  Every increase in security requirements has a tradeoff between customers that will use it and customers that will abandon online banking because it&#x27;s become &quot;too hard&quot;.<p>For the bank, when a customer abandons online banking, that means that there are longer lines at the branch, which means they need more people to provide the same level of service.<p>Note that I specifically said &quot;security requirement&quot;.  If two factor authentication was optional (not a requirement), then some accounts would be more secure than others.  This would potentially make the less secure accounts more of a target since attackers may avoid the more secure accounts.  There is also all of the development and testing and maintenance efforts required when you make different customers have different authentication methods.<p>The bank knows all of this and more.  They balance their risk (reimbursed customers due to poor security) against the costs (people abandoning online banking, people switching to an easier-to-use competitor, implementation costs, etc).",13d30bb2cd91e4e4,https://news.ycombinator.com/item?id=7865019,"{'comment_id': 7865019, 'story_id': '7864726', 'parent': 7864726}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-06-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_7865131,2014-06-08T13:49:50,"As far as I can tell, these limits apply to passwords, but not to security questions. Maybe we should just put passwords into the security answer field as well (since the bank will almost always ask for a security question&#x2F;answer if you&#x27;re logging in from a different computer than normal).",bb8a7cee611caf22,https://news.ycombinator.com/item?id=7865131,"{'comment_id': 7865131, 'story_id': '7864726', 'parent': 7864726}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2014-06-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_9528083,2015-05-11T21:50:30Z,Canadian banks commonly restrict passwords to 6 characters in length\n\nexample: http:&#x2F;&#x2F;imgur.com&#x2F;BiURTED\n\nURL: http://www.theglobeandmail.com/technology/digital-culture/why-canadas-banks-have-weaker-passwords-than-twitter-or-google/article18325257/,1484b98d273217ec,https://news.ycombinator.com/item?id=9528083,"{'story_id': '9528083', 'points': 1, 'num_comments': 0, 'external_url': 'http://www.theglobeandmail.com/technology/digital-culture/why-canadas-banks-have-weaker-passwords-than-twitter-or-google/article18325257/', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2015-05-11. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_29948107,2022-01-15T17:12:27Z,"Google, Amazon, Meta and Microsoft Weave a Fiber-Optic Web of Power\n\n\n\nURL: https://www.wsj.com/articles/google-amazon-meta-and-microsoft-weave-a-fiber-optic-web-of-power-11642222824",9adba291d7a44a1a,https://news.ycombinator.com/item?id=29948107,"{'story_id': '29948107', 'points': 47, 'num_comments': 22, 'external_url': 'https://www.wsj.com/articles/google-amazon-meta-and-microsoft-weave-a-fiber-optic-web-of-power-11642222824', 'language': 'en'}",pre_launch,acknowledged_not_fixed,unclear,Temporal: pre_launch based on 2022-01-15. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_29948325,2022-01-15T14:31:19,"<a href=""https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20220115105055&#x2F;https:&#x2F;&#x2F;www.wsj.com&#x2F;articles&#x2F;google-amazon-meta-and-microsoft-weave-a-fiber-optic-web-of-power-11642222824"" rel=""nofollow"">https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20220115105055&#x2F;https:&#x2F;&#x2F;www.wsj.c...</a>",3294cfd0339ffce0,https://news.ycombinator.com/item?id=29948325,"{'comment_id': 29948325, 'story_id': '29948107', 'parent': 29948107}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-01-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_29948607,2022-01-15T14:59:44,"With absolutely no partisan bias whatsoever, I submit that rational people should find the concentration of power worrisome.",a88c6c8527ebe223,https://news.ycombinator.com/item?id=29948607,"{'comment_id': 29948607, 'story_id': '29948107', 'parent': 29948107}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-01-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_29948460,2022-01-15T14:47:02,Google? Or Alphabet?<p>I don&#x27;t understand why Facebooks rebrand should be honored when we just ignore Googles.,b99991d5f818d304,https://news.ycombinator.com/item?id=29948460,"{'comment_id': 29948460, 'story_id': '29948107', 'parent': 29948107}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-01-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_29948857,2022-01-15T15:26:35,"Don&#x27;t forget Apple. Building a computer or a phone company today is basically impossible. We&#x27;re heading towards a state of extreme monopolies. There is no way to vertically integrate like Apple without having access to crazy amount of resources and time. If there is competition, Apple&#x27;s cash reserves will come to rescue and crush any competition.<p>I love Apple products but this is all so worrying.",41a1107440d704d1,https://news.ycombinator.com/item?id=29948857,"{'comment_id': 29948857, 'story_id': '29948107', 'parent': 29948107}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-01-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_29949829,2022-01-15T17:17:34,"It would be a lot more worrisome if they were actually owned and operated completely in a close system by the four and only rented out the bandwidth. But this is not the case here.<p>Yes, Google, Amazon, Facebook and Microsoft invest in international undersea cables. But those Cables are done by a Consortium of companies. Not just between the four listed but many Telecom companies in the regions.<p>Pacific Light Cable Network for example, connecting between Hong Kong, Taiwan, the Philippines and the US only cost $300M with 120Tbps according to the same WSJ. That is such a small amount of money by modern standard. Not to mention while the cost wont likely go down, the total bandwidth you get from deployment will continue to go up in the future. A 1 Pbps undersea connection isn&#x27;t too far fetch within 10 - 15 years time.",3c9ef2cc303fd492,https://news.ycombinator.com/item?id=29949829,"{'comment_id': 29949829, 'story_id': '29948107', 'parent': 29948107}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-01-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_29948561,2022-01-15T14:55:44,My 10 year old self couldn&#x27;t imagine having these massive artificial brains scattered throughout the world connected by high speed fiber network being a real thing.,809f0574bc4e4d47,https://news.ycombinator.com/item?id=29948561,"{'comment_id': 29948561, 'story_id': '29948107', 'parent': 29948107}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-01-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_29950198,2022-01-15T17:59:41,So Naval submarines patrolling waters protecting submarine cables is taxpayers funding tech giants and telcos private security!,b93608162dd0805a,https://news.ycombinator.com/item?id=29950198,"{'comment_id': 29950198, 'story_id': '29948107', 'parent': 29948107}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-01-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_29950197,2022-01-15T17:59:31,"I would very much like a fiber-optic web weaved my way, unfortunately most of us are stuck with asymmetric lines from Comcast and Spectrum.",ab5cdbcba4180c21,https://news.ycombinator.com/item?id=29950197,"{'comment_id': 29950197, 'story_id': '29948107', 'parent': 29948107}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-01-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_29952269,2022-01-15T22:09:59,Meanwhile the crypto bros use their acquired wealth to truly advance the world on the Ms Satoshi.,a6eafadf320e6d47,https://news.ycombinator.com/item?id=29952269,"{'comment_id': 29952269, 'story_id': '29948107', 'parent': 29948107}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-01-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_9621710,2015-05-28T22:57:45Z,Google Announces Project Brillo and Weave for IoT\n\n\n\nURL: http://www.anandtech.com/show/9294/google-announces-project-brillo-and-weave-for-iot,e0d274ce66e7f135,https://news.ycombinator.com/item?id=9621710,"{'story_id': '9621710', 'points': 2, 'num_comments': 0, 'external_url': 'http://www.anandtech.com/show/9294/google-announces-project-brillo-and-weave-for-iot', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2015-05-28. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_35960725,2023-05-16T12:12:11Z,Ask HN: Is Apple about to be left behind?\n\nWithin months (if not already) I think for most consumers Siri is going to feel like a third rate substandard AI assistant as google and Microsoft continue to weave their solutions into their product lines.<p>Is Apple about to be left behind?<p>Do they have a plan?,5c206c4d5ec1bb14,https://news.ycombinator.com/item?id=35960725,"{'story_id': '35960725', 'points': 3, 'num_comments': 9, 'external_url': '', 'language': 'en'}",early_adoption,acknowledged_not_fixed,unclear,Temporal: early_adoption based on 2023-05-16. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35960994,2023-05-16T09:36:11,"Is an AI assistant important for most people? I have used Siri maybe once or twice, and have disabled it on all my Apple devices since.",c2f22344d51847db,https://news.ycombinator.com/item?id=35960994,"{'comment_id': 35960994, 'story_id': '35960725', 'parent': 35960725}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-05-16. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35962256,2023-05-16T11:19:10,I think the release of the headset is going to be the most surreal moment.<p>It&#x27;s been in production for so long and its clear they felt it was just around the corner at least 5 WWDCs ago. But it&#x27;s also clear they were originally aiming for an unobtrusive glasses form factor for wearing all day and have at some point recently pivoted to more of a &quot;MacBook Pro of AR&quot; work focused but more powerful form factor. As the narrative changed from &quot;The Glasses&quot; to &quot;The Headset&quot; at some point.<p>Interesting to see how this will play out or if it&#x27;ll be another iPad or if it&#x27;ll be more like the Oculus Rift where everyone who bought one raved about it and they sold 7 figures of them but ultimately it petered out.,21a2301da052af6a,https://news.ycombinator.com/item?id=35962256,"{'comment_id': 35962256, 'story_id': '35960725', 'parent': 35960725}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-05-16. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35960795,2023-05-16T09:17:35,Do you think many Apple users will switch phones and tablets for ChatGPT and Bing? Switch to what? Do you think most Apple users even use Siri?,d0973a8e4dbb146d,https://news.ycombinator.com/item?id=35960795,"{'comment_id': 35960795, 'story_id': '35960725', 'parent': 35960725}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-05-16. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35960769,2023-05-16T09:15:52,Get somebody to release a better voice assistant in the app store?<p>It seems like more of a problem for the XR headset they are supposedly releasing in the fall because the whole point of that kind of thing is keeping your hands free.  It’s a risky problem for Apple to release for many reasons but people probably will call out the weakness in the voice assistant.,ac7e1285eb8a812b,https://news.ycombinator.com/item?id=35960769,"{'comment_id': 35960769, 'story_id': '35960725', 'parent': 35960725}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-05-16. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35960813,2023-05-16T09:19:54,"apple own your phone. they can decide to allow bard, bing, alexa to access you calendar or be able to automate things... or not.<p>that strategy already worked for search. they don&#x27;t have it, so they make others pay to be there, and it net them 1bi a year from google.<p>next i guess they will just get 1bi from whover for the privilege of serving all siri replies.<p>until people ditch iphones, or merely push back to owning the device, apple will win no matter what.",b0ebd32f3c4c4204,https://news.ycombinator.com/item?id=35960813,"{'comment_id': 35960813, 'story_id': '35960725', 'parent': 35960725}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-05-16. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35960775,2023-05-16T09:16:10,"No, 85% of revenue is hardware",bfa86a22be80cc46,https://news.ycombinator.com/item?id=35960775,"{'comment_id': 35960775, 'story_id': '35960725', 'parent': 35960725}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-05-16. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_35962421,2023-05-16T11:32:09,&gt; Is Apple about to be left behind?<p>No.<p>&gt; Do they have a plan?<p>Most certainly.,d920dcda6b830928,https://news.ycombinator.com/item?id=35962421,"{'comment_id': 35962421, 'story_id': '35960725', 'parent': 35960725}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-05-16. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_9625719,2015-05-29T16:54:00Z,Google ATAP’s Project Jacquard Wants to Weave Sensors into Your Clothes\n\n\n\nURL: http://techcrunch.com/2015/05/29/google-ataps-project-jacquard-wants-to-weave-sensors-into-your-clothes/?ncid=rss,e88a6b7b871d89ab,https://news.ycombinator.com/item?id=9625719,"{'story_id': '9625719', 'points': 2, 'num_comments': 0, 'external_url': 'http://techcrunch.com/2015/05/29/google-ataps-project-jacquard-wants-to-weave-sensors-into-your-clothes/?ncid=rss', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2015-05-29. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_798899,2009-09-01T20:48:30Z,Mozilla Weave main servers are down\n\n\n\nURL: http://groups.google.com/group/mozilla-labs-weave/browse_thread/thread/fb670ed0095e446f,8875640fc8a30e60,https://news.ycombinator.com/item?id=798899,"{'story_id': '798899', 'points': 1, 'num_comments': 0, 'external_url': 'http://groups.google.com/group/mozilla-labs-weave/browse_thread/thread/fb670ed0095e446f', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2009-09-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_16195678,2018-01-20T22:08:00Z,Ask HN: Can Google cloud spanner replace mainframes?\n\nI’ve been reading about Google Cloud Spanner recently — and it seems like a really unique and incredible product if it is capable as it sounds.<p>It has me thinking — is the most viable migration path away from mainframes yet?  From my understanding — one of the things that contribute to the difficulty of migrating away from mainframes is the change in the consistency model — going from mainframe to pretty much anything else seems to involve:<p>(1) unraveling all the consistency requirements between the different mechanisms which manipulate mainframe data with sufficient understanding to port this logic into storage systems with weaker consistency models — hard and risky<p>Or<p>(2) replicating the bottleneck in giant oracle instance or some other non-scaleable data store that provides the same standard of consistency model<p>Does google cloud spanner provide a viable 3rd alternative here?  I am curious if others think that cloud spanner could represent the most viable way to migrate away from mainframes in 2018.,1fdd18adb29ee51e,https://news.ycombinator.com/item?id=16195678,"{'story_id': '16195678', 'points': 6, 'num_comments': 3, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2018-01-20. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_16195774,2018-01-20T19:28:49,No not really it cant run Cobol  let alone Cobol that ran on systems before you where born.<p>Google doesn&#x27;t have to worry really about ACID  but payroll and Bank applications do.,2f9a75fb7c0d681c,https://news.ycombinator.com/item?id=16195774,"{'comment_id': 16195774, 'story_id': '16195678', 'parent': 16195678}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2018-01-20. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_16196651,2018-01-20T23:57:46,"<i>From my understanding — one of the things that contribute to the difficulty of migrating away from mainframes is the change in the consistency model — going from mainframe to pretty much anything else seems to involve:</i><p>First note, when it comes to getting old cobol apps off the mainframe, the options are &#x27;rehosting&#x27;, &#x27;migrating&#x27;, and rewriting. Rehosting is taking your cobol and data and running it all off the mainframe. A couple of companies offer solutions to run mainframe cobol apps on the jvm (compile cobol to jvm bytecode), or compile and run them on some unix flavor. Open&#x2F;Gnu Cobol is used this way by at least one vendor.<p>Migrating to another language involves rewriting in two main ways: source to source translating the cobol to the other language, or actually defining a project and doing a full rewrite from the ground up, using the idioms and best practices of the host language. I&#x27;ve seen cobol applications source translated to java using the RES &#x27;open cobol to java&#x27; (on sourceforge for the curious), and the resulting java code looks like assembler.<p>Also note that some of these applications are <i>massive</i> in scope, they&#x27;ve grown organically over decades to encompass business processes for entire industries. There was never a single design document. So, rewrites are generally out of the question. One can sometimes read about boondoggle migration projects cancelled after $100 milions being spent, with nothing to show for it.<p>Of your two points about data consistency, your first point is irrelevant, your second point is really not relevant either. There three types of data store on mainframes. Flat files, key value tables ie VSAM (think Berkley DB, with fixed length records), and rdbms (either oracle or DB2) Note I&#x27;m leaving out outliers like Datacom and IMS as they&#x27;re very uncommon now. The database is generally not an obstacle in re-hosting mainframe apps, or in source to source translation. They can be a problem in a rewrite because the schema is usually all jacked due to decades of cruft. VSAM can be replaced with dumb tables in a db or berkley db as mentioned. The amount of data stored generally isn&#x27;t a problem, especially not nowadays.<p>But yeah, you&#x27;ve got a point, this legacy cobol situation is getting really stupid at this point. I had the oppurtunity to ask a VP once &quot;why source translate to java when you can run cobol in a jvm like microfocus offering y?&quot; His response was &quot;customers don&#x27;t want to hear cobol, we had to go to java.&quot; Nevermind the generated java was a nightmare, and technological dead end.<p>These types of migration projects used to be pretty common around the Y2K era, but I see them coming back around again now, because as said, the situation is getting stupid.<p>I tend to think now that a source to source translation to a more cobol style representation in the host language, that would be maintainable and enhanceble by cobol programmers with very little retraining may be the way to go. Then you get to keep you domain knowledge and investment in legacy code. But no one is doing this.",4b2ba937878a1be0,https://news.ycombinator.com/item?id=16196651,"{'comment_id': 16196651, 'story_id': '16195678', 'parent': 16195678}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2018-01-20. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_13168392,2016-12-13T17:09:34Z,Announcing Updates to Google’s Internet of Things Platform\n\n\n\nURL: https://developers.googleblog.com/2016/12/announcing-googles-new-internet-of-things-platform-with-weave-and-android-things.html,2ae2b1ac56cadd97,https://news.ycombinator.com/item?id=13168392,"{'story_id': '13168392', 'points': 5, 'num_comments': 2, 'external_url': 'https://developers.googleblog.com/2016/12/announcing-googles-new-internet-of-things-platform-with-weave-and-android-things.html', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-12-13. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_13168471,2016-12-13T14:16:41,"If I&#x27;m reading this right, Google is pushing full Android as an option for IoT, alongside Brillo, which means the full security nightmare of the Android mobile situation on IoT devices. And from the looks of it, Google&#x27;s going to leave it on OEMs, at least to some degree, to decide when and how to patch.",5638584127f202c6,https://news.ycombinator.com/item?id=13168471,"{'comment_id': 13168471, 'story_id': '13168392', 'parent': 13168392}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-12-13. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_13168848,2016-12-13T14:56:43,It&#x27;s kinda weird to see Activity class (and all its callbacks) on the device without screen.,98f839d35070255f,https://news.ycombinator.com/item?id=13168848,"{'comment_id': 13168848, 'story_id': '13168392', 'parent': 13168392}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-12-13. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_10459557,2015-10-27T17:22:45Z,"Google Launches Brillo, the OS for IoT\n\n\n\nURL: http://googledevelopers.blogspot.com/2015/10/building-brillo-iant-devices-with-weave_27.html",22b51ec51d82c41e,https://news.ycombinator.com/item?id=10459557,"{'story_id': '10459557', 'points': 5, 'num_comments': 0, 'external_url': 'http://googledevelopers.blogspot.com/2015/10/building-brillo-iant-devices-with-weave_27.html', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2015-10-27. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_13169005,2016-12-13T18:13:52Z,Updates to Google’s Internet of Things Platform: Android Things and Weave\n\n\n\nURL: https://android-developers.blogspot.com/2016/12/announcing-googles-new-internet-of-things-platform-with-weave-and-android-things.html,bae60a4c9a157df4,https://news.ycombinator.com/item?id=13169005,"{'story_id': '13169005', 'points': 4, 'num_comments': 0, 'external_url': 'https://android-developers.blogspot.com/2016/12/announcing-googles-new-internet-of-things-platform-with-weave-and-android-things.html', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-12-13. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_13168991,2016-12-13T18:12:25Z,Updates to Google’s Internet of Things Platform: Android Things and Weave\n\n\n\nURL: https://developers.googleblog.com/2016/12/announcing-googles-new-internet-of-things-platform-with-weave-and-android-things.html?m=1,27672adaa65945ab,https://news.ycombinator.com/item?id=13168991,"{'story_id': '13168991', 'points': 4, 'num_comments': 0, 'external_url': 'https://developers.googleblog.com/2016/12/announcing-googles-new-internet-of-things-platform-with-weave-and-android-things.html?m=1', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-12-13. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_9620809,2015-05-28T20:07:44Z,Google ties Android to the smart home with Brillo and Weave\n\n\n\nURL: http://www.cnet.com/news/google-announces-brillo-at-io-developers-conference/,822906fb5115d263,https://news.ycombinator.com/item?id=9620809,"{'story_id': '9620809', 'points': 2, 'num_comments': 0, 'external_url': 'http://www.cnet.com/news/google-announces-brillo-at-io-developers-conference/', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2015-05-28. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_9181177,2015-03-10T22:29:52Z,Kubernetes on Azure with CoreOS and Weave\n\n\n\nURL: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/coreos/azure/README.md,42c0e756a71d2248,https://news.ycombinator.com/item?id=9181177,"{'story_id': '9181177', 'points': 2, 'num_comments': 0, 'external_url': 'https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/coreos/azure/README.md', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2015-03-10. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_13177406,2016-12-14T16:52:36Z,Announcing Updates to Google’s Internet of Things Platform: Android Things\n\n\n\nURL: https://android-developers.googleblog.com/2016/12/announcing-googles-new-internet-of-things-platform-with-weave-and-android-things.html,4d09a6587319a712,https://news.ycombinator.com/item?id=13177406,"{'story_id': '13177406', 'points': 2, 'num_comments': 0, 'external_url': 'https://android-developers.googleblog.com/2016/12/announcing-googles-new-internet-of-things-platform-with-weave-and-android-things.html', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-12-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_308642,2008-09-18T22:07:32Z,"5 Countries Stand Between Google and World Domination\n\nThere's a fourth reason: tradition. Here in Czech Republic people are used to use seznam.cz as their search engine and most don't even know there's something other. Seznam has a strong position on the market, but it is getting weaker every minute. I think that in a two year's time, Google will dominate event the czech market.\n\nURL: http://www.sitepoint.com/blogs/2008/09/19/5-countries-stand-betweent-google-and-world-domination/",0b58a10aeaf62ee5,https://news.ycombinator.com/item?id=308642,"{'story_id': '308642', 'points': 1, 'num_comments': 2, 'external_url': 'http://www.sitepoint.com/blogs/2008/09/19/5-countries-stand-betweent-google-and-world-domination/', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2008-09-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_308652,2008-09-18T19:17:30,"There's a fourth reason: tradition. Here in Czech Republic people are used to use seznam.cz as their search engine and most don't even know there's something other. Seznam has a strong position on the market, but it is getting weaker every minute. I think that in a two year's time, Google will dominate event the czech market.",0b58a10aeaf62ee5,https://news.ycombinator.com/item?id=308652,"{'comment_id': 308652, 'story_id': '308642', 'parent': 308642}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2008-09-18. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_16384022,2018-02-15T14:04:52Z,"Automating Continuous Delivery with Kubernetes, Google Cloud and Git\n\n\n\nURL: https://go.weave.works/od-gcpwebinar.html",2d9f08610b887063,https://news.ycombinator.com/item?id=16384022,"{'story_id': '16384022', 'points': 1, 'num_comments': 0, 'external_url': 'https://go.weave.works/od-gcpwebinar.html', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2018-02-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_10462968,2015-10-28T05:22:26Z,Building Brillo-Iant Devices with Weave for a Connected World\n\n\n\nURL: http://googledevelopers.blogspot.com/2015/10/building-brillo-iant-devices-with-weave_27.html,9be65953667993aa,https://news.ycombinator.com/item?id=10462968,"{'story_id': '10462968', 'points': 1, 'num_comments': 0, 'external_url': 'http://googledevelopers.blogspot.com/2015/10/building-brillo-iant-devices-with-weave_27.html', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2015-10-28. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_40659236,2024-06-12T15:32:53Z,"Launch HN: Overwatch (YC S22): OSINT platform for cyber and fraud risk\n\nHey HN! Arjun and Zara here - cofounders of Overwatch (<a href=""https:&#x2F;&#x2F;www.overwatchdata.ai"">https:&#x2F;&#x2F;www.overwatchdata.ai</a>), a platform to automate OSINT and threat intel, turning it into actionable insights.  Check out our clickthrough demo here: <a href=""https:&#x2F;&#x2F;app.storylane.io&#x2F;share&#x2F;qyayvtamapis"">https:&#x2F;&#x2F;app.storylane.io&#x2F;share&#x2F;qyayvtamapis</a>.<p>Overwatch began when we were working with risk and threat intel teams at Google, Stripe, and government. We experienced the immense challenge every fraud and cyber threat analyst faces: manually parsing through an ocean of data to find valuable insights and filter out the noise. This included using many of the feeds and tools out there that were often very expensive, noisy, keyword-based, and lacked accurate entity extraction or advanced query features.<p>Most threat intelligence tools utilize thousands of keywords and teams of analysts to manually sift through torrents of alerts. These alerts are usually individual posts on various platforms across news, social media, deep and dark web sources that have some matching keyword. This is full of false positives, requiring many hours to wade through to figure out what intel matters most to our users, why, and what they can do next.<p>Overwatch uses an alternative approach by layering AI agents and NLP techniques, including a combination of multifarious datasets, cluster analysis, topic modeling, Retrieval Augmented Language Models (RALM) and domain knowledgeable agents.<p>This allows us to (1) Filter through OSINT in real time to identify events and narratives that matter to our users, and write reports on what they could do about it; (2) Identify dark web and deep web threats, fraud methods, new tactics, and compromised accounts, stolen checks, and credentials affecting our users or their peers; (3) Send an alert any time one a 3rd party supplier or parts of the tech stack are impacted by a widely exploited vulnerability, ransomware attack, or breach; and (4) Track malware and ransomware groups that are actively targeting your industry including Indicators of Compromise (IOCs).<p>Our intelligence is actionable because the alert comes with the context and important details that an analyst needs to make an informed decision. Being AI-native, we also have a range of chat and data visualization features to effectively function as an intel co-pilot or industry expert. Finally, our in-house intelligence analysts and investigators can assist threat intelligence teams with HUMINT investigations and darkweb acquisition.<p>Our current customers include internet platforms, financial institutions, and supply chain companies. Within a day of one breach, one of our customers used Overwatch to surface 18,000+ leaked credentials. Another used us to surface fraudulent checks and learn exactly how threat actors were targeting their specific product features.<p>Our website says “Request a demo” but if you want to poke around on a very basic example of how we’re aggregating dark web, deep web, social, and surface web, log in at <a href=""https:&#x2F;&#x2F;app.overwatchdata.io&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;app.overwatchdata.io&#x2F;</a> using these credentials:
  username: try_overwatch@overwatchdata.io 
  pw: HelloHNWorld<p>That login is for an un-personalized feed of cyber threat intel (breaches, vulnerabilities, ransomed organizations, and industry updates) that gives you a flavor of not just the kind of information from which we can collect, but more importantly, how our technology prioritizes, clusters, and summarizes alerts for cyber &#x2F; fraud analysts. Try the chat agent on the left-hand side to parse through the data.<p>Or sign up for a longer trial and preview of our email alerts: <a href=""https:&#x2F;&#x2F;xryl45u9uep.typeform.com&#x2F;to&#x2F;pvtZQyS0"" rel=""nofollow"">https:&#x2F;&#x2F;xryl45u9uep.typeform.com&#x2F;to&#x2F;pvtZQyS0</a>. You can also check out our clickthrough demo for dark and deep web intelligence: <a href=""https:&#x2F;&#x2F;app.storylane.io&#x2F;share&#x2F;qyayvtamapis"">https:&#x2F;&#x2F;app.storylane.io&#x2F;share&#x2F;qyayvtamapis</a>.<p>Integration options range from simple dashboard access to our API for those who want to weave our intelligence directly into other products. Pricing is dependent on how complex a threat landscape our users want to monitor and we’re still figuring out how to standardize this but we’ll always do our best for the HN community.<p>Since the platform is AI-powered, it can also be used for news monitoring, supply chain disruptions, regulatory monitoring, or social media monitoring. We’ve had a lot of experience wrangling text-based feeds and using numerous AI-models (from embeddings, entity extractors, and LLMs) to filter, categorize, cluster, and analyze the data into meaning - so let us know if you’d like to nerd-out or have had any particular challenges. Looking forward to your feedback and questions! Thanks, HN!",91c5058fdebdf606,https://news.ycombinator.com/item?id=40659236,"{'story_id': '40659236', 'points': 164, 'num_comments': 89, 'external_url': '', 'language': 'en'}",plateau,acknowledged_not_fixed,unclear,Temporal: plateau based on 2024-06-12. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_40660585,2024-06-12T14:18:24,"Using RAG is definitely a relief factor after reading that you&#x27;re using AI and NLP for aggregate analysis, but I&#x27;m curious how much manual review this actually saves?<p>Since the model summaries would still need to be validated against the source results manually, your business&#x27; actual viability as a product hinges on whether customers perceive a significant time savings in the data provided via these channels over historical aggregation methods (like keyword analysis that you mentioned) and level of false positives.<p>What do you measure as the largest impact here? Is there a large time savings, is it additional discovery from blindspots that other methods don&#x27;t cover? Both? Are there additional benefits you see to this model beyond automation and expanded discovery?",f6507ef40cc1f241,https://news.ycombinator.com/item?id=40660585,"{'comment_id': 40660585, 'story_id': '40659236', 'parent': 40659236}",plateau,unknown,unclear,Temporal: plateau based on 2024-06-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_40665523,2024-06-13T00:07:09,"I would expect a landing page to show summaries. Largest organizations impacted in last 7 days, most active exploit, etc. Instead all I see are events - apparently including tweets as a source - with minimal context. Just do what you advertise. Show me the latest breaking info from the dark web. Who is impacted, how much, and what was the vector? Better to be sorted by magnitude of impact rather than strictly chronologically. Bonus points if you consider when the user was last logged in to your platform: for people that last viewed your content a month ago, here are the biggest events from the last month. Same for weekly, daily frequencies.<p>That said, love the initiative and focus on this space and there’s probably an opportunity to sell your data to hedge funds.",b3a0fb14e90c9a80,https://news.ycombinator.com/item?id=40665523,"{'comment_id': 40665523, 'story_id': '40659236', 'parent': 40659236}",plateau,unknown,unclear,Temporal: plateau based on 2024-06-13. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_40659434,2024-06-12T12:46:52,"Sort of off topic question. But how would you get into the type of work that uses this tool? I&#x27;ve always thought this type of work would be interesting, but I have no ideas where to start. What are the job titles? Fraud Analyst? Thanks!",84547b80d279a7ec,https://news.ycombinator.com/item?id=40659434,"{'comment_id': 40659434, 'story_id': '40659236', 'parent': 40659236}",plateau,unknown,unclear,Temporal: plateau based on 2024-06-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_40662525,2024-06-12T17:12:19,"What is the pricing to monitor per each keyword?<p>I know platforms like Flare are cool but when you need to monitor hundreds or even thousands of corporate keywords, domains, and assets, it becomes cheaper for CTI to just write the tools themselves.<p>What does your platform look like in regards to this and pricing?<p>For example, your pricing for monitoring 100 keywords and pricing for monitoring 500 keywords.<p>200k unique telegram channels is an interesting stat.<p>Each Telegram account (if paid Premium account) can only be in 1k channels and groups max. To monitor 200k unique channels&#x2F;groups, you have a network of at least 200 paid Telegram accounts continuously monitoring? Are you using Pyrogram or Telethon for this? Are these accounts owned by you (Overwatch) or are you just using a bunch of 3rd party Telegram intel feeds?",21e6b6a15b8b016a,https://news.ycombinator.com/item?id=40662525,"{'comment_id': 40662525, 'story_id': '40659236', 'parent': 40659236}",plateau,unknown,unclear,Temporal: plateau based on 2024-06-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_40664123,2024-06-12T19:59:44,"I worked with Arjun in trust and safety &#x2F; risk at both Google and Stripe. He’s not only an expert in the space, but is incredibly users-first. If you’re looking for a product like this and want a great partner, Arjun and team are it!",4716c7325baaa0fa,https://news.ycombinator.com/item?id=40664123,"{'comment_id': 40664123, 'story_id': '40659236', 'parent': 40659236}",plateau,unknown,unclear,Temporal: plateau based on 2024-06-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_40663469,2024-06-12T18:38:59,"Congrats on the launch!
As design feedback, the demos don&#x27;t seem to pass the &quot;squint test&quot; for intuitively surfacing the most important information &#x2F; actions on the screen. Maybe a more specific walkthrough of a redacted &#x2F; hypothetical scenario that&#x27;s focused more on the user&#x27;s decision-making process &amp; actions instead of the kitchen sink of product features would better illustrate how&#x2F;why things are laid out as they are currently.",a26e18e2caa10148,https://news.ycombinator.com/item?id=40663469,"{'comment_id': 40663469, 'story_id': '40659236', 'parent': 40659236}",plateau,unknown,unclear,Temporal: plateau based on 2024-06-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_40660862,2024-06-12T14:44:42,"This feels a bit like a turbo RSS reader that plows through some easy
and some difficult to access information and actively selects and targets
it to subscribers?",371a95d19809616e,https://news.ycombinator.com/item?id=40660862,"{'comment_id': 40660862, 'story_id': '40659236', 'parent': 40659236}",plateau,unknown,unclear,Temporal: plateau based on 2024-06-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_40659739,2024-06-12T13:13:15,"FWIW, clicking around, there are some odd display issues in the &quot;References&quot; (h&lt;b&gt;ttp&lt;&#x2F;b&gt;s:&#x2F;&#x2F;attack.&lt;b&gt;mitre&lt;&#x2F;b&gt;.org&#x2F;techniques&#x2F;&lt;b&gt;T1486&lt;&#x2F;b&gt;)<p>It looks like you&#x27;re embedding data from Twitter - are you paying for decahose&#x2F;enterprise access or just paying for a low volume of high value tweets (i.e. I&#x27;m seeing many from FalconFeedsio, DailyDarkWeb)",5879ae28c7dc8c5f,https://news.ycombinator.com/item?id=40659739,"{'comment_id': 40659739, 'story_id': '40659236', 'parent': 40659236}",plateau,unknown,unclear,Temporal: plateau based on 2024-06-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_40659591,2024-06-12T13:00:00,What is your detection hit&#x2F;miss rate?  What happens when you miss something?<p>Seems like this is going to become a cat and mouse game similar to evading AV.,3a939ca33bbbaa74,https://news.ycombinator.com/item?id=40659591,"{'comment_id': 40659591, 'story_id': '40659236', 'parent': 40659236}",plateau,unknown,unclear,Temporal: plateau based on 2024-06-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_40673431,2024-06-13T16:14:36,"Very interesting. It sounds like the tool is broadly powerful in combining a threat intel dashboard + news digest processor + AI features to better customize the output of the first two. The details of the API output will be important to many of your customers, as will the richness of the sources covered (forums and Telegram channels often die out and the &quot;buzz&quot; starts to happen in a different place, etc). Like some other commenters said, this is a fairly vendor-saturated space, so as a buyer I&#x27;d be looking for sharply presented distinction factors, beginning with price rather than AI (which is still a good thing to have).<p>I have a lot of experience with this kind of tool and workflow from at least three perspectives: internal builds; vendor; and consumer of vendor products such as this one. Happy to talk more if you&#x27;re interested",c4c19e01e8c18a1b,https://news.ycombinator.com/item?id=40673431,"{'comment_id': 40673431, 'story_id': '40659236', 'parent': 40659236}",plateau,unknown,unclear,Temporal: plateau based on 2024-06-13. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_1484308,2010-07-03T19:34:32Z,"Ask HN: Has iOS irrevocably fallen behind?\n\nThere is no good place to ask this, since there are loyalists on both sides. I can only hope that Hacker News has enough sane-minded people who will answer this properly (if it gets upvoted enough to show up on the front-page, of course).<p>After watching the complete Google I/O keynote and WWDC '10 keynote, even I have to admit that Android (Froyo) has left iOS behind on features. Articles like [these][1] might say that Apple has given a solid reply, but I don't think they have. When I see features like Android's cloud-to-phone messaging APIs, I long for them to be in iOS. But then iOS 4 has nothing of this sort. Froyo also has APIs to make app data searchable, which iOS 4 doesn't for non-Apple apps. And these are just a few things that looking back at it now makes iOS 4 just seem so much weaker. Gingerbread will be out in October if I believe Engadget, and that will pull Android further away from iOS. People can talk about fragmentation — which will become less of an issue with Gingerbread, and the fact that users don't care about such features. But developers do. If Apple falls behind on features that developers want, the App Store numbers they like to tout to loudly will stop growing so rapidly.<p>To be honest, as a user, iOS 4 adds nothing that truly stands out as ""THIS is why I must have the iPhone"" except for Facetime and the Retina Display. Being a long time Apple loyalist and enthusiast, it both worries and saddens me to see Apple so blatantly miss the boat. So my question is, has Apple dropped the ball after a solid start and fallen behind so much that the trickle of developers will slowly become a full flow which they won't be able to stop?<p>[1]: www.roughlydrafted.com/2010/06/08/apples-ios-wwdc-strikes-back-after-googles-android-io/",b080140c6950d0ae,https://news.ycombinator.com/item?id=1484308,"{'story_id': '1484308', 'points': 53, 'num_comments': 135, 'external_url': '', 'language': 'en'}",pre_launch,acknowledged_not_fixed,unclear,Temporal: pre_launch based on 2010-07-03. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_1484428,2010-07-03T17:52:11,"As a developer I think you're obsessed with features. Whereas users don't necessarily want those features. Apple's bet is that users will reject the platform with more features in favor of the platform that works better.<p>Let's take your examples.   When most people search their phone they're looking for information in either mail, contacts, or SMS messages.   They don't want the data from the other hundred programs on their phone cluttering up the important results from those areas.   So in this case Apple's stance is actually an advantage for the users.<p>On the cloud to device API it is nice but it's not like you can't accomplish the same goal simply by polling.   So while this is an area where android is superior I don't think it's a feature that makes that much of a difference.<p>All that said the greatest argument against android winning because of features is the fact that they've always had more features than iOS.    I mean if multitasking wasn't a big enough feature to woo users to android than I don't think something like cloud to device messaging is going to do it.",7096632e4f12d7f4,https://news.ycombinator.com/item?id=1484428,"{'comment_id': 1484428, 'story_id': '1484308', 'parent': 1484308}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-07-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_1484393,2010-07-03T17:35:36,"I'll say it again.  Apple iOS and the platform is at least 5 years ahead of all competitors.<p>Keep this in mind, noone has an answer for the iPod Touch or the iPad yet.  The iPod Touch outsells the PSP and nearly the DS in devices and in terms of content sales via iTunes (games and entertainment, none come close).<p>The iPad is another gaming console in a way and a pretty cheap laptop replacement. Not to mention the book market.<p>The iPad and iPod Touch make up over 65%+ devices sold by Apple and brings the total iOS devices to over 100 million.<p>Other companies keep thinking this is a Phone only market.  When in fact the iPhone is only about 35-40% of Apple's devices that use the iOS and the iTunes/Appstore platform.<p>Where is the response to that?  How many years will it take others to understand this. Apple is owning the mobile and handheld market and is making a ploy for all entertainment devices not just phones.  Apple has to love that the competition looks past 65%+ of their market every new device.<p>The iPod Touch and iPad are the equivalent of Apple II's in schools and candy cigarettes when it comes time for kids to grow up and buy a phone.  All their apps and games will be there waiting for them when they get one.  This market is about so much more than phones...",e0cf7fa412f151d7,https://news.ycombinator.com/item?id=1484393,"{'comment_id': 1484393, 'story_id': '1484308', 'parent': 1484308}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-07-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_1484395,2010-07-03T17:36:16,"I'm not particularly an Apple fan boy, but I do admire their design decisions. Apple has an _uncanny_ ability to take a block of marble (a set of features for a phone) and grind away at it until what's left is a minimally complete set of features that are (in general) perfect.<p>I was definitely the first to gripe and complain when the iPhone didn't have cut and paste, but I'll also be the first to admit that they _did_ get it right when they finally released it.<p>I was also one of the many loud voices complaining that I couldn't run backgrounded apps, but when you look at the HTC phones coming out right now running Android and full backgrounding, and you hear the stories of how the battery runs out by the early afternoon, you start to realize that, it is true, ""it is easy to add &#60;feature x&#62;, but it is hard to get it right"" (or whatever it was that jobs said in his announcements)<p>I'm not saying that the features in Android aren't impressive, they very well may be, but Apple's design decisions don't just go after ""impressive"", they try to go after ""perfect"", and sometimes getting features perfect means cutting them until you're ready<p>Your entire post is targetted as ""features that developers want"" and you're right, you need a healthy ecosystem of developers, and Google is certainly building one. However, you also need a healthy ecosystem of consumers who love the product, and at the end of the day, I really think most developers will go to the platform where they can reach the widest audience. Apple cares about their consumers first, and their developers second (and sometimes it feels like second last), but it seems to work for them...<p>edit: of course, sometimes apple's PR doesn't respond to consumers as best as it could (i.e. the ""you're holding it wrong""), but I'm trying to focus on design/product decisions",a14a8481737e0973,https://news.ycombinator.com/item?id=1484395,"{'comment_id': 1484395, 'story_id': '1484308', 'parent': 1484308}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-07-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_1484333,2010-07-03T17:01:44,"Go tell your mom about the new features that Froyo has. Watch her eyes glaze over as you talk about ""cloud-to-phone messaging APIs"" and ""APIs to make app data searchable"".<p>Now show her the iphone 4 retina display.",6a99bcfcd5e55661,https://news.ycombinator.com/item?id=1484333,"{'comment_id': 1484333, 'story_id': '1484308', 'parent': 1484308}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-07-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_1484331,2010-07-03T17:00:27,"As an unabashed Apple hater who thinks the company is little more than hype and marketing, I have to say strongly NO, iOS has not fallen behind the other OSs.<p>You point to Android specifically, but I don't think anything you've mentioned is a selling point on the device/os specifically.<p>is 'cloud-to-phone messaging api' really something that a customer is going to be looking at when comparing devices? And if so, is it actually a feature that can't be replicated in any OS quite simply?<p>I think the market share challenges in the mobile space are less about OS feature capabilities like you describe than the more basic requirements like battery life, screen quality, design and brand perception.<p>Using your cloud-to-phone example again, is this really that much different from app notifications in iPhone (I'm pretty sure that is in the api). You say it's the features that developers want, but developers need to focus on the needs of consumers, rather than just what's the geekiest thing I can build.<p>If Apple is falling behind anywhere, I suspect it is in the UI design, which I don't find particularly compelling. It does a decent job of getting out of the way, and it is nicer than blackberry, but it very quickly seemed to have gone from cutting edge to ho-hum. I don't look at an iphone and think that it is beautiful and easy to use. The home screen with all the buttons and no way of organizing them seems clutter, and the grid is bland without any character.",045c769e1d4b38ba,https://news.ycombinator.com/item?id=1484331,"{'comment_id': 1484331, 'story_id': '1484308', 'parent': 1484308}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-07-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_1484789,2010-07-03T20:52:58,"1. That I/O keynote was something else in terms of mindshare. Before, Android was an ugly also-ran where devs were making a tenth of the income they made on iOS. After, Android was still ugly and making a tenth of the income for devs, but was transformed into an inevitable iPhone-killer. The facts were the same. If you bash Apple for hype, take Vic with a pinch of salt.<p>2. iOS 4 is packed with features for devs. Some of the new APIs and block-based animations have taken hundreds of lines of code out of my apps. Doing common tasks like throwing a new view on the screen are massively simpler compared to doing the same on Android.<p>3. Feature comparisons impressed IT managers in 1989 as they sat choosing between Word and WordPerfect from a list in Byte. Users don't care; they want things that work. They didn't care that the iPod didn't have wireless or as much space as a Nomad, and they still don't.<p>4. Seriously, features don't factor into it. For 8 years companies were trying to best the iPod by ladling in features, and each time the market told them to go zune eggs.<p>5. The phone companies are absolutely destroying Android. They're still launching devices with hacked-up versions of 1.6, with no promise of when Froyo will ever make it on there -- that is if the carriers decide to allow it. Imagine if Microsoft had been launching XP but Dell decided it would keep on shipping Win 98, and AOL wouldn't let users even upgrade to Win 2000. Ludicrous.",c2ce02ceb1fed3c2,https://news.ycombinator.com/item?id=1484789,"{'comment_id': 1484789, 'story_id': '1484308', 'parent': 1484308}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-07-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_1484489,2010-07-03T18:19:01,"Don't use words like ""irrevocably"". They kind of tag your post as FUD. (Along as statements like ""being a long time Apple loyalist... it saddens me..."".) And, why do you really think something like this should be irrevocably? How can it be?<p>Then, when I read the title, I just thought 'wtf'? Behind? So I read your post because I was curious about what you mean. Again, I even more wonder what you mean by irrevocably. And how those few missing APIs should be the reason that iOS is behind Android.",71d425deccf93f3e,https://news.ycombinator.com/item?id=1484489,"{'comment_id': 1484489, 'story_id': '1484308', 'parent': 1484308}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-07-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_1484630,2010-07-03T19:32:35,"&#62; <i>When I see features like Android's cloud-to-phone messaging APIs, I long for them to be in iOS. But then iOS 4 has nothing of this sort.</i><p>Isn’t that exactly what push notifications are? Apps like Notifo, and Boxcar for that matter, allow you to implement push notifications for anything (c.f. Github integration) without even a dedicated iPhone app.<p>&#62; <i>users don't care about [fragmentation].</i><p>While Joe Consumer may not grok fragmentation, it definitely impacts his experience. E.g. the official Twitter app not being available on Droid or the Incredible, last I heard.<p>I don’t see Apple as missing the boat so much as taking their time to do things right. Just like copy-paste and multitasking. Patience for the polish, or yeah, go to Android.<p>To answer your question, iPhone will, yes, always lack features Android has, for the foreseeable future, but the experience is smoother and more consistent. Strictly in this sense, it it Android that will never catch up.<p>(This is pretty much what Gruber has been saying: <a href=""http://www.macworld.com/article/151235/2010/05/apple_rolls.html"" rel=""nofollow"">http://www.macworld.com/article/151235/2010/05/apple_rolls.h...</a>)",e1745b430303f0c3,https://news.ycombinator.com/item?id=1484630,"{'comment_id': 1484630, 'story_id': '1484308', 'parent': 1484308}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-07-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_1484634,2010-07-03T19:34:22,"&#62; After watching the complete Google I/O keynote and WWDC '10 keynote<p>I was at WWDC.  There are a lot of things I saw there that I'm not supposed to talk about.  Suffice it to say that the cool stuff was NOT in the keynote.<p>I came out of WWDC thinking that Google may very well never catch up.  They don't seem to care about Android like Apple cares about the iPhone.  Apple cares enough about the iPhone to learn how to do cloud services (see Push) and advertising (see iAd) better than Google, things that Apple has no experience doing well.  But Google doesn't care about Android enough to invest into build quality or UI, things that Apple does well.",943e1c863ac799ea,https://news.ycombinator.com/item?id=1484634,"{'comment_id': 1484634, 'story_id': '1484308', 'parent': 1484308}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-07-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_1484319,2010-07-03T16:52:10,"You don't know what Apple is working on.  Nor do you know if any of those Android features will work properly or will be ""all that.""  This is just the typical hopscotching that happens all the time in the industry.  In a few months, you might be doing a post about webOS vs Android vs iOS.  Buy something and just enjoy it.",460c693134a070c3,https://news.ycombinator.com/item?id=1484319,"{'comment_id': 1484319, 'story_id': '1484308', 'parent': 1484308}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-07-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_34525144,2023-01-25T22:38:32Z,"Ask HN: Expat software engineers in Japan, how are you making it happen?\n\nThere seems to be a lot of desire for software engineers to live and work in Japan, at least some fairly passionate minority of people. I also see people on HN pop up from time to time and describe the fact that they live and work in Japan; I suspect most are expats, tho I may be totally wrong here. :)<p>I&#x27;m wondering: How are you all pulling it off? Where are you working?<p>From what I&#x27;ve seen, salaries and working conditions at Japanese software firms seem generally on the weaker side.<p>Obvious options seem to be:<p>1. Work for Google Japan, or some other major Western company with a Japanese engineering presence
2. Work for a Japanese game company
3. Become an entrepreneur
4. Work at a Japanese company (Rakuten, etc)<p>What are most of you doing and do you have any advice here? I&#x27;m wondering how the crowd here distributes between these four options (or possibly others).<p>I&#x27;d love to return to Japan, and if possible I&#x27;d love to work outside of the Tokyo region (so, likely remote if necessary).<p>&lt;Edit&gt;<p>I can speak Japanese and would prefer a Japanese language working environment, but am flexible on that if need be.<p>Thanks!",a1a45f1bc564af79,https://news.ycombinator.com/item?id=34525144,"{'story_id': '34525144', 'points': 5, 'num_comments': 7, 'external_url': '', 'language': 'en'}",pre_launch,acknowledged_not_fixed,unclear,Temporal: pre_launch based on 2023-01-25. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34525387,2023-01-25T20:01:56,"I think the options you have listed are pretty accurate.  If you are a working for a large multi-national then getting an internal transfer to the Japan office is probably the best way to move to Japan.<p>As for companies in Japan, there is a wide range. From very old fashioned businesses where programming is seen as simple grunt work to modern development shop that keep up with industry best practices.  If you don&#x27;t speak Japanese you will limit your options, but filtering for English speaking workplaces will probably leave you with a smaller number of better companies.<p>Start off by taking a look at the English speaking expat focused job sites [1][2].<p>If you have a university degree and can get hired by a company in Japan the visa situation is very straightforward. No lotteries or waiting lists, just a few forms.<p>You would be right in saying that salaries tend to be lower.  This article[3] from JapanDev is a good starting point.  Cost of living is also lower, depending on your lifestyle.  Inflation is starting to catch up with Japan so it&#x27;s not clear what things will be like in the future.<p>[1] <a href=""https:&#x2F;&#x2F;japan-dev.com&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;japan-dev.com&#x2F;</a><p>[2] <a href=""https:&#x2F;&#x2F;www.tokyodev.com&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;www.tokyodev.com&#x2F;</a><p>[3] <a href=""https:&#x2F;&#x2F;japan-dev.com&#x2F;blog&#x2F;software-developer-salaries-in-japan-the-ultimate-guide"" rel=""nofollow"">https:&#x2F;&#x2F;japan-dev.com&#x2F;blog&#x2F;software-developer-salaries-in-ja...</a>",f6536b0d9f1a4812,https://news.ycombinator.com/item?id=34525387,"{'comment_id': 34525387, 'story_id': '34525144', 'parent': 34525144}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2023-01-25. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_34526036,2023-01-25T21:04:48,"Admittedly my experience is only based on a 2 week secondment in Japan, but it seems the expats at western companies in Japan are exempt from the work culture and can leave on time etc.",f3c78434a0fec5b3,https://news.ycombinator.com/item?id=34526036,"{'comment_id': 34526036, 'story_id': '34525144', 'parent': 34525144}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2023-01-25. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_31886227,2022-06-26T17:59:34Z,"Ask HN: Most Secure Browser? Chromium?\n\nI am looking for the most secure browser for daily  browsing. Excluding any other parameter like privacy or functionality.<p>Chrome : the privacy breaches seem to be large enough to actually become a security threat as well. Is that a fair statement?<p>Firefox : seemed pretty good to me until I read this article https:&#x2F;&#x2F;madaidans-insecurities.github.io&#x2F;firefox-chromium.html. It claims that Firefox is more insecure than Chrome&#x2F;Chromium, in large part because of a weaker sandboxing mechanism. Even if this mechanism seems to be catching up, this points to a significant lag in Firefox&#x27;s security<p>Safari : is it secure?<p>Chromium : it seems to be the best bet to me, because it seems to contain the best security mechanisms, without the Google spyware. However:
    1) it does not seem to provide an automatic update system
    2) I read that it&#x27;s unstable because it contains bleeding edge code. That actually sounds like it&#x27;s less safe than chrome because of that =&gt; is there a way to know which Chromium version Chrome is using, and just using this version?<p>I am grateful for any thoughts.",496082a4a92610fa,https://news.ycombinator.com/item?id=31886227,"{'story_id': '31886227', 'points': 2, 'num_comments': 7, 'external_url': '', 'language': 'en'}",pre_launch,acknowledged_not_fixed,unclear,Temporal: pre_launch based on 2022-06-26. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_31887434,2022-06-26T17:04:46,"There are currently 3 major browser engines: Google Chromium, Apple WebKit, and Mozilla Firefox. There are lots of derivatives of Chromium that claim to be secure and remove Google web service dependencies. WebKit is mostly iOS and macos which is pretty good in terms of security except for the Apple service dependencies. Firefox allows the most amount of user choice: Extensions like uBlock Origin and uMatrix, and ways to turn things off, except for the Firefox service dependencies.<p>I&#x27;d say the underlying technologies, which overlap in some cases, and have improved the security for the three browsers. We face a different threat in terms of reduced user choices: vendor lock-in, reduced privacy, and worsening user experience.<p>In the past and currently there is an option to block pop-ups, but this has been overcome with modern JavaScript. Even worse are browser vendor pop-ups nagging to give away personal information like location, credit cards, and other credentials -- and making this seem like this is normal and it&#x27;s not a problem when clearly it is serious problem.",1302be26884af9a5,https://news.ycombinator.com/item?id=31887434,"{'comment_id': 31887434, 'story_id': '31886227', 'parent': 31886227}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-06-26. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_31887438,2022-06-26T17:05:25,"Chromium is the name of the project.  Chrome is a specific release of Chromium that bakes in a few extra features.  Neither are substantially different when it comes to tracking or release cadence.  You can get Chrome nightly just as you can get Chromium nightly.<p>Chromium-based browsers have strong sandboxing, and a dedicated security team at Google.  If security is your main priority that makes for a compelling argument.  They have strong code guidelines such as their rule of two[1], make heavy use of fuzzers and others techniques.<p>You can read some of the other techniques they use for security here[2][3]:<p>Despite these techniques, they are using a language that is not memory-safe.  Security bugs do occasionally pop up in Chromium.  They&#x27;re also patched very quickly, but the possibility exists of a 0-day impacting users.<p>Firefox has improved considerably in their sandboxing, but it is still a legacy codebase.  Many techniques used to ensure code safety were not originally available, but have been slowly patched into the codebase.<p>Firefox has one advantage: it was the progenitor of Rust.  They&#x27;ve had a head start in building components in a memory-safe language which offers them safety that Chromium does not currently have (Google are still considering adopting Rust).  For this reason it&#x27;s possible that Firefox will be able to avoid a memory bug that will affect Chromium-based browsers.<p>Both companies offer a generous bug bounty program.  Firefox is occasionally targeted as it&#x27;s used by TOR users, but Chromium receives far more scrutiny overall (which isn&#x27;t necessarily a bad thing).<p>I don&#x27;t think either browser is a <i>bad</i> option, but neither are they perfect.  I&#x27;d feel safer overall with Chrome (or Chromium, whatever) primarily due to the considerable resources Google is able to put into their security focus.<p>[1] <a href=""https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;chromium&#x2F;src&#x2F;+&#x2F;HEAD&#x2F;docs&#x2F;security&#x2F;rule-of-2.md"" rel=""nofollow"">https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;chromium&#x2F;src&#x2F;+&#x2F;HEAD&#x2F;docs&#x2F;s...</a><p>[2] <a href=""https:&#x2F;&#x2F;docs.google.com&#x2F;document&#x2F;d&#x2F;e&#x2F;2PACX-1vRZr-HJcYmf2Y76DhewaiJOhRNpjGHCxliAQTBhFxzv1QTae9o8mhBmDl32CRIuaWZLt5kVeH9e9jXv&#x2F;pub"" rel=""nofollow"">https:&#x2F;&#x2F;docs.google.com&#x2F;document&#x2F;d&#x2F;e&#x2F;2PACX-1vRZr-HJcYmf2Y76D...</a><p>[3] <a href=""https:&#x2F;&#x2F;security.googleblog.com&#x2F;2021&#x2F;09&#x2F;an-update-on-memory-safety-in-chrome.html"" rel=""nofollow"">https:&#x2F;&#x2F;security.googleblog.com&#x2F;2021&#x2F;09&#x2F;an-update-on-memory-...</a>",04096ebef2e1513c,https://news.ycombinator.com/item?id=31887438,"{'comment_id': 31887438, 'story_id': '31886227', 'parent': 31886227}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2022-06-26. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_6300012,2013-08-30T03:00:40Z,"Ask HN: I'm not sure where to ask this question. (SOLVED)\n\n(First an apology, this question adds little to the HN community, and am only asking it here as an almost last resort.)<p>I&#x27;m trying to find an article on Hacker News that I read recently about arguing tactics. It mentioned that when you argue with someone on a subject that they&#x27;ve based their life philosophy on, they are more likely to push back hard. But if you try some of your more weaker arguments on them, they are more likely to be receptive.<p>I&#x27;ve tried googling, scrolling through Hacker News and DuckDuckGo, (which is actually surprisingly good!). My next step is Ask Metafilter then set up a paid task on TaskRabbit.<p>As an aside, I wish Google had a multi-line search box and I could just throw &quot;search clues&quot; in until I find what I&#x27;m looking for -- it&#x27;s annoying having to google, then perturb your keywords, re-google, perturb, re-google etc.<p>EDIT: big thankyou to _pius and arink",1d726ef7008aecbd,https://news.ycombinator.com/item?id=6300012,"{'story_id': '6300012', 'points': 2, 'num_comments': 4, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2013-08-30. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_6300066,2013-08-30T00:16:58,"<a href=""https://news.ycombinator.com/item?id=6276171"" rel=""nofollow"">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=6276171</a><p>By the way, you should see a search box on the bottom of every page on HN. I searched stories for &quot;weaker&quot; and it was among the first results.",800b1f1878b7b473,https://news.ycombinator.com/item?id=6300066,"{'comment_id': 6300066, 'story_id': '6300012', 'parent': 6300012}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2013-08-30. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_6300030,2013-08-30T00:05:02,Try hnsearch.com,f4d9337195800a87,https://news.ycombinator.com/item?id=6300030,"{'comment_id': 6300030, 'story_id': '6300012', 'parent': 6300012}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2013-08-30. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_4531391,2012-09-17T05:18:38Z,"Ask HN: what type of sources should I use for my novel unsearch engine\n\nYes you read that right we are building an <i>un-search</i> engine. We are very different from existing search engines. However we are in a dilemma to choose data sources to build out our MVP. Our search is most effective and value clear when multiple heterogeneous data are indexed (obviously we have anything but a Google data farm indexing power).
We are trying to pick a domain or source that is manageable scale for a small startup, and yet shows the ability to ""weave"" interdomain knowledge. The obvious ones are wikipedia, wikibooks etc. but would the community have any suggestions on on other sources? news perhaps? Thanks in advance!",cb0d2d004d75e755,https://news.ycombinator.com/item?id=4531391,"{'story_id': '4531391', 'points': 2, 'num_comments': 3, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2012-09-17. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_4532063,2012-09-17T08:31:03,"Seems like you're building a semantic search engine.<p>Have a look at some of these: <a href=""https://en.wikipedia.org/wiki/List_of_online_databases"" rel=""nofollow"">https://en.wikipedia.org/wiki/List_of_online_databases</a>",f387463290b5b34a,https://news.ycombinator.com/item?id=4532063,"{'comment_id': 4532063, 'story_id': '4531391', 'parent': 4531391}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2012-09-17. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_4531434,2012-09-17T02:48:04,"Judicial opinions. I'm not really clear on what your product does from this description, though.",3ae118d1780cb4b6,https://news.ycombinator.com/item?id=4531434,"{'comment_id': 4531434, 'story_id': '4531391', 'parent': 4531391}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2012-09-17. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_1996862,2010-12-12T09:56:06Z,"The 25 Most Notable Quotes in Tech History\n\nIt’s not love, war, or baseball. But over the years some memorable things have been said about technology. Some have been memorably eloquent; others are unforgettably shortsighted, wrongheaded, or just plain weird. Let’s celebrate them, shall we?<p>A few ground rules for the list that follows: I considered only statements attributable to a specific individual, which ruled out most ad slogans (“Think Different”) and many durable Internet memes (“You are in a maze of twisty passages, all alike”). I did, however, include individuals who happened to be fictional, or canine, or inanimate. I also let a couple of quotes slip in that are not strictly speaking about technology, though neither would exist without it–one from 1876, and one from earlier this decade. Sue me.<p>It’s hard to rank quotes by how notable they are. So I faked it by listing them using an imprecise, unscientific factor I call Googleosity: the number of results Google reports that reference (or riff upon) each quote. (You may quibble with the queries I performed to determine Googleosity, but I tried my best.) Googleosity tends to reward quotes that are not only famous but fun–they’re the ones that people like to allude to, to parody, and to generally weave into blog posts and other online conversation.<p>We’ll start with the quote with the lowest Googleosity factor, and work our way up from there.\n\nURL: http://guywhosteals.blogspot.com/2010/12/25-most-notable-quotes-in-tech-history.html",651ed11bd055483a,https://news.ycombinator.com/item?id=1996862,"{'story_id': '1996862', 'points': 2, 'num_comments': 2, 'external_url': 'http://guywhosteals.blogspot.com/2010/12/25-most-notable-quotes-in-tech-history.html', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-12-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_1996973,2010-12-12T09:35:50,"Why do people think a social networking toolbar, social networking side panel and facebook iframe add value to their website?",ea8b7decfd55e471,https://news.ycombinator.com/item?id=1996973,"{'comment_id': 1996973, 'story_id': '1996862', 'parent': 1996862}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2010-12-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_5845164,2013-06-08T15:33:11Z,"This is huge, bounded gaps between primes \n\nThe twin primes conjecture states that there are infinitely numbers n such that n and n+2 are prime. David Roberts on Google+ refers to this as “to put it mildly, EXTREMELY HARD to prove”. An equivalent statement is that there are infinitely many primes p and q such that |p−q|&lt;3, and this, says David, allows the production of weaker conjectures:<p>Conjecture(N): there are infinitely many primes p and q such that |p−q|&lt;N.<p>Anyway, according to a blog post by Peter Woit of Columbia University, who apparently got an email announcing it, there is a seminar today at Harvard at 3pm local time, in which “Yitang Zhang will present new results on ‘Bounded gaps between primes’”. Peter says that Zhang claims a proof of Conjecture(70,000,000), that is: there are infinitely many primes p and q such that |p−q|&lt;70,000,000.\n\nURL: http://aperiodical.com/2013/05/primes-gotta-stick-together/",abebe5ca75dbf3ac,https://news.ycombinator.com/item?id=5845164,"{'story_id': '5845164', 'points': 2, 'num_comments': 0, 'external_url': 'http://aperiodical.com/2013/05/primes-gotta-stick-together/', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2013-06-08. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_4900806,2012-12-10T18:51:15Z,"Non-linear film experience / unique every time you play\n\nhey HN - we're super excited and proud to share our first app release with you!<p>Energy Flow, a non-linear film experience on iOS and Android is now available for free from the App Store and Google Playstore.<p>Energy Flow explores the physical, social and spiritual tensions in our world, translating real-life events and processes into digital paintings in motion. The App weaves multiple story lines into an immersive, audio-visual experience that is unique every time it is played.<p>Enjoy!\n\nURL: http://www.energyflow.io",4d263813f30f4f67,https://news.ycombinator.com/item?id=4900806,"{'story_id': '4900806', 'points': 2, 'num_comments': 0, 'external_url': 'http://www.energyflow.io', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2012-12-10. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_44769759,2025-08-02T17:55:27Z,"World's First Mental Gym – No AI Allowed\n\nWorld&#x27;s First Mental Gym - NO AI ALLOWED<p>Many people are already noticing the impact of relying on AI, whether in writing, thinking, brainstorming, and sometimes even direct life-related decision making. 
The Impact of AI on our brain and our ability to think independently will be similar to the impact of transportation and easy life on our muscles. 
That is exactly why we need to go to the GYM, because otherwise, our muscles will get weaker and weaker, until eventually, we become even sick. 
If you don&#x27;t want the same to happen to your brains, then Join the world&#x27;s first mental GYM, and invite your friends, at least the ones you don&#x27;t want their brain to get fat.<p>Join from the link below, the gym will be hosted on BrainsMingle
Link: https:&#x2F;&#x2F;brainsmingle.com&#x2F;event-details&#x2F;e0df1e2d-dcf0-44ca-b253-cdd873a446b7<p>our first session is in exactly 1 month, drop your comments below about what activities you think we should do
Here are my main workouts so far:
1- Cognitive Sprints]
- Solve logic puzzles
- reverse-engineer patterns
- Memory recall
- Verbal pushups - explain complex ideas in 60 sec<p>2-Survive the Meeting (Roleplay Simulation)
Format: One person is “on the spot” explaining a concept, handling tough questions, or making decisions live — no prep, no AI, real pressure.
Examples:
&quot;Your product just failed — explain it to investors.&quot;
&quot;Your client wants a decision now — go.&quot;
&quot;You forgot your slides. Present anyway.&quot;<p>3. Zero-Tool Strategy Sessions
Format: You’re given a situation and must plan it with no Google, Notion, or whiteboards. Just verbal thinking.
Examples:
“Build a go-to-market strategy for X in 2 mins.”
“Outline a new feature without writing it down.”
“Pitch your product without slides.”
Great for: Business builders, marketers, creators.<p>4. Cognitive Duel (1v1 Fast Debate)
Format: Two participants debate on opposite sides of a hot topic. Fast-paced, with timers.
Example Topics:
“AI will replace 80% of knowledge jobs.”
“Bootcamps &gt; degrees.”
“Remote work is making us dumber.”
Great for: Thought leaders, critical thinkers, verbal processors.<p>5. Blind Spot Blitz (Group Drill)
Format: One person presents an idea. The rest try to poke holes in it — respectfully, fast, with no Google help.
Example Use Case:
“You’re launching a product in X market. Where will it fail?”
“Here’s your plan. Where’s the flaw?”
Great for: Strategists, engineers, founders.",e1d515c50a93856b,https://news.ycombinator.com/item?id=44769759,"{'story_id': '44769759', 'points': 1, 'num_comments': 0, 'external_url': '', 'language': 'en'}",post_discontinuation,unknown,unclear,Temporal: post_discontinuation based on 2025-08-02. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_18968529,2019-01-22T14:43:13Z,"Ask HN: What are some good qualities of a successful founder?\n\nHi,<p>Nowadays, I&#x27;m trying to build my own startup with my co-founder. We have good experience(several projects together and 4+ years of experience on the market) and believe in our idea and we got many quite positive feedback from many different kind of people. There are even people who want to invest in us.<p>But, unfortunately there also have been some disappointing and demoralizing feedback, such as; &quot;You don&#x27;t have an excellent record of experience, no incubator will help you. go work at Google first&quot; or &quot;You&#x27;re not a graduate of a top school, so your chances are slim&quot; or &quot;You will not succeed because you&#x27;re not resourceful(i.e.: no Master&#x2F;PhD or no top school again)&quot;<p>Even though these comments don&#x27;t waver our determination and effort we spend on our project, it&#x27;s still demoralizing for us.<p>Are top schools&#x2F;top companies necessary to build a company or to find investors?<p>What should a founder have as a quality or distinguishing talent?",76a9277e5c883700,https://news.ycombinator.com/item?id=18968529,"{'story_id': '18968529', 'points': 1, 'num_comments': 0, 'external_url': '', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2019-01-22. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_13173338,2016-12-14T02:33:40Z,Android Things – Android's IoT Platform\n\n\n\nURL: https://android-developers.googleblog.com/2016/12/announcing-googles-new-internet-of-things-platform-with-weave-and-android-things.html,b72a340826f32817,https://news.ycombinator.com/item?id=13173338,"{'story_id': '13173338', 'points': 6, 'num_comments': 0, 'external_url': 'https://android-developers.googleblog.com/2016/12/announcing-googles-new-internet-of-things-platform-with-weave-and-android-things.html', 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2016-12-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_story,hn_story_27830978,2021-07-14T08:47:55Z,"Launch HN: Onfolk (YC S21) – Modern HR and Payroll in One Place (For the UK)\n\nHey, we’re Naz and Charlie! We&#x27;re building Onfolk (<a href=""https:&#x2F;&#x2F;onfolk.com&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;onfolk.com&#x2F;</a>). We’re a couple of engineers who discovered that payroll in the UK is pretty backward and that building good software can raise the bar. You can check out some pics on our Product Hunt post [1] or see a quick video [2].<p>To set the scene: we were software engineers at Monzo for 4 years. Joined at 400k customers, left at 5.5M. We took voluntary furlough in April 2020 (&quot;furlough&quot; is the UK government’s scheme for keeping workers paid for a bit so that companies don&#x27;t have to lay them off). During that time, Monzo changed payroll provider. The old one sucked and had errors. The new one sucked and had errors. It took a consultant a year to implement the new one.<p>We wondered how on earth a company with our funding, whose main asset was its people, couldn&#x27;t find a good way to pay them. We dug into what doing payroll actually means (shout out to payroll guru Duane Jackson [3] for the early pointers!). Turns out, payroll is: (1) gross-to-net calculations, (2) reporting that to the government, and (3) making payslips. It’s not conceptually hard but you have to be meticulous. Complicated, not complex.<p>Some of the payroll products in the UK have 0 automated tests in their software. A typical process is run on spreadsheets pulled out of HR softwares or emails to accountants. No validation, data keyed in on the other end. Payroll is unloved.<p>There are a huge amount of edge cases. Tax systems aren&#x27;t put in place all at once – they evolve over time. So when you&#x27;re programming payroll you run into things like: gender is a mandatory field to report to the government and a binary male&#x2F;female. Until April 1977 married women could choose to pay a reduced rate of national insurance (our word for &quot;social security&quot; in the UK). Anyone who opted into that scheme before 1977 might still be on it.<p>Another one: Deep-sea fisherman have their own national insurance rates [4]. The government changes people&#x27;s tax codes periodically, and sometimes the reasons can seem baffling. It&#x27;s not a very transparent system<p>Turns out the competition is listed on the government&#x27;s website [5]. There’s about 130 other payroll softwares. Desktop software still dominates the UK market (&quot;butt&quot; is a feature in payroll land).<p>We discovered the certification process to get on the list, found the right person in the government to email when we had questions, and kinda just started building. We trundled on over our weekends until we got on the list (might still be under our old name, “Hyko”, at the time of writing. Hyko is a dog [6]).<p>Then, a friend whose payroll provider had just got their numbers wrong gave us a shot. I phoned up Charlie, who said “I guess I’d better put the kettle on”. We had less than 2 weeks to get it done and worked like maniacs over Christmas to arrive at something that looked like a payrun.<p>The calculations were run from test files on our local machines, as was notifying the government via their XML API with it&#x27;s random polling intervals. Payslips were cobbled together on Figma. It was artisanal.<p>Since then, here’s a few ways we’ve tried our best to raise the bar on the software side: Thorough automated unit tests on our calculation logic; integration tests for playing through multiple months of salaries (especially important as tax calculations in the UK care about the cumulative amount paid over a year vs. only concerning the current month); whenever anything changes, we recreate payments for the current month on the fly. So that the user always has a live view of what payroll will be (vs. finding out on the day); Reconciliation logic. So that if things that should add up don&#x27;t add up, we error loudly way before payday. This reduces the chances that we&#x27;ll ever run payroll with incorrect numbers (techniques learnt while interacting with banking ledgers); Wrote in a language with a strong compiler (Go); Generally validate the shit out of everything.<p>Since Christmas, the product has expanded from payroll into one tool for everything that touches employee data. We think that a ton of the manual admin work in UK companies results from no &#x27;single source of truth&#x27; for employee data (often spread across Xero, accountants, spreadsheets, time-tracking software, Google Drive).<p>The same data is duplicated in multiple tools, which means it has to be synced, which means spreadsheet exports and manual process. e.g. when an employee leaves, you usually want their remaining time-off allowance to be automatically added to their final salary, reported to the government as such, and to have them removed from payroll, time-off rotas etc. Typically, that means a bunch of faffy jobs where people get paid wrong if you mess up.<p>We’ve tried to kick off everything that needs to be done from key actions (new joiner, leaver, salary update, payrun). When a payrun is started, from our backend: the UK government is notified, payslips are created, journals are posted to accounting software, pension contributions are posted, and payments are scheduled.<p>As an employee you don’t have to log in to “myEPayslipPortal” to get your payslip. It’s there alongside your time-off and personal info. Currently we charge £8 &#x2F; employee &#x2F; month and have a bunch of startups on board.<p>This autumn we’ll be working on exposing our backend as a UK payroll API, so anyone can have payroll in their product without having to care about unintuitive tax calculations and keeping up with changes in regulations.<p>I’d be interested if our findings ring true with anyone&#x27;s payroll experiences. Any ideas for applications for a payroll API? Or interesting implications come to mind with having a source of truth for all your employee data?<p>Thanks all!!<p>[1] <a href=""https:&#x2F;&#x2F;www.producthunt.com&#x2F;posts&#x2F;onfolk"" rel=""nofollow"">https:&#x2F;&#x2F;www.producthunt.com&#x2F;posts&#x2F;onfolk</a><p>[2] <a href=""https:&#x2F;&#x2F;loom.com&#x2F;share&#x2F;3ac431db7c4e46e7a14921c5f98a3f68"" rel=""nofollow"">https:&#x2F;&#x2F;loom.com&#x2F;share&#x2F;3ac431db7c4e46e7a14921c5f98a3f68</a><p>[3] <a href=""https:&#x2F;&#x2F;www.theguardian.com&#x2F;society&#x2F;2015&#x2F;aug&#x2F;16&#x2F;i-got-caught-drug-trafficking-duane-jackson"" rel=""nofollow"">https:&#x2F;&#x2F;www.theguardian.com&#x2F;society&#x2F;2015&#x2F;aug&#x2F;16&#x2F;i-got-caught...</a><p>[4] <a href=""https:&#x2F;&#x2F;www.gov.uk&#x2F;government&#x2F;publications&#x2F;ca42-foreign-going-mariners-and-deep-sea-fishermen"" rel=""nofollow"">https:&#x2F;&#x2F;www.gov.uk&#x2F;government&#x2F;publications&#x2F;ca42-foreign-goin...</a><p>[5] <a href=""https:&#x2F;&#x2F;www.gov.uk&#x2F;payroll-software&#x2F;paid-for-software"" rel=""nofollow"">https:&#x2F;&#x2F;www.gov.uk&#x2F;payroll-software&#x2F;paid-for-software</a><p>[6] <a href=""https:&#x2F;&#x2F;www.lukeleighfield.fyi&#x2F;blog&#x2F;hyko"" rel=""nofollow"">https:&#x2F;&#x2F;www.lukeleighfield.fyi&#x2F;blog&#x2F;hyko</a>",095880c1cab92724,https://news.ycombinator.com/item?id=27830978,"{'story_id': '27830978', 'points': 113, 'num_comments': 34, 'external_url': '', 'language': 'en'}",pre_launch,acknowledged_not_fixed,unclear,Temporal: pre_launch based on 2021-07-14. Resolution: acknowledged_not_fixed (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_27836088,2021-07-14T14:57:49,"&gt; “butt” is a feature in payroll land<p>Cloud-to-butt extension? :D<p>Great initiative; UK payroll systems are indeed a mess. Wishing you the best of luck - you clearly have the skills and experience to make a success of this clear gap in the market. I’m familiar with Monzo’s engineering and cultural standards, and hope you carry those to this startup too.",27497948bac227be,https://news.ycombinator.com/item?id=27836088,"{'comment_id': 27836088, 'story_id': '27830978', 'parent': 27830978}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2021-07-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_27831756,2021-07-14T08:06:00,"There&#x27;s quite a few modern HR platforms floating around, like CharlieHR, and it seems (as an outsider) that these platforms have explicitly decided not to enter payroll because it&#x27;s such a nightmare. From my own experience, payroll is very hands-on because of edge-cases: make one mistake with one employee and you&#x27;re sixty emails deep with a payroll administrator trying to clear things up (I&#x27;ve been on the receiving end of payroll hell quite a few times in my career!).<p>I think applying best engineering practices to business problems (i.e: unit testing your payroll logic) is a vastly undervalued opportunity and I think offering a payroll API is a fantastic opportunity for companies like CharlieHR to gain this functionality.<p>1. If we use CharlieHR as an example, how do you tackle building a relationship with them as a service provider (Payroll API) while competing with them on the product side? CharlieHR would need to disclose the relationship to their customers (since the data would be shared) -- do you plan to spin out a separate &quot;brand&quot; for the API?<p>2. How do you accommodate the inevitable Payroll hell: do you have (or plan to have) a staff of payroll administrators (and accountants?) to handle the edge-cases? Are you insured against any mistakes? Have you encountered any challenges so far &#x2F; identified any big wins?<p>Thanks and good-luck, I&#x27;ll pass this on to our HR team!",707364579fa68f7b,https://news.ycombinator.com/item?id=27831756,"{'comment_id': 27831756, 'story_id': '27830978', 'parent': 27830978}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2021-07-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_27833888,2021-07-14T12:06:40,"One of my previous stints was with a small team that was building a cloud-based payroll and HR platform for the Australian market (potentially going abroad as well). It definitely opened my eyes to how complicated award rules can be.<p>I also remember testing being a challenge, particularly when things like multiple backpays, accruals, or one off adjustments were involved.<p>There was also an integration API, but I didn&#x27;t stick around long enough to see it evolve enough for widespread third-party adoption.<p>Anyway, congratulations on the launch!",03f68df23e87fda1,https://news.ycombinator.com/item?id=27833888,"{'comment_id': 27833888, 'story_id': '27830978', 'parent': 27830978}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2021-07-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_27831693,2021-07-14T07:56:35,"Hello from a fellow UK HR (ish) company. This looks like a strong start - payroll is hard!<p>Good luck, we all need to band together to get rid of these insane portals of horrible UX",5c8cf890bdad4696,https://news.ycombinator.com/item?id=27831693,"{'comment_id': 27831693, 'story_id': '27830978', 'parent': 27830978}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2021-07-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_27842264,2021-07-15T04:33:28,"From someone who spent 10 years in the UK Payroll industry, good luck! I’ve spent many hours thinking about doing this myself.<p>One question that’s not clear from your website, what part of the market are you targeting? Payroll for a 10-person company is vastly different from a 10,000-person company (As I’m sure you are aware).<p>Regarding the API, personally I wouldn’t say the payroll processing API is a feature I’ve seen requested, but I like concept. The most common API requests are for employee data. No matter how good your integrations are, somebody is going to want names and addresses they can extract on demand.",7c5d7a462d37e601,https://news.ycombinator.com/item?id=27842264,"{'comment_id': 27842264, 'story_id': '27830978', 'parent': 27830978}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2021-07-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_27854148,2021-07-16T05:33:46,Congratulations on the launch!<p>I&#x27;ve recently moved to UK and doing research on payroll&#x2F;tax matters. I am working remotely for an overseas company making foreign income.<p>Do you support foreign company having employees in UK? The things I think needed support are<p>- Send Full Payment Submission to HMRC<p>- Apply pay as you earn scheme for employer (or is it for employee?)<p>- Filing Self Assessment tax returns to report foreign income<p>I am new to this matter so am not sure if the list makes sense at all.,5e09c0fe39d42a9b,https://news.ycombinator.com/item?id=27854148,"{'comment_id': 27854148, 'story_id': '27830978', 'parent': 27830978}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2021-07-16. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_27831641,2021-07-14T07:48:34,Congrats on the launch! Must take lots of guts to compete in a market with these many competitors. Hope this works out for you guys.<p>One thing that caught my eye was that the other softwares do not have automated tests. How do you know this?<p>Do you consider this to be a USP of your software? I do not think end users will care about whether tests exist or not.,088e18ac6fdf51f6,https://news.ycombinator.com/item?id=27831641,"{'comment_id': 27831641, 'story_id': '27830978', 'parent': 27830978}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2021-07-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_27831772,2021-07-14T08:08:41,I assume there&#x27;s no definitive list of all the quirks and edge cases involved. Will you have to rely on customer reports where you&#x27;re missing a bizarre edge case like [making this up] a person with a mononym wants to use the cycle to work scheme?,0fb497bf21ea24e2,https://news.ycombinator.com/item?id=27831772,"{'comment_id': 27831772, 'story_id': '27830978', 'parent': 27830978}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2021-07-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
hackernews_comment,hn_comment_27836030,2021-07-14T14:53:55,"LOVE the website design. Fresh, FAST and easy to understand. Kudos on the launch.",735120e7180b09fd,https://news.ycombinator.com/item?id=27836030,"{'comment_id': 27836030, 'story_id': '27830978', 'parent': 27830978}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2021-07-14. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_1jo93uh,2025-03-31T14:40:17,"What happened to the Service Weaver project from Google?\n\nI have been casually following the [Service Weaver ](https://serviceweaver.dev/)project from Google.  I just noticed it went into maintenance mode late last year.   Not sure if it the correct analogy but it really reminded me of Erlang's OTP.

I think there are some really interesting use cases for Service Weaver in AI agent space given its distribution model.   Anybody using it production that might be forking or taking over the project from Google?\n\n--- Top Comments ---\nYou need someone from Google. The project may be abandoned for multiple reasons like lack of funding, politics  or the promised benefits were not met

\>  Erlang's OTP

The approach is similar to 90s/Y2K RMI frameworks, which were cool back then. For example Java EE beans were meant to be called from remote JVMs. Basically a distributed component platform, but heavily ingrained in a library/framework code

I think Weaver is/was much better than those, but anyway it is kinda an old-fashioned approach, which is risky to be born again. It looks like it was too risky as it failed\nAs I know they abandoned it and I think the official cause is far from the real reason )))\nThanks for the history lesson!  That is super interesting. I had no idea. Do you know if Go has anything close to Erlang’s OTP framework?\nGo has https://github.com/ergo-services/ergo and https://tochemey.gitbook.io/goakt framework. They are actor model in Golang",0baf65e0b78691fc,https://reddit.com/r/golang/comments/1jo93uh/what_happened_to_the_service_weaver_project_from/,"{'subreddit': 'golang', 'score': 5, 'upvote_ratio': 0.69, 'num_comments': 4, 'flair': None, 'created_utc': 1743442817.0, 'language': 'en'}",post_discontinuation,unknown,unclear,Temporal: post_discontinuation based on 2025-03-31. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_11pm0xu,2023-03-12T15:37:04,"Service Weaver (of Google): does it make sense\n\nI read this announcement, and ask myself: does it make sense?

https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html

I think if you are new to Go, something you should just use the standard library, and maybe tools like ko-build.

And if you are in a big enterprise, then I guess the magic of weaver makes things more complicated.

So who is the target audience of this tool?

Does this tool make sense for you?\n\n--- Top Comments ---\nGoogler here.

This is similar to the main application development framework we use internally, although it's purpose built for our internal tech. The internal version of this works really, really well at our scale, but there's another half of the equation here that is missing: the platform services used to organize and run these type of binaries. We have an entire abstracted platform where nearly everything, from load balancing, capacity management, scaling, etc, ""just works"" in most cases, with the developer putting 0 thought into it.

I think this library is the first step in moving towards a more abstracted world, similarly how Kubernetes has become the king of infrastructure abstraction. However, like others here, I don't think it's there yet.

We'll see where the industry goes in the next 10 or so years. For all we know, none of this matters, and our AI overlords will write everything for us.\nSo, like Distributed COM back in the days?\n>This makes writing Service Weaver applications easy. You don't have to write any networking or serialization code; you just write Go. Service Weaver also provides libraries for logging, metrics, tracing, routing, testing, and more.

  
With this company doing fast rollout of new changes and MVPs they don't have to worry about if it's a JSON REST API or gRPC (any kind of RPC) those things are abstracted and the devs would only focus on writing the business logic. 

Similar to the transport layer other things are also taken care of which I think will be very useful if you want to bring anything to market quicker and at scale. Similar to what serverless would do.

I would definitely give this a try on gcloud\nNo way in hell. 

There is prior art worth studying, things like corba and the like (Java also had its own version. Then there are the various web services standards which tried to make remote calls feel nicer. I would recommend that everyone studies these, and history in general, before attempting to use something as ridiculous as this.

Hiding the remote calls and pretending the network doesn't exist is a very poor idea. I can see how junior developers and people with 5 years of experience in the industry could assume that this is the real thing.

In practice, if you need to do something like this in order to make your business application work, then I'm afraid that the architecture at play is simply horrible, and someone at some point made a very expensive mistake.
This could put some lipstick on the pig of a project that might just get away with it. Otherwise please forget this exists and don't slice your applications that small.\nSo... I read the announcement and the docs the day it came out.

It might be very, very useful for some companies, especially as more deploy targets are added, it is a welcome alternative to the serverless framework (much better IMHO).

But it has some flaws, the most glaring issues for me are:
- There can only be one entry point, you can't have multiple services being accessed from outside this framework.
- There is no way to share a component between two deployments (like if two binaries use a component from the same package it ends up duplicated in your deployment)
- There is no way to gradually migrate to this framework starting from the leaf components, only from the entry point (partially because of the two problems above)\n>So who is the target audience of this tool?

It seems like it provides the most benefit to completely new projects or projects that run as a single, possibly replicated, process (aka ""monoliths""). It would allow those projects to avoid the costs of the traditional microservices approach: spending time on inter-service communication, deployment config, service integration testing, making changes across many git repos, API versioning, exporting metrics/logs/profiles/traces, etc.\nREAD THIS: https://twitter.com/roblaszczak/status/1631659219601575937\nBasically old school J2EE (Java 2 Enterprise Edition) EJB's - but now in Golang.\nThe king of infrastructure management. That’s the biggest oversell of K8s ever. 

I’ve been working with K8s since 2018\ncan we trust that Google will keep this open source and continue the main development on that repo?",9c9ad19283a64bbd,https://reddit.com/r/golang/comments/11pm0xu/service_weaver_of_google_does_it_make_sense/,"{'subreddit': 'golang', 'score': 41, 'upvote_ratio': 0.94, 'num_comments': 17, 'flair': None, 'created_utc': 1678646224.0, 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_11fi4le,2023-03-01T18:08:05,"Service Weaver: A Framework for Writing Distributed Applications\n\n[https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html](https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html)\n\n--- Top Comments ---\nInteresting project. Gives me Spring and Akka vibes. I have a fundamental distrust for any framework that makes remote calls across the network look exactly like a local call. It has been tried many times before and it has failed every time. I completely understand the impulse, but there are so many complex failure modes in distributed systems that cannot be generically accounted for by a framework that I’m fairly convinced it’s not even a desirable thing to do. But maybe time will prove me wrong. 

Aside: I admit I get a chuckle out of announcements like this. So much of this part of the Go community claims to eschew frameworks and “Javaisms” like dependency injection, proudly proclaiming how unidiomatic they are. And yet Google keeps coming out with more and more frameworks for their language that recover much of the functionality popularized by the, for lack of a better term, enterprise programming ecosystem. It’s delightful.\nIf you want to use a much more mature version of the same idea that supports all common cloud infrastructure (databases, PubSub, caching, secrets management, configuration, cron jobs, etc) as well as all major cloud providers (AWS, GCP, Azure) you should check out Encore ([https://encore.dev](https://encore.dev)). I'm one of the founders, so happy to answer any questions :)\nAs a side effect, Service Weaver might turn out to be the first large scale project to make use of and expose others to Go generics.\nIt seems like a go version of ray.io.\nPer [the quick intro](https://serviceweaver.dev/blog/quick_intro.html):

> With Service Weaver, you deploy and manage a single application binary. The fact that it runs as separate microservices in the cloud is an implementation detail: all of your tooling preserves the impression of a single application binary. You can also easily run and test your application locally, before deploying it in the cloud.

Does this mean that every trivial change (in one or more components) will lead to a redeployment of all micro-services?\nErlang has had it for thirty-odd years.\nRegarding your aside: it's pretty confusing how Google does tend to do things that the go community at large has deemed ""non-idiomatic"", case in point this hefty framework. I'm very curious how this will be received.\nI don't know Akka but Spring does not offer anything of a sort (separating the deciding model from the deployment model)\nIs it 'non idiomatic' because it's called a framework? What in particular makes you say that? The devopment model (and reading code) is very similar to the code that is available at large. The call semantics are explicit. The use of interfaces as the basis of abstractionos standard and it has code generation like most people prefer. 

Again the new thing here is separating the deployment model from the devopment model. On devopment side seems pretty standard.\nPerhaps 'non-idiomatic' is the wrong term, but what I'm referring to is the go community tending to discourage the use of hefty frameworks in general, and instead prefer smaller, more focused libraries (or just writing your own thing). This framework bundles your networking, deployment, logging, and observability into a single framework. It doesn't appear customizable or plug-in-play. I'm not saying this is good or bad in this case, just that I recognize the community at large has not always been receptive to something like that.",bd6096ae87db2377,https://reddit.com/r/golang/comments/11fi4le/service_weaver_a_framework_for_writing/,"{'subreddit': 'golang', 'score': 19, 'upvote_ratio': 0.92, 'num_comments': 10, 'flair': None, 'created_utc': 1677704885.0, 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-01. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_15v8zo8,2023-08-19T04:04:22,"Gin/Gonic + Service Weaver\n\nHEYY guys!!

Please read my article on how to create a REST API using Service weaver by google  
https://atoo.hashnode.dev/gingonic-service-weaver  
\n\n--- Top Comments ---\nI had a look at doing this last week and stopped for now because it seemed non trivial to integrate into Serviceweaver’s logging and telemetry - does your code handle that?\nI haven't looked into telemetry. Came across service weaver 2 days ago lol. But the logging is like the simples ever. Under the hood it uses slog if I am not wrong.
Have I understood your question correctly?",c8af76c562ef0926,https://reddit.com/r/golang/comments/15v8zo8/gingonic_service_weaver/,"{'subreddit': 'golang', 'score': 3, 'upvote_ratio': 0.67, 'num_comments': 2, 'flair': None, 'created_utc': 1692428662.0, 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-08-19. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_14wiq5b,2023-07-11T03:12:11,"Service Weaver workshops\n\nHi all,

[Service Weaver](https://serviceweaver.dev) is an open source programming framework from Google that allows you to write a Go application as a modular binary and deploy it as a set of connected microservices. 

We are doing a series of workshops, if you are interested to learn more about Service Weaver and how to delay the monolith vs microservices decisions, we would love you to register for one of our upcoming workshops. The schedule is [here](https://serviceweaver.dev/workshops.html) (with more workshops coming soon). Next one is in San Francisco on July 26th and you can register [here](https://gdg.community.dev/events/details/google-gdg-san-francisco-presents-service-weaver-workshop-in-person/). 

\- Robert\n\n--- Top Comments ---\nI visited the workshop in Berlin. Very interesting stuff. I can recommend it.",1818974e95b22690,https://reddit.com/r/golang/comments/14wiq5b/service_weaver_workshops/,"{'subreddit': 'golang', 'score': 6, 'upvote_ratio': 0.88, 'num_comments': 1, 'flair': None, 'created_utc': 1689055931.0, 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-07-11. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_15sufvo,2023-08-16T13:21:43,A History of Service Weaver's Core API\n\n,85ad1096e4f64f95,https://reddit.com/r/golang/comments/15sufvo/a_history_of_service_weavers_core_api/,"{'subreddit': 'golang', 'score': 3, 'upvote_ratio': 0.8, 'num_comments': 0, 'flair': None, 'created_utc': 1692202903.0, 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-08-16. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_15w74jp,2023-08-20T06:43:10,"A better approach for developing microservice using Service Weaver\n\nAnother day, another article.  
Please have a look at this article and share with your friends. Also looking forward to having some comments be it criticism or positive ones!!

https://atoo.hashnode.dev/better-gingonic-service-weaver-approach#heading-lets-build-it",c8af76c562ef0926,https://reddit.com/r/golang/comments/15w74jp/a_better_approach_for_developing_microservice/,"{'subreddit': 'golang', 'score': 0, 'upvote_ratio': 0.33, 'num_comments': 0, 'flair': None, 'created_utc': 1692524590.0, 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-08-20. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_12cxksp,2023-04-05T17:56:06,"How to Implement a Service Weaver Deployer\n\n\n\n--- Top Comments ---\nThank you, the article is very interesting. 
Does anyone know, is there a way to use helm charts to deploy a weaver app? Or a simple solution to deploy to aws cloud?\nIt can now deploy to AWS cloud. 

More clouds coming too but slowly",85ad1096e4f64f95,https://reddit.com/r/golang/comments/12cxksp/how_to_implement_a_service_weaver_deployer/,"{'subreddit': 'golang', 'score': 3, 'upvote_ratio': 0.81, 'num_comments': 2, 'flair': None, 'created_utc': 1680728166.0, 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-04-05. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_13fn7cn,2023-05-12T11:46:08,Digging into Service Weaver: Dependency Injection\n\n,6ede8c0de8b4efe5,https://reddit.com/r/golang/comments/13fn7cn/digging_into_service_weaver_dependency_injection/,"{'subreddit': 'golang', 'score': 6, 'upvote_ratio': 0.75, 'num_comments': 0, 'flair': None, 'created_utc': 1683902768.0, 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-05-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_1jo93uh,2025-03-31T14:40:17,"What happened to the Service Weaver project from Google?\n\nI have been casually following the [Service Weaver ](https://serviceweaver.dev/)project from Google.  I just noticed it went into maintenance mode late last year.   Not sure if it the correct analogy but it really reminded me of Erlang's OTP.

I think there are some really interesting use cases for Service Weaver in AI agent space given its distribution model.   Anybody using it production that might be forking or taking over the project from Google?\n\n--- Top Comments ---\nYou need someone from Google. The project may be abandoned for multiple reasons like lack of funding, politics  or the promised benefits were not met

\>  Erlang's OTP

The approach is similar to 90s/Y2K RMI frameworks, which were cool back then. For example Java EE beans were meant to be called from remote JVMs. Basically a distributed component platform, but heavily ingrained in a library/framework code

I think Weaver is/was much better than those, but anyway it is kinda an old-fashioned approach, which is risky to be born again. It looks like it was too risky as it failed\nAs I know they abandoned it and I think the official cause is far from the real reason )))\nThanks for the history lesson!  That is super interesting. I had no idea. Do you know if Go has anything close to Erlang’s OTP framework?\nGo has https://github.com/ergo-services/ergo and https://tochemey.gitbook.io/goakt framework. They are actor model in Golang",0baf65e0b78691fc,https://reddit.com/r/golang/comments/1jo93uh/what_happened_to_the_service_weaver_project_from/,"{'subreddit': 'golang', 'score': 4, 'upvote_ratio': 0.64, 'num_comments': 4, 'flair': None, 'created_utc': 1743442817.0, 'language': 'en'}",post_discontinuation,unknown,unclear,Temporal: post_discontinuation based on 2025-03-31. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_1846k8w,2023-11-26T05:52:38,"Actors/Subprocess runtime library for Monolith apps?\n\nHi folks, I'm looking into different ways to package a new application I'm working on as a monolith app.

There are a few things I'm interested in, e.g. ability to define different subprocesses to run independently from the main thread, and to specify some lifetime policies for it (e.g. restarts, retries, error handling, etc.)

There is something very close for Rust, called Bastion: [https://github.com/bastion-rs/bastion](https://github.com/bastion-rs/bastion)

Does anyone know about a similar library for Go? Maybe an actor scheduler runtime, but never used any of those before.

F.A.Q. *""why don't you implement it yourself?!""* \-- I would like to focus my attention on the ""juice"" of the app, rather than this aspect (granted there is a library I can use). \n\n--- Top Comments ---\nI've worked with this lib if that's what you're looking for https://github.com/vladopajic/go-actor\nhttps://github.com/ergo-services/ergo

Try this if you’re looking for something similar to Erlang OTP\nhttps://github.com/ServiceWeaver/weaver

“Write your application as a modular binary. Deploy it as a set of microservices.”",11fd652578c0f6e0,https://reddit.com/r/golang/comments/1846k8w/actorssubprocess_runtime_library_for_monolith_apps/,"{'subreddit': 'golang', 'score': 2, 'upvote_ratio': 0.75, 'num_comments': 4, 'flair': 'help', 'created_utc': 1700988758.0, 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-11-26. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_15v8zo8,2023-08-19T04:04:22,"Gin/Gonic + Service Weaver\n\nHEYY guys!!

Please read my article on how to create a REST API using Service weaver by google  
https://atoo.hashnode.dev/gingonic-service-weaver  
\n\n--- Top Comments ---\nI had a look at doing this last week and stopped for now because it seemed non trivial to integrate into Serviceweaver’s logging and telemetry - does your code handle that?\nI haven't looked into telemetry. Came across service weaver 2 days ago lol. But the logging is like the simples ever. Under the hood it uses slog if I am not wrong.
Have I understood your question correctly?",c8af76c562ef0926,https://reddit.com/r/golang/comments/15v8zo8/gingonic_service_weaver/,"{'subreddit': 'golang', 'score': 3, 'upvote_ratio': 0.67, 'num_comments': 2, 'flair': None, 'created_utc': 1692428662.0, 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-08-19. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_14wiq5b,2023-07-11T03:12:11,"Service Weaver workshops\n\nHi all,

[Service Weaver](https://serviceweaver.dev) is an open source programming framework from Google that allows you to write a Go application as a modular binary and deploy it as a set of connected microservices. 

We are doing a series of workshops, if you are interested to learn more about Service Weaver and how to delay the monolith vs microservices decisions, we would love you to register for one of our upcoming workshops. The schedule is [here](https://serviceweaver.dev/workshops.html) (with more workshops coming soon). Next one is in San Francisco on July 26th and you can register [here](https://gdg.community.dev/events/details/google-gdg-san-francisco-presents-service-weaver-workshop-in-person/). 

\- Robert\n\n--- Top Comments ---\nI visited the workshop in Berlin. Very interesting stuff. I can recommend it.",1818974e95b22690,https://reddit.com/r/golang/comments/14wiq5b/service_weaver_workshops/,"{'subreddit': 'golang', 'score': 6, 'upvote_ratio': 0.88, 'num_comments': 1, 'flair': None, 'created_utc': 1689055931.0, 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-07-11. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_1jo93uh,2025-03-31T14:40:17,"What happened to the Service Weaver project from Google?\n\nI have been casually following the [Service Weaver ](https://serviceweaver.dev/)project from Google.  I just noticed it went into maintenance mode late last year.   Not sure if it the correct analogy but it really reminded me of Erlang's OTP.

I think there are some really interesting use cases for Service Weaver in AI agent space given its distribution model.   Anybody using it production that might be forking or taking over the project from Google?\n\n--- Top Comments ---\nYou need someone from Google. The project may be abandoned for multiple reasons like lack of funding, politics  or the promised benefits were not met

\>  Erlang's OTP

The approach is similar to 90s/Y2K RMI frameworks, which were cool back then. For example Java EE beans were meant to be called from remote JVMs. Basically a distributed component platform, but heavily ingrained in a library/framework code

I think Weaver is/was much better than those, but anyway it is kinda an old-fashioned approach, which is risky to be born again. It looks like it was too risky as it failed\nAs I know they abandoned it and I think the official cause is far from the real reason )))\nThanks for the history lesson!  That is super interesting. I had no idea. Do you know if Go has anything close to Erlang’s OTP framework?\nGo has https://github.com/ergo-services/ergo and https://tochemey.gitbook.io/goakt framework. They are actor model in Golang",0baf65e0b78691fc,https://reddit.com/r/golang/comments/1jo93uh/what_happened_to_the_service_weaver_project_from/,"{'subreddit': 'golang', 'score': 6, 'upvote_ratio': 0.71, 'num_comments': 4, 'flair': None, 'created_utc': 1743442817.0, 'language': 'en'}",post_discontinuation,unknown,unclear,Temporal: post_discontinuation based on 2025-03-31. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_11pm0xu,2023-03-12T15:37:04,"Service Weaver (of Google): does it make sense\n\nI read this announcement, and ask myself: does it make sense?

https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html

I think if you are new to Go, something you should just use the standard library, and maybe tools like ko-build.

And if you are in a big enterprise, then I guess the magic of weaver makes things more complicated.

So who is the target audience of this tool?

Does this tool make sense for you?\n\n--- Top Comments ---\nGoogler here.

This is similar to the main application development framework we use internally, although it's purpose built for our internal tech. The internal version of this works really, really well at our scale, but there's another half of the equation here that is missing: the platform services used to organize and run these type of binaries. We have an entire abstracted platform where nearly everything, from load balancing, capacity management, scaling, etc, ""just works"" in most cases, with the developer putting 0 thought into it.

I think this library is the first step in moving towards a more abstracted world, similarly how Kubernetes has become the king of infrastructure abstraction. However, like others here, I don't think it's there yet.

We'll see where the industry goes in the next 10 or so years. For all we know, none of this matters, and our AI overlords will write everything for us.\nSo, like Distributed COM back in the days?\n>This makes writing Service Weaver applications easy. You don't have to write any networking or serialization code; you just write Go. Service Weaver also provides libraries for logging, metrics, tracing, routing, testing, and more.

  
With this company doing fast rollout of new changes and MVPs they don't have to worry about if it's a JSON REST API or gRPC (any kind of RPC) those things are abstracted and the devs would only focus on writing the business logic. 

Similar to the transport layer other things are also taken care of which I think will be very useful if you want to bring anything to market quicker and at scale. Similar to what serverless would do.

I would definitely give this a try on gcloud\nNo way in hell. 

There is prior art worth studying, things like corba and the like (Java also had its own version. Then there are the various web services standards which tried to make remote calls feel nicer. I would recommend that everyone studies these, and history in general, before attempting to use something as ridiculous as this.

Hiding the remote calls and pretending the network doesn't exist is a very poor idea. I can see how junior developers and people with 5 years of experience in the industry could assume that this is the real thing.

In practice, if you need to do something like this in order to make your business application work, then I'm afraid that the architecture at play is simply horrible, and someone at some point made a very expensive mistake.
This could put some lipstick on the pig of a project that might just get away with it. Otherwise please forget this exists and don't slice your applications that small.\nSo... I read the announcement and the docs the day it came out.

It might be very, very useful for some companies, especially as more deploy targets are added, it is a welcome alternative to the serverless framework (much better IMHO).

But it has some flaws, the most glaring issues for me are:
- There can only be one entry point, you can't have multiple services being accessed from outside this framework.
- There is no way to share a component between two deployments (like if two binaries use a component from the same package it ends up duplicated in your deployment)
- There is no way to gradually migrate to this framework starting from the leaf components, only from the entry point (partially because of the two problems above)\n>So who is the target audience of this tool?

It seems like it provides the most benefit to completely new projects or projects that run as a single, possibly replicated, process (aka ""monoliths""). It would allow those projects to avoid the costs of the traditional microservices approach: spending time on inter-service communication, deployment config, service integration testing, making changes across many git repos, API versioning, exporting metrics/logs/profiles/traces, etc.\nREAD THIS: https://twitter.com/roblaszczak/status/1631659219601575937\nBasically old school J2EE (Java 2 Enterprise Edition) EJB's - but now in Golang.\nThe king of infrastructure management. That’s the biggest oversell of K8s ever. 

I’ve been working with K8s since 2018\ncan we trust that Google will keep this open source and continue the main development on that repo?",9c9ad19283a64bbd,https://reddit.com/r/golang/comments/11pm0xu/service_weaver_of_google_does_it_make_sense/,"{'subreddit': 'golang', 'score': 41, 'upvote_ratio': 0.94, 'num_comments': 17, 'flair': None, 'created_utc': 1678646224.0, 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-12. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_15v8zo8,2023-08-19T04:04:22,"Gin/Gonic + Service Weaver\n\nHEYY guys!!

Please read my article on how to create a REST API using Service weaver by google  
https://atoo.hashnode.dev/gingonic-service-weaver  
\n\n--- Top Comments ---\nI had a look at doing this last week and stopped for now because it seemed non trivial to integrate into Serviceweaver’s logging and telemetry - does your code handle that?\nI haven't looked into telemetry. Came across service weaver 2 days ago lol. But the logging is like the simples ever. Under the hood it uses slog if I am not wrong.
Have I understood your question correctly?",c8af76c562ef0926,https://reddit.com/r/golang/comments/15v8zo8/gingonic_service_weaver/,"{'subreddit': 'golang', 'score': 3, 'upvote_ratio': 0.67, 'num_comments': 2, 'flair': None, 'created_utc': 1692428662.0, 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-08-19. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_14wiq5b,2023-07-11T03:12:11,"Service Weaver workshops\n\nHi all,

[Service Weaver](https://serviceweaver.dev) is an open source programming framework from Google that allows you to write a Go application as a modular binary and deploy it as a set of connected microservices. 

We are doing a series of workshops, if you are interested to learn more about Service Weaver and how to delay the monolith vs microservices decisions, we would love you to register for one of our upcoming workshops. The schedule is [here](https://serviceweaver.dev/workshops.html) (with more workshops coming soon). Next one is in San Francisco on July 26th and you can register [here](https://gdg.community.dev/events/details/google-gdg-san-francisco-presents-service-weaver-workshop-in-person/). 

\- Robert\n\n--- Top Comments ---\nI visited the workshop in Berlin. Very interesting stuff. I can recommend it.",1818974e95b22690,https://reddit.com/r/golang/comments/14wiq5b/service_weaver_workshops/,"{'subreddit': 'golang', 'score': 6, 'upvote_ratio': 0.88, 'num_comments': 1, 'flair': None, 'created_utc': 1689055931.0, 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2023-07-11. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_11hkh43,2023-03-03T21:43:00,"Service Weaver: A Framework From Google For Balancing Monoliths and Microservices\n\n\n\n--- Top Comments ---\nNice!  
I wonder how can it be implemented for other industries, such as Embedded Linux. 

At the company I work for we're doing distributed microservices in an Embedded Linux device, and as we go forward and the number of services grows, we can clearly see how difficult it's becoming to orchestrate operation ""in production"", and how inconvenient it is to locally test the system during development, especially from the POV of a single service developer that needs to interact with other services. 

On the surface, it shouldn't be too hard if the code is organized in a monorepo, and inspiration is taken from the Weaver to implement a similar framework (or even better - Improve Weaver to support these scenarios)\nFFS this is a slow and grinding and pathetic re-invention of basically Erlang's actor model",360e98d37e61487e,https://reddit.com/r/programming/comments/11hkh43/service_weaver_a_framework_from_google_for/,"{'subreddit': 'programming', 'score': 12, 'upvote_ratio': 0.68, 'num_comments': 2, 'flair': None, 'created_utc': 1677890580.0, 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_11l3kkk,2023-03-07T13:16:55,Service Weaver is a programming framework for writing & deploying cloud apps\n\n,e1de54c009201a81,https://reddit.com/r/programming/comments/11l3kkk/service_weaver_is_a_programming_framework_for/,"{'subreddit': 'programming', 'score': 1, 'upvote_ratio': 0.55, 'num_comments': 0, 'flair': None, 'created_utc': 1678205815.0, 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-07. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_91ck5,2009-07-15T06:04:21,"SAP NetWeaver MDM 7.1 SP02 Release\n\nSAP NetWeaver MDM 7.1 SP02 Release Note

MDM, Master Data Management, SAP NetWeaver MDM, Service pack 2, Service Pack 02, SP2, MDM 71, 7.1.02.59, 7.1.2.59\n\n--- Top Comments ---\nEnhancements & Bugfixes coming with SAP NetWeaver MDM 7.1 SP02",eeb7ca337b24d049,https://reddit.com/r/programming/comments/91ck5/sap_netweaver_mdm_71_sp02_release/,"{'subreddit': 'programming', 'score': 0, 'upvote_ratio': 0.33, 'num_comments': 1, 'flair': None, 'created_utc': 1247648661.0, 'language': 'en'}",pre_launch,unknown,unclear,Temporal: pre_launch based on 2009-07-15. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_1czgqi1,2024-05-24T06:28:50,"Don't Microservice, Do Module\n\n\n\n--- Top Comments ---\nDon't turn a functional call into a network call\nAt least at my company, the scaling benefit of microservices have never really been touted. The two main benefits for us is that they’re independently managed and they can be used as a common solution for a given problem. 

But also for context : our biggest problem is that we have not one but several legacy monolith solutions, several of which (because the teams were siloed) developed independent solutions to the same problem. 

So we’re focusing on microservices mostly to modernize with minimal impact to the end user and to avoid the siloing problem. Both of these are more business facing problems than tech problems.\nI really align with all the points. As an engineering manager for a team that has taken microservices to an extreme, this hits home. Also what you say advocating for a single tech stack (e.g. Java or .NET) throughout actually has massive advantages - contrary to popular opinion.

There are maybe few industries where one part can be written in Java and the other *needs* to be written in Rust.\nOf course if you build a distributed monolith you shouldn't do microservices. But then distributed monoliths aren't really microservices. Like everything in software, microservices or monoliths are not intrinsically good or bad, it's what you make of them that's good or bad.\nThe section on monitoring angers me. That’s a really reductive outlook that fails to properly explain the problems set on either side. \nI work for a software company that's been around making ERP type products since the 80s. Their rise to dominance and success in the industry it serves happened with a huge on-prem monolithic desktop (fat client) app. Their first stumble was deciding to rewrite the old monolith into the exact same monolith, but in a different language and desktop app tech stack. Their second and current stumble is to ""rewrite the rewrite"" as an extremely opinionated homegrown microservices platform approach.

The one project I'm on has been attempting a rewrite of the rewrite for over 3 years now. From the eager customers perspective, they're losing patience as we aren't actually delivering anything to them in any timely manner. We spend so much time fighting the design of ""containers for the sake of containers"", rather than focus on the root problems like a poor understanding and plan for the problem domain. Just yesterday I fought one ""pod"" by debugging it locally, only to realize the bug was in a different pod, and our missing/poor logging in the system misled me.

Every dev team now writes a CRUD API at best, and they pat themselves on the back thinking mission complete. Our monoliths made money because they did a ton of business logic and processing that spreadsheets would fall short on. You ask folks how you'll distribute a rollback strategy on a very large transactional problem, and they either ignore it or double down into the cult that microservices magically fix that problem. In our monolith, we can start a database transaction, super simple stuff. I've yet to see a truly capable ""saga pattern"" in our microservices rewrite.

What I'm getting at is I will always take a well thought out monolith over a ""but we're using kubernetes now!"" dumpster fire of a design. As the article states towards the end, I can't help but think this was ""resume driven design"", with a side of buzzword bingo.\nSome good points but had a chuckle at this point under Ease of Monitoring:

`With a monolithic architecture, your system is either UP or DOWN, with no in-between.`

That's actually a big liability of the monolith. If the entire system is down, there is a BIG problem. Developers/Engineers make mistakes, it's human, but I'd rather have partial availability than a complete outage.

But my opinion on this, like in most things, it comes down to implementation. You can have terrible microservice and monolith implementations, it's about the engineers implementing/maintaining them.\nI'd go one step further, consider consolidating your micro services into a macro service (monolith sounds less funky).

We have reduced approximately a couple dozen micro services into a single macro service. So much less headaches (we did though put in additional guardrails, checks and balances I admit).

We also start most new initiatives within an existing or new macro service. We observe usage, and evolve it from there.

Also to add we saved a pretty penny with the consolidation.


Edit 1 - For all implementation questions
Don't expect this to be quick and easy exercise, it is a journey, starting with vision, definition, then execution.\nMicroservices have become a religion and speaking out or going against it is heresy.

I do think microservices still have its usages but at a cost far far greater than people are aware of. Its benificial in very large teams, huge projects and projects also connecting to a lot of legacy. But for most companies with about 30 devs or so way to expensive.

One thing id like to argue in favour of microservices can be resilience when only a part of the system is faulty, the rest can continue working without issues assuming proper decoupling.\nWhile I'm all for bashing on microservices for being used wrong in so many projects, I don't think the author really understands microservices very well.

Modularity and being able to use many different languages seems to be a big focus of the article, when that's really just a side effect of microservices.

Microservices are definately overhyped, but they are hyped for a reason nevertheless. On a scale of Netflix, for example, microservices are a great choice, but the article completely fails to point out why a company of that size would prefer microservices to any other architecture.",2a78a56b0fae7ce9,https://reddit.com/r/programming/comments/1czgqi1/dont_microservice_do_module/,"{'subreddit': 'programming', 'score': 390, 'upvote_ratio': 0.85, 'num_comments': 193, 'flair': None, 'created_utc': 1716542930.0, 'language': 'en'}",plateau,unknown,unclear,Temporal: plateau based on 2024-05-24. Resolution: unknown (heuristic). Root cause: unclear (code=)
reddit,reddit_11hkh43,2023-03-03T21:43:00,"Service Weaver: A Framework From Google For Balancing Monoliths and Microservices\n\n\n\n--- Top Comments ---\nNice!  
I wonder how can it be implemented for other industries, such as Embedded Linux. 

At the company I work for we're doing distributed microservices in an Embedded Linux device, and as we go forward and the number of services grows, we can clearly see how difficult it's becoming to orchestrate operation ""in production"", and how inconvenient it is to locally test the system during development, especially from the POV of a single service developer that needs to interact with other services. 

On the surface, it shouldn't be too hard if the code is organized in a monorepo, and inspiration is taken from the Weaver to implement a similar framework (or even better - Improve Weaver to support these scenarios)\nFFS this is a slow and grinding and pathetic re-invention of basically Erlang's actor model",360e98d37e61487e,https://reddit.com/r/programming/comments/11hkh43/service_weaver_a_framework_from_google_for/,"{'subreddit': 'programming', 'score': 11, 'upvote_ratio': 0.67, 'num_comments': 2, 'flair': None, 'created_utc': 1677890580.0, 'language': 'en'}",early_adoption,unknown,unclear,Temporal: early_adoption based on 2023-03-03. Resolution: unknown (heuristic). Root cause: unclear (code=)
